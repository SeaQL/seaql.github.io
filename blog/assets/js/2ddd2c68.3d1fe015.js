"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[3386],{2129:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var a=t(6018),r=t(8948),o=t(7630);const s={slug:"2024-08-08-graphql-admin-dashboard-with-loco-seaography",title:"GraphQL based Admin Dashboard with Loco and Seaography",author:"Billy Chan",author_title:"SeaQL Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png",tags:["news"]},i=void 0,d={authorsImageUrls:[void 0]},l=[{value:"What is Seaography",id:"what-is-seaography",level:2},{value:"Setup React-Admin Frontend Boilerplate",id:"setup-react-admin-frontend-boilerplate",level:2},{value:"Add NPM dependency",id:"add-npm-dependency",level:2},{value:"GraphQL Data Provider",id:"graphql-data-provider",level:2},{value:"Customize React-Admin Frontend",id:"customize-react-admin-frontend",level:2},{value:"Auth Free GraphQL Endpoint",id:"auth-free-graphql-endpoint",level:2},{value:"Put It into Action!",id:"put-it-into-action",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:"/blog/img/Loco%20x%20SeaORM.png"}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial, we would develop a GraphQL based admin dashboard with ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography",children:"Seaography"})," and Loco."]}),"\n",(0,r.jsxs)(n.p,{children:["Read our first and second tutorial of the series, ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2024-05-28-getting-started-with-loco-seaorm/",children:"Getting Started with Loco & SeaORM"}),", ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2024-07-01-graphql-support-with-loco-seaography/",children:"Adding GraphQL Support to Loco with Seaography"}),", if you haven't."]}),"\n",(0,r.jsxs)(n.p,{children:["The full source code can be found ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/1.0.x/examples/react_admin",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"what-is-seaography",children:"What is Seaography"}),"\n",(0,r.jsx)(n.p,{children:"Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM entities. It ships with a CLI tool that can generate ready-to-compile Rust GraphQL servers from existing MySQL, Postgres and SQLite databases."}),"\n",(0,r.jsx)(n.h2,{id:"setup-react-admin-frontend-boilerplate",children:"Setup React-Admin Frontend Boilerplate"}),"\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://marmelab.com/react-admin/",children:(0,r.jsx)(n.code,{children:"React-Admin"})})," as the frontend framework. It provides a convenient boilerplate to start with:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ npm init react-admin frontend\n\nSelect the data provider you want to use, and validate with Enter:\n\u276f None\n  I'll configure the data provider myself.\n\nSelect the auth provider you want to use, and validate with Enter:\n\u276f Hard coded local username/password\n\nEnter the name of a resource you want to add, and validate with Enter (leave empty to finish):\n\u276f (Leave empty and press Enter)\n\nHow do you want to install the dependencies?\n\u276f Using npm\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Run the boilerplate then visit ",(0,r.jsx)(n.a,{href:"http://localhost:5173/",children:"http://localhost:5173/"}),", you should see the welcome page:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ cd frontend\n\n$ npm install\n\n$ npm run dev\n\n> dev\n> vite\n\n  VITE v4.5.3  ready in 440 ms\n\n  \u279c  Local:   http://localhost:5173/\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20Welcome.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["Now, we want to display the ",(0,r.jsx)(n.code,{children:"React-Admin"})," data table template with mock data. First, we need to add ",(0,r.jsx)(n.code,{children:"ra-data-json-server"})," dependency, it provides a ready-to-go mock data loader:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ npm install ra-data-json-server\n"})}),"\n",(0,r.jsx)(n.p,{children:"To prepare the mock data loader, we create a new file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="frontend/src/dataProvider.ts"',children:"import jsonServerProvider from 'ra-data-json-server';\n\nexport const dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, we change the UI file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="frontend/src/index.tsx"',children:"+ import { Admin, Resource, ListGuesser, ShowGuesser } from 'react-admin';\n+ import { dataProvider } from './dataProvider';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n-   <React.StrictMode>\n-       <App />\n-   </React.StrictMode>\n+   <Admin dataProvider={dataProvider}>\n+       <Resource name=\"users\" list={ListGuesser} show={ShowGuesser} />\n+   </Admin>\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the boilerplate now you should see the user listing page:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ npm run dev\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20List.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Click on each row to view its detail page."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20View.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"add-npm-dependency",children:"Add NPM dependency"}),"\n",(0,r.jsxs)(n.p,{children:["Next, we start to integrate our Loco and Seaography backend with React-Admin frontend. We use ",(0,r.jsx)(n.code,{children:"axios"})," for sending POST request to our GraphQL backend:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ npm install axios\n"})}),"\n",(0,r.jsx)(n.h2,{id:"graphql-data-provider",children:"GraphQL Data Provider"}),"\n",(0,r.jsxs)(n.p,{children:["Then, we can start implementing the GraphQL data provider by replacing the content of ",(0,r.jsx)(n.code,{children:"dataProvider.ts"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="frontend/src/dataProvider.ts"',children:"- import jsonServerProvider from 'ra-data-json-server';\n- \n- export const dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Integrating with our GraphQL endpoint at ",(0,r.jsx)(n.a,{href:"http://localhost:3000/api/graphql",children:"http://localhost:3000/api/graphql"}),". We implemented two handler below, one fetch data for the post listing and the other to fetch data for a single post:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="frontend/src/dataProvider.ts"',children:"import { DataProvider } from \"react-admin\";\nimport axios from 'axios';\n\nconst apiUrl = 'http://localhost:3000/api/graphql';\n\nexport const dataProvider: DataProvider = {\n    // Fetch data for post listing\n    getList: (resource, params) => {\n        // Paginator status\n        const { page, perPage } = params.pagination;\n        // Sorter status\n        const { field, order } = params.sort;\n\n        // POST request to GraphQL endpoint\n        return axios.post(apiUrl, {\n            query: `\n            query {\n              notes (\n                orderBy: { ${field}: ${order} },\n                pagination: { page: { limit: ${perPage}, page: ${page - 1} }}\n              ) {\n                nodes {\n                  id\n                  title\n                  createdAt\n                  updatedAt\n                }\n                paginationInfo {\n                  pages\n                  current\n                  offset\n                  total\n                }\n              }\n            }\n            `\n        })\n            .then((response) => {\n                // Unwrap the response\n                const { nodes, paginationInfo } = response.data.data.notes;\n                // Return the data array and total number of pages\n                return {\n                    data: nodes,\n                    total: paginationInfo.total,\n                };\n            });\n    },\n\n    // Fetch data for a single post\n    getOne: (resource, params) => {\n        // POST request to GraphQL endpoint\n        return axios.post(apiUrl, {\n            query: `\n            query {\n              notes(filters: {id: {eq: ${params.id}}}) {\n                nodes {\n                  id\n                  title\n                  content\n                  createdAt\n                  updatedAt\n                }\n              }\n            }\n            `\n        })\n            .then((response) => {\n                // Unwrap the response\n                const { nodes } = response.data.data.notes;\n                // Return the one and only data\n                return {\n                    data: nodes[0],\n                };\n            });\n    },\n\n    getMany: (resource, params) => { },\n\n    getManyReference: (resource, params) => { },\n\n    update: (resource, params) => { },\n\n    updateMany: (resource, params) => { },\n\n    create: (resource, params) => { },\n\n    delete: (resource, params) => { },\n\n    deleteMany: (resource, params) => { },\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"customize-react-admin-frontend",children:"Customize React-Admin Frontend"}),"\n",(0,r.jsx)(n.p,{children:"Replace the React-Admin template frontend with our own custom UI to list all notes from the database."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="frontend/src/index.tsx"',children:"- ReactDOM.createRoot(document.getElementById('root')!).render(\n-    <Admin dataProvider={dataProvider}>\n-        <Resource name=\"users\" list={ListGuesser} show={ShowGuesser} />\n-    </Admin>\n- );\n"})}),"\n",(0,r.jsx)(n.p,{children:"Implement the list and details page with specific columns:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",metastring:'title="frontend/src/index.tsx"',children:'import ReactDOM from \'react-dom/client\';\nimport { Admin, Resource, List, Datagrid, TextField, Show, SimpleShowLayout } from \'react-admin\';\nimport { dataProvider } from \'./dataProvider\';\n\nconst PostList = () => (\n    <List>\n        <Datagrid bulkActionButtons={false}>\n            <TextField source="id" />\n            <TextField source="title" />\n            <TextField source="content" />\n            <TextField source="createdAt" />\n            <TextField source="updatedAt" />\n        </Datagrid>\n    </List>\n);\n\nconst PostShow = () => (\n    <Show>\n        <SimpleShowLayout>\n            <TextField source="id" />\n            <TextField source="title" />\n            <TextField source="content" />\n            <TextField source="createdAt" />\n            <TextField source="updatedAt" />\n        </SimpleShowLayout>\n    </Show>\n);\n\nReactDOM.createRoot(document.getElementById(\'root\')!).render(\n    <Admin dataProvider={dataProvider}>\n        <Resource name="posts" list={PostList} show={PostShow} />\n    </Admin>\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"auth-free-graphql-endpoint",children:"Auth Free GraphQL Endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Disabled user authentication on GraphQL POST handler endpoint for convenient:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="backend/src/controllers/graphql.rs"',children:"async fn graphql_handler(\n-   _auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    const DEPTH: usize = 1_000;\n    const COMPLEXITY: usize = 1_000;\n    // Construct the the GraphQL query root\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    // Execute GraphQL request and fetch the results\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"put-it-into-action",children:"Put It into Action!"}),"\n",(0,r.jsx)(n.p,{children:"Run the React-Admin frontend:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ cd frontend\n$ npm run dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run the Loco backend:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"$ cd backend\n$ cargo run start\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Visit ",(0,r.jsx)(n.a,{href:"http://localhost:5173/",children:"http://localhost:5173/"}),", you should see the post listing page:"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"We are fetching data from the GraphQL backend:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List%20API.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Click on column header to sort by the column in ascending or descending order:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List%20Sorted.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Click on each row to view its detail page:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20View.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Adding GraphQL support to Loco application is easy with the help of Seaography. It is an ergonomic library that perfectly integrate with any frontend framework. This tutorial only cover the basic integration of LOco and Seaography including only the querying of data via the GraphQL endpoint. GraphQL mutations are not demonstrated and we leave it for you to code it out!"}),"\n",(0,r.jsx)(n.h2,{id:"sql-server-support",children:"SQL Server Support"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM-X/",children:"SQL Server for SeaORM"})," is now available as a closed beta. If you are interested`, please signup ",(0,r.jsx)(n.a,{href:"https://forms.office.com/r/1MuRPJmYBR",children:"here"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Migrating from ",(0,r.jsx)(n.code,{children:"sea-orm"})," to ",(0,r.jsx)(n.code,{children:"sea-orm-x"})," is straightforward with two simple steps. First, update the existing ",(0,r.jsx)(n.code,{children:"sea-orm"})," dependency to ",(0,r.jsx)(n.code,{children:"sea-orm-x"})," and enable the ",(0,r.jsx)(n.code,{children:"sqlz-mssql"})," feature. Note that you might need to patch SeaORM dependency for the upstream dependencies."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'sea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x", features = ["runtime-async-std-rustls", "sqlz-mssql"] }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n\n# Patch SeaORM dependency for the upstream dependencies\n[patch.crates-io]\nsea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x" }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n'})}),"\n",(0,r.jsx)(n.p,{children:"Second, update the connection string to connect to the MSSQL database."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# If the schema is `dbo`, simply write:\nmssql://username:password@host/database\n\n# Or, specify the schema name by providing an extra `currentSchema` query param.\nmssql://username:password@host/database?currentSchema=my_schema\n\n# You can trust peer certificate by providing an extra trustCertificate query param.\nmssql://username:password@host/database?trustCertificate=true\n"})}),"\n",(0,r.jsx)(n.p,{children:"SeaORM X has full Loco support and integrate seamlessly with many web frameworks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Actix"}),"\n",(0,r.jsx)(n.li,{children:"Axum"}),"\n",(0,r.jsx)(n.li,{children:"Async GraphQL"}),"\n",(0,r.jsx)(n.li,{children:"jsonrpsee"}),"\n",(0,r.jsx)(n.li,{children:"Loco"}),"\n",(0,r.jsx)(n.li,{children:"Poem"}),"\n",(0,r.jsx)(n.li,{children:"Salvo"}),"\n",(0,r.jsx)(n.li,{children:"Tonic"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Happy Coding!"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6018:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024-08-08-graphql-admin-dashboard-with-loco-seaography","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-08-08-graphql-admin-dashboard-with-loco-seaography.md","source":"@site/blog/2024-08-08-graphql-admin-dashboard-with-loco-seaography.md","title":"GraphQL based Admin Dashboard with Loco and Seaography","description":"In this tutorial, we would develop a GraphQL based admin dashboard with Seaography and Loco.","date":"2024-08-08T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":6.56,"hasTruncateMarker":false,"authors":[{"name":"Billy Chan","title":"SeaQL Team","url":"https://github.com/billy1624","imageURL":"https://avatars.githubusercontent.com/u/30400950?v=4","key":null,"page":null}],"frontMatter":{"slug":"2024-08-08-graphql-admin-dashboard-with-loco-seaography","title":"GraphQL based Admin Dashboard with Loco and Seaography","author":"Billy Chan","author_title":"SeaQL Team","author_url":"https://github.com/billy1624","author_image_url":"https://avatars.githubusercontent.com/u/30400950?v=4","image":"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"What\'s new in SeaStreamer 0.5","permalink":"/blog/2024-11-30-whats-new-in-sea-streamer-0.5"},"nextItem":{"title":"Announcing SeaORM 1.0 \ud83d\udc1a","permalink":"/blog/2024-08-04-sea-orm-1.0"}}')},7630:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(7368);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);