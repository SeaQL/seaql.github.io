"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[7889],{1599:e=>{e.exports=JSON.parse('{"permalink":"/blog/2025-03-08-whats-new-in-sea-orm-1.1","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2025-03-08-whats-new-in-sea-orm-1.1.md","source":"@site/blog/2025-03-08-whats-new-in-sea-orm-1.1.md","title":"What\'s new in SeaORM 1.1","description":"This blog post summarizes the new features and enhancements introduced in SeaORM 1.1:","date":"2025-03-08T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":9.805,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Chris Tsang","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/blog/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2025-03-08-whats-new-in-sea-orm-1.1","title":"What\'s new in SeaORM 1.1","author":"SeaQL Team","author_title":"Chris Tsang","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/blog/img/SeaQL.png","image":"https://www.sea-ql.org/blog/img/SeaORM%201.0-rc%20Banner.png","tags":["news"]},"unlisted":false,"nextItem":{"title":"Tutorial: Modeling Inheritance in SeaORM","permalink":"/blog/2025-01-08-sea-orm-inheritance"}}')},6384:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var s=a(1599),t=a(8790),r=a(7630);const i={slug:"2025-03-08-whats-new-in-sea-orm-1.1",title:"What's new in SeaORM 1.1",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/blog/img/SeaQL.png",image:"https://www.sea-ql.org/blog/img/SeaORM%201.0-rc%20Banner.png",tags:["news"]},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"New Features",id:"new-features",level:2},{value:"Support Postgres Vector",id:"support-postgres-vector",level:3},{value:"Nested Objects in Relational Queries",id:"nested-objects-in-relational-queries",level:3},{value:"Bonus: PartialModel -&gt; ActiveModel",id:"bonus-partialmodel---activemodel",level:4},{value:"Three way select",id:"three-way-select",level:3},{value:"Insert heterogeneous models",id:"insert-heterogeneous-models",level:3},{value:"Improved Seaography Integration",id:"improved-seaography-integration",level:3},{value:"Enhancements",id:"enhancements",level:2},{value:"Upgrades",id:"upgrades",level:2},{value:"House Keeping",id:"house-keeping",level:2},{value:"Release Planning",id:"release-planning",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2},{value:"Sponsor",id:"sponsor",level:2},{value:"Wait... there&#39;s one more thing",id:"wait-theres-one-more-thing",level:3},{value:"\ud83d\udda5\ufe0f SeaORM Pro: Professional Admin Panel",id:"\ufe0f-seaorm-pro-professional-admin-panel",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("img",{alt:"SeaORM 1.0 Banner",src:"/blog/img/SeaORM%201.0%20Banner.png"}),"\n",(0,t.jsxs)(n.p,{children:["This blog post summarizes the new features and enhancements introduced in SeaORM ",(0,t.jsx)(n.code,{children:"1.1"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["2024-10-15 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.0",children:(0,t.jsx)(n.code,{children:"1.1.0"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2024-11-04 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.1",children:(0,t.jsx)(n.code,{children:"1.1.1"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2024-12-02 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.2",children:(0,t.jsx)(n.code,{children:"1.1.2"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2024-12-24 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.3",children:(0,t.jsx)(n.code,{children:"1.1.3"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2025-01-10 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.4",children:(0,t.jsx)(n.code,{children:"1.1.4"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2025-02-14 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.5",children:(0,t.jsx)(n.code,{children:"1.1.5"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2025-02-24 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.6",children:(0,t.jsx)(n.code,{children:"1.1.6"})})]}),"\n",(0,t.jsxs)(n.li,{children:["2025-03-02 ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/1.1.7",children:(0,t.jsx)(n.code,{children:"1.1.7"})})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"new-features",children:"New Features"}),"\n",(0,t.jsx)(n.h3,{id:"support-postgres-vector",children:"Support Postgres Vector"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2500",children:"#2500"}),"\nThe popular ",(0,t.jsx)(n.a,{href:"https://github.com/pgvector/pgvector",children:"pgvector"})," extension enables efficient storage and querying of high-dimensional vector data, supporting applications like similarity search, recommendation systems, and other AI tools."]}),"\n",(0,t.jsxs)(n.p,{children:["Thanks to the contribution of ",(0,t.jsx)(n.a,{href:"https://github.com/28Smiles",children:"@28Smiles"}),", ",(0,t.jsx)(n.code,{children:"PgVector"})," is now integrated nicely into the SeaQL ecosystem (under feature flag ",(0,t.jsx)(n.code,{children:"postgres-vector"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// Model\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "image_model")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub embedding: PgVector,\n}\n\n// Schema\nsea_query::Table::create()\n    .table(image_model::Entity.table_ref())\n    .col(ColumnDef::new(Column::Id).integer().not_null().auto_increment().primary_key())\n    .col(ColumnDef::new(Column::Embedding).vector(None).not_null())\n    ..\n\n// Insert\nActiveModel {\n    id: NotSet,\n    embedding: Set(PgVector::from(vec![1., 2., 3.])),\n}\n.insert(db)\n.await?\n'})}),"\n",(0,t.jsx)(n.h3,{id:"nested-objects-in-relational-queries",children:"Nested Objects in Relational Queries"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2508",children:"#2508"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2179",children:"#2179"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/1716",children:"#1716"})]}),"\n",(0,t.jsxs)(n.p,{children:["We now have a good answer to ",(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2022-05-14-faq-01/",children:"Why SeaORM does not nest objects for parent-child relation"}),"!"]}),"\n",(0,t.jsxs)(n.p,{children:["The latest improvements to the ",(0,t.jsx)(n.code,{children:"FromQueryResult"})," and ",(0,t.jsx)(n.code,{children:"DerivePartialModel"})," macros allows you to nest objects easily, simplifying the construction of complex queries."]}),"\n",(0,t.jsxs)(n.p,{children:["To illustrate, let's take a look at the ",(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM/docs/relation/bakery-schema/",children:"Bakery Schema"})," again."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://raw.githubusercontent.com/SeaQL/sea-orm/refs/heads/master/tests/common/bakery_chain/bakery_chain_erd.png",alt:"Bakery ERD"})}),"\n",(0,t.jsxs)(n.p,{children:["As a simple first example, we'd like to select ",(0,t.jsx)(n.code,{children:"Cake"})," with ",(0,t.jsx)(n.code,{children:"Bakery"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(FromQueryResult)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(FromQueryResult)]\nstruct Bakery {\n    #[sea_orm(from_alias = "bakery_id")]\n    id: i32,\n    #[sea_orm(from_alias = "bakery_name")]\n    brand: String,\n}\n\nlet cake: Cake = cake::Entity::find()\n    .select_only()\n    .column(cake::Column::Id)\n    .column(cake::Column::Name)\n    .column_as(bakery::Column::Id, "bakery_id")\n    .column_as(bakery::Column::Name, "bakery_name")\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_model()\n    .one(db)\n    .await?\n    .unwrap();\n\nassert_eq!(\n    cake,\n    Cake {\n        id: 1,\n        name: "Basque cheesecake".to_string(),\n        bakery: Some(Bakery {\n            id: 20,\n            brand: "Super Baker".to_string(),\n        })\n    }\n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Because the tables ",(0,t.jsx)(n.code,{children:"cake"})," and ",(0,t.jsx)(n.code,{children:"bakery"})," have some duplicate column names, we'd have to do custom selects. ",(0,t.jsx)(n.code,{children:"select_only"})," here clears the default select list, and we apply aliases with ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/query/trait.QuerySelect.html#method.column_as",children:(0,t.jsx)(n.code,{children:"column_as"})}),". Then, in ",(0,t.jsx)(n.code,{children:"FromQueryResult"})," we use ",(0,t.jsx)(n.code,{children:"from_alias"})," to map the query result back to the nested struct."]}),"\n",(0,t.jsxs)(n.p,{children:["You may wonder if there are ways to not do the alias and mapping? Yes! There's where ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html",children:(0,t.jsx)(n.code,{children:"DerivePartialModel"})})," comes into play. The previous example can be written as:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(DerivePartialModel)] // FromQueryResult is no longer needed\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = "bakery::Entity", from_query_result)]\nstruct Bakery {\n    id: i32,\n    #[sea_orm(from_col = "Name")]\n    brand: String,\n}\n\n// same as previous example, but without the custom selects\nlet cake: Cake = cake::Entity::find()\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_partial_model()\n    .one(db)\n    .await?\n    .unwrap();\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Under the hood, ",(0,t.jsx)(n.code,{children:"bakery_"})," prefix will be added to the column alias in the SQL query."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'SELECT\n    "cake"."id" AS "id",\n    "cake"."name" AS "name",\n    "bakery"."id" AS "bakery_id",\n    "bakery"."name" AS "bakery_brand"\nFROM "cake"\nLEFT JOIN "bakery" ON "cake"."bakery_id" = "bakery"."id"\nORDER BY "cake"."id" ASC LIMIT 1\n'})}),"\n",(0,t.jsx)(n.p,{children:"Now, let's look at one more advanced three-way join. Our join tree starts from Order:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"Order -> Customer\n      -> LineItem -> Cake\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "order::Entity", from_query_result)]\nstruct Order {\n    id: i32,\n    total: Decimal,\n    #[sea_orm(nested)]\n    customer: Customer,\n    #[sea_orm(nested)]\n    line: LineItem,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "customer::Entity", from_query_result)]\nstruct Customer {\n    name: String,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "lineitem::Entity", from_query_result)]\nstruct LineItem {\n    price: Decimal,\n    quantity: i32,\n    #[sea_orm(nested)]\n    cake: Cake,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct Cake {\n    name: String,\n}\n\nlet items: Vec<Order> = order::Entity::find()\n    .left_join(customer::Entity)\n    .left_join(lineitem::Entity)\n    .join(JoinType::LeftJoin, lineitem::Relation::Cake.def())\n    .order_by_asc(order::Column::Id)\n    .order_by_asc(lineitem::Column::Id)\n    .into_partial_model()\n    .all(db)\n    .await?;\n\nassert_eq!(\n    items,\n    [\n        Order {\n            id: 101,\n            total: Decimal::from(10),\n            customer: Customer {\n                name: "Bob".to_owned()\n            },\n            line: LineItem {\n                cake: Cake {\n                    name: "Cheesecake".to_owned()\n                },\n                price: Decimal::from(2),\n                quantity: 2,\n            }\n        },\n        ..\n    ]\n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["That's it! Hope you like these new features, and a huge thanks to ",(0,t.jsx)(n.a,{href:"https://github.com/Goodjooy",children:"@Goodjooy"})," for laying the foundation, ",(0,t.jsx)(n.a,{href:"https://github.com/jreppnow",children:"@jreppnow"})," for implementing the nested logic, and everyone who participated in the discussion."]}),"\n",(0,t.jsx)(n.h4,{id:"bonus-partialmodel---activemodel",children:"Bonus: PartialModel -> ActiveModel"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2517",children:"#2517"}),"\n",(0,t.jsx)(n.code,{children:"DerivePartialModel"})," got another extension to derive ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/entity/trait.IntoActiveModel.html",children:(0,t.jsx)(n.code,{children:"IntoActiveModel"})})," as well. Absent attributes will be filled with ",(0,t.jsx)(n.code,{children:"NotSet"}),". This allows you to have a cake and eat it!"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(DerivePartialModel)]\n#[sea_orm(entity = "cake::Entity", into_active_model)]\nstruct PartialCake {\n    id: i32,\n    name: String,\n}\n\nlet partial_cake = PartialCake {\n    id: 12,\n    name: "Lemon Drizzle".to_owned(),\n};\n\n// this is now possible:\nassert_eq!(\n    cake::ActiveModel {\n        ..partial_cake.into_active_model()\n    },\n    cake::ActiveModel {\n        id: Set(12),\n        name: Set("Lemon Drizzle".to_owned()),\n        ..Default::default()\n    }\n);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"three-way-select",children:"Three way select"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2518",children:"#2518"}),"\nWith PartialModel being so powerful, if you still need to do non-nested selects, there's ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/query/struct.SelectThree.html",children:(0,t.jsx)(n.code,{children:"SelectThree"})}),", an extension to ",(0,t.jsx)(n.code,{children:"SelectTwo"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"Order -> Lineitem -> Cake\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"let items: Vec<(order::Model, Option<lineitem::Model>, Option<cake::Model>)> =\n    order::Entity::find()\n        .find_also_related(lineitem::Entity)\n        .and_also_related(cake::Entity)\n        .order_by_asc(order::Column::Id)\n        .order_by_asc(lineitem::Column::Id)\n        .all(db)\n        .await?;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"insert-heterogeneous-models",children:"Insert heterogeneous models"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2433",children:"#2433"}),"\nInsert many now allows active models to have different column sets (it previously panics). Missing columns will be filled with ",(0,t.jsx)(n.code,{children:"NULL"}),". This makes seeding data (e.g. ",(0,t.jsx)(n.a,{href:"https://loco.rs/docs/the-app/models/#seeding",children:"with Loco"}),") a seamless operation."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'let apple = cake_filling::ActiveModel {\n    cake_id: ActiveValue::set(2),\n    filling_id: ActiveValue::NotSet,\n};\nlet orange = cake_filling::ActiveModel {\n    cake_id: ActiveValue::NotSet,\n    filling_id: ActiveValue::set(3),\n};\nassert_eq!(\n    Insert::<cake_filling::ActiveModel>::new()\n        .add_many([apple, orange])\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"INSERT INTO "cake_filling" ("cake_id", "filling_id") VALUES (2, NULL), (NULL, 3)"#,\n);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"improved-seaography-integration",children:"Improved Seaography Integration"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2403",children:"#2403"}),"\nWe've simplified the code by allowing you to register entities into Seaography's GraphQL schema directly within the entity module."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub mod prelude;\n\npub mod sea_orm_active_enums;\n\npub mod baker;\npub mod bakery;\npub mod cake;\npub mod cakes_bakers;\n\nseaography::register_entity_modules!([\n    baker,\n    bakery,\n    cake,\n    cakes_bakers,\n]);\n\nseaography::register_active_enums!([\n    sea_orm_active_enums::Tea,\n]);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"enhancements",children:"Enhancements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/query/struct.Insert.html#method.exec_with_returning_keys",children:(0,t.jsx)(n.code,{children:"Insert::exec_with_returning_keys"})})," & ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/query/struct.Insert.html#method.exec_with_returning_many",children:(0,t.jsx)(n.code,{children:"Insert::exec_with_returning_many"})})," (Postgres only)"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    Entity::insert_many([\n        ActiveModel { id: NotSet, name: Set("two".into()) },\n        ActiveModel { id: NotSet, name: Set("three".into()) },\n    ])\n    .exec_with_returning_many(db)\n    .await\n    .unwrap(),\n    [\n        Model { id: 2, name: "two".into() },\n        Model { id: 3, name: "three".into() },\n    ]\n);\n\nassert_eq!(\n    cakes_bakers::Entity::insert_many([\n        cakes_bakers::ActiveModel {\n            cake_id: Set(1),\n            baker_id: Set(2),\n        },\n        cakes_bakers::ActiveModel {\n            cake_id: Set(2),\n            baker_id: Set(1),\n        },\n    ])\n    .exec_with_returning_keys(db)\n    .await\n    .unwrap(),\n    [(1, 2), (2, 1)]\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"DeleteOne::exec_with_returning"})," & ",(0,t.jsx)(n.code,{children:"DeleteMany::exec_with_returning"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2432",children:"#2432"})]}),"\n",(0,t.jsxs)(n.li,{children:["Support complex type path in ",(0,t.jsx)(n.code,{children:"DeriveIntoActiveModel"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2517",children:"#2517"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(DeriveIntoActiveModel)]\n#[sea_orm(active_model = "<fruit::Entity as EntityTrait>::ActiveModel")]\nstruct Fruit {\n    cake_id: Option<Option<i32>>,\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"DatabaseConnection::close_by_ref"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2511",children:"#2511"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub async fn close(self) -> Result<(), DbErr> { .. } // existing\npub async fn close_by_ref(&self) -> Result<(), DbErr> { .. } // new\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Added ",(0,t.jsx)(n.code,{children:"Schema::json_schema_from_entity"})," to construct schema metadata for Entities"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    Schema::new(DbBackend::MySql).json_schema_from_entity(lunch_set::Entity),\n    json! {\n        "columns": [\n            {\n                "name": "id",\n                "nullable": false,\n                "type": "integer"\n            },\n            {\n                "name": "name",\n                "nullable": false,\n                "type": "string"\n            },\n            {\n                "name": "tea",\n                "nullable": false,\n                "type": {\n                    "name": "tea",\n                    "variants": [\n                        "EverydayTea",\n                        "BreakfastTea"\n                    ]\n                }\n            }\n        ],\n        "primary_key": [\n            "id"\n        ]\n    }\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Construct ",(0,t.jsx)(n.code,{children:"DatabaseConnection"})," directly from ",(0,t.jsx)(n.code,{children:"sqlx::PgPool"}),", ",(0,t.jsx)(n.code,{children:"sqlx::SqlitePool"})," and ",(0,t.jsx)(n.code,{children:"sqlx::MySqlPool"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2348",children:"#2348"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// these are implemented:\nimpl From<MySqlPool> for SqlxMySqlPoolConnection { .. }\nimpl From<MySqlPool> for DatabaseConnection { .. }\n\n// so this is now possible:\nlet db: DatabaseConnection = mysql_pool.into();\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Expose underlying row types (e.g. ",(0,t.jsx)(n.code,{children:"sqlx::postgres::PgRow"}),") ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2265",children:"#2265"})]}),"\n",(0,t.jsxs)(n.li,{children:["[sea-orm-migration] Allow modifying the connection in migrations ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2397",children:"#2397"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"#[async_std::main]\nasync fn main() {\n    cli::run_cli_with_connection(migration::Migrator, |connect_options| async {\n        let db = Database::connect(connect_options).await?;\n        if db.get_database_backend() == DatabaseBackend::Sqlite {\n            register_sqlite_functions(&db).await;\n        }\n        Ok(db)\n    }).await;\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[sea-orm-cli] Added ",(0,t.jsx)(n.code,{children:"MIGRATION_DIR"})," environment variable ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2419",children:"#2419"})]}),"\n",(0,t.jsxs)(n.li,{children:["[sea-orm-cli] Added ",(0,t.jsx)(n.code,{children:"acquire-timeout"})," option ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2461",children:"#2461"})]}),"\n",(0,t.jsxs)(n.li,{children:["[sea-orm-cli] Added ",(0,t.jsx)(n.code,{children:"impl-active-model-behavior"})," option ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2487",children:"#2487"})]}),"\n",(0,t.jsxs)(n.li,{children:["[sea-orm-cli] Added ",(0,t.jsx)(n.code,{children:"with-prelude"})," option ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2322",children:"#2322"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"all"}),": the default value (current behaviour), will generate prelude.rs and add it to mod.rs / lib.rs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"all-allow-unused-imports"}),": will generate prelude.rs and add it to mod.rs, plus adding ",(0,t.jsx)(n.code,{children:"#![allow(unused_imports)]"})," in the module"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"none"}),": ",(0,t.jsx)(n.strong,{children:"will not"})," generate prelude.rs"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"upgrades",children:"Upgrades"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"sqlx"})," to ",(0,t.jsx)(n.code,{children:"0.8"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2305",children:"#2305"}),"  ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2371",children:"#2371"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"bigdecimal"})," to ",(0,t.jsx)(n.code,{children:"0.4"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2305",children:"#2305"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"sea-query"})," to ",(0,t.jsx)(n.code,{children:"0.32.0"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2305",children:"#2305"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"sea-query-binder"})," to ",(0,t.jsx)(n.code,{children:"0.7"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2305",children:"#2305"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"sea-schema"})," to ",(0,t.jsx)(n.code,{children:"0.16"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2305",children:"#2305"})]}),"\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.code,{children:"ouroboros"})," to ",(0,t.jsx)(n.code,{children:"0.18"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2353",children:"#2353"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"house-keeping",children:"House Keeping"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Cleanup legacy ",(0,t.jsx)(n.code,{children:"ActiveValue::Set"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2515",children:"#2515"})]}),"\n",(0,t.jsxs)(n.li,{children:["Remove ",(0,t.jsx)(n.code,{children:"futures"})," crate, replace with ",(0,t.jsx)(n.code,{children:"futures-util"})," ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2466",children:"#2466"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"release-planning",children:"Release Planning"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/",children:"SeaORM 1.0"})," is a stable release. As demonstrated, we are able to ship many new features without breaking the API. The 1.x version will be updated until at least October 2025, and we'll decide whether to release a 2.0 version or extend the 1.x life cycle."]}),"\n",(0,t.jsx)(n.h2,{id:"sql-server-support",children:"SQL Server Support"}),"\n",(0,t.jsxs)(n.p,{children:["We've been beta-testing ",(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM-X/",children:"SQL Server for SeaORM"})," for a while. If you are building software for your company, please ",(0,t.jsx)(n.a,{href:"https://forms.office.com/r/1MuRPJmYBR",children:"request early access"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"sponsor",children:"Sponsor"}),"\n",(0,t.jsx)(n.p,{children:"If you feel generous, a small donation will be greatly appreciated, and goes a long way towards sustaining the organization."}),"\n",(0,t.jsxs)(n.p,{children:["A big shout out to our ",(0,t.jsx)(n.a,{href:"https://github.com/sponsors/SeaQL",children:"GitHub sponsors"})," \ud83d\ude07:"]}),"\n",(0,t.jsxs)("div",{class:"row",children:[(0,t.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--m",href:"https://github.com/numeusxyz",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/82152211?s=200&v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Numeus"})})})]})}),(0,t.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--m",href:"https://github.com/caido-community",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/168573261?s=200&v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Caido"})})})]})}),(0,t.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--m",href:"https://github.com/Coolpany-SE",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/96304487?s=200&v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Coolpany SE"})})})]})}),(0,t.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--m",href:"https://github.com/anshap1719",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/19164745?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Anshul Sanghi"})})})]})}),(0,t.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--m",href:"https://github.com/marcusbuffett",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1834328?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Marcus Buffett"})})})]})})]}),"\n",(0,t.jsx)("br",{}),"\n",(0,t.jsxs)("div",{class:"row",children:[(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/mjkoo",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/30420?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Maxwell Koo"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/spencewenski",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/3319370?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Spencer Ferris"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/deansheather",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/11241812?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Dean Sheather"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/siketyan",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/12772118?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Naoki Ikeguchi"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/data-intuitive",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/15045722?s=200&v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Data Intuitive"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/mmuellersoppart",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/16762461?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Marlon Mueller"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/yuly3",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/25814001?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"MasakiMiyazaki"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/manfredcml",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/27536502?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Manfred Lee"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/kallydev",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/36319157?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"KallyDev"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tugascript",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/64930104?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"Afonso Barracha"})})})]})}),(0,t.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,t.jsxs)("div",{class:"avatar",children:[(0,t.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/gnuphie",children:(0,t.jsx)("img",{src:"https://avatars.githubusercontent.com/u/50941?v=4"})}),(0,t.jsx)("div",{class:"avatar__intro",children:(0,t.jsx)("div",{class:"avatar__name",children:(0,t.jsx)(n.p,{children:"gnuphie"})})})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"wait-theres-one-more-thing",children:"Wait... there's one more thing"}),"\n",(0,t.jsxs)(n.p,{children:['"Are we web yet?" is a recurring question in the Rust community, the answer is ',(0,t.jsx)(n.em,{children:"yes"}),", yes, YES!"]}),"\n",(0,t.jsxs)(n.p,{children:["If you are looking for a batteries-included full-stack web development framework that is strongly-typed, asynchronous, robust and high-performance, look no further than ",(0,t.jsx)(n.strong,{children:"Rust + Loco + SeaQL"}),". We highly recommend giving ",(0,t.jsx)(n.a,{href:"https://loco.rs/",children:"Loco"}),' a try - "It\u2019s Like Ruby on Rails, but for Rust."']}),"\n",(0,t.jsx)(n.p,{children:"With this final piece of software, my vision for a complete full-stack Rust environment is now realized. After years of development in SeaORM + Seaography, I am excited to introduce it to you:"}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-seaorm-pro-professional-admin-panel",children:"\ud83d\udda5\ufe0f SeaORM Pro: Professional Admin Panel"}),"\n",(0,t.jsxs)("a",{href:"https://www.sea-ql.org/sea-orm-pro/",children:[(0,t.jsx)("img",{style:{borderRadius:"25px"},src:"https://www.sea-ql.org/sea-orm-pro/img/01_banner.png#light"}),(0,t.jsx)("img",{style:{borderRadius:"25px"},src:"https://www.sea-ql.org/sea-orm-pro/img/01_banner_dark.png#dark"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/sea-orm-pro/",children:"SeaORM Pro"})," is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!"]}),"\n",(0,t.jsx)(n.p,{children:"Features:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Full CRUD"}),"\n",(0,t.jsx)(n.li,{children:"Built on React + GraphQL"}),"\n",(0,t.jsx)(n.li,{children:"Built-in GraphQL resolver"}),"\n",(0,t.jsx)(n.li,{children:"Customize the UI with simple TOML"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Learn More"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm-pro",children:"Example Repo"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/",children:"Getting Started with Loco"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/",children:"Getting Started with Axum"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7630:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var s=a(2374);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);