"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[7110],{2113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var a=t(6269),r=t(4848),o=t(8453);const i={slug:"2024-07-01-graphql-support-with-loco-seaography",title:"Adding GraphQL Support to Loco with Seaography",author:"Billy Chan",author_title:"SeaQL Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png",tags:["news"]},s=void 0,l={authorsImageUrls:[void 0]},p=[{value:"What is Seaography",id:"what-is-seaography",level:2},{value:"Adding Dependency",id:"adding-dependency",level:2},{value:"Setting up SeaORM Entities for Seaography",id:"setting-up-seaorm-entities-for-seaography",level:2},{value:"Implementing GraphQL Query Root",id:"implementing-graphql-query-root",level:2},{value:"Writing Loco Controller to Handle GraphQL Endpoint",id:"writing-loco-controller-to-handle-graphql-endpoint",level:2},{value:"Opening GraphQL Playground",id:"opening-graphql-playground",level:2},{value:"Creating Notes",id:"creating-notes",level:2},{value:"Querying Notes",id:"querying-notes",level:2},{value:"Adding User Authentication to GraphQL Endpoint",id:"adding-user-authentication-to-graphql-endpoint",level:2},{value:"Adding Authentication header to GraphQL Playground",id:"adding-authentication-header-to-graphql-playground",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:"/blog/img/Loco%20x%20SeaORM.png"}),"\n",(0,r.jsxs)(n.p,{children:["In this tutorial, we would add a GraphQL endpoint with ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography",children:"Seaography"})," based on our Loco starter application. Read our first tutorial of the series, ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2024-05-28-getting-started-with-loco-seaorm/",children:"Getting Started with Loco & SeaORM"}),", if you haven't."]}),"\n",(0,r.jsxs)(n.p,{children:["The full source code can be found ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/loco_seaography",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"what-is-seaography",children:"What is Seaography"}),"\n",(0,r.jsx)(n.p,{children:"Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM entities. It ships with a CLI tool that can generate ready-to-compile Rust GraphQL servers from existing MySQL, Postgres and SQLite databases."}),"\n",(0,r.jsx)(n.h2,{id:"adding-dependency",children:"Adding Dependency"}),"\n",(0,r.jsxs)(n.p,{children:["Modify ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," and add a few more dependencies: ",(0,r.jsx)(n.code,{children:"seaography"}),", ",(0,r.jsx)(n.code,{children:"async-graphql"}),", ",(0,r.jsx)(n.code,{children:"async-graphql-axum"})," and ",(0,r.jsx)(n.code,{children:"lazy_static"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="loco_seaography/Cargo.toml"',children:'seaography = { version = "1.0.0-rc.4", features = ["with-decimal", "with-chrono"] }\nasync-graphql = { version = "7.0", features = ["decimal", "chrono", "dataloader", "dynamic-schema"] }\nasync-graphql-axum = { version = "7.0" }\nlazy_static = { version = "1.4" }\ntower-service = { version = "0.3" }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"setting-up-seaorm-entities-for-seaography",children:"Setting up SeaORM Entities for Seaography"}),"\n",(0,r.jsx)(n.p,{children:"Seaography Entities are basically SeaORM Entities with some additions. They are fully compatible with SeaORM."}),"\n",(0,r.jsxs)(n.p,{children:["You can generate Seaography Entities by using ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," with the extra ",(0,r.jsx)(n.code,{children:"--seaography"})," flag."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sea-orm-cli generate entity -o src/models/_entities -u postgres://loco:loco@localhost:5432/loco_seaography_development --seaography\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="loco_seaography/src/models/_entities/notes.rs"',children:'use sea_orm::entity::prelude::*;\nuse serde::{Serialize, Deserialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]\n#[sea_orm(table_name = "notes")]\npub struct Model {\n    pub created_at: DateTime,\n    pub updated_at: DateTime,\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub title: Option<String>,\n    pub content: Option<String>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::files::Entity")]\n    Files,\n}\n\nimpl Related<super::files::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Files.def()\n    }\n}\n\n+ // Defining `RelatedEntity` to relate one entity with another\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {\n+     #[sea_orm(entity = "super::files::Entity")]\n+     Files,\n+ }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["We can see that a new enum ",(0,r.jsx)(n.code,{children:"RelatedEntity"})," is generated in the Entity files. This helps Seaography to locate the related Entities for making relational queries."]}),"\n",(0,r.jsx)(n.h2,{id:"implementing-graphql-query-root",children:"Implementing GraphQL Query Root"}),"\n",(0,r.jsx)(n.p,{children:"We have finished setting up SeaORM entity for Seaography. Now, we implement the query root of Seaography where we bridge SeaORM and Async GraphQL with the help of Seaography."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="loco_seaography/src/graphql/query_root.rs"',children:"use async_graphql::dynamic::*;\nuse sea_orm::DatabaseConnection;\nuse seaography::{Builder, BuilderContext};\n\nuse crate::models::_entities::*;\n\nlazy_static::lazy_static! { static ref CONTEXT: BuilderContext = BuilderContext::default(); }\n\npub fn schema(\n    database: DatabaseConnection,\n    depth: usize,\n    complexity: usize,\n) -> Result<Schema, SchemaError> {\n    // Builder of Seaography query root\n    let mut builder = Builder::new(&CONTEXT, database.clone());\n    // Register SeaORM entities\n    seaography::register_entities!(\n        builder,\n        // List all models we want to include in the GraphQL endpoint here\n        [files, notes, users]\n    );\n    // Configure async GraphQL limits\n    let schema = builder\n        .schema_builder()\n        // The depth is the number of nesting levels of the field\n        .limit_depth(depth)\n        // The complexity is the number of fields in the query\n        .limit_complexity(complexity);\n    // Finish up with including SeaORM database connection\n    schema.data(database).finish()\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"writing-loco-controller-to-handle-graphql-endpoint",children:"Writing Loco Controller to Handle GraphQL Endpoint"}),"\n",(0,r.jsxs)(n.p,{children:["For convenience we use the built-in GraphQL playground UI in ",(0,r.jsx)(n.code,{children:"async-graphql"})," to test the GraphQL endpoint. And handle the GraphQL request with ",(0,r.jsx)(n.code,{children:"async_graphql_axum"})," and Seaography."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="loco_seaography/src/controllers/graphql.rs"',children:'use async_graphql::http::{playground_source, GraphQLPlaygroundConfig};\nuse axum::{body::Body, extract::Request};\nuse loco_rs::prelude::*;\nuse tower_service::Service;\n\nuse crate::graphql::query_root;\n\n// GraphQL playground UI\nasync fn graphql_playground() -> Result<Response> {\n    // The `GraphQLPlaygroundConfig` take one parameter\n    // which is the URL of the GraphQL handler: `/api/graphql`\n    let res = playground_source(GraphQLPlaygroundConfig::new("/api/graphql"));\n\n    Ok(Response::new(res.into()))\n}\n\nasync fn graphql_handler(\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    const DEPTH: usize = 10;\n    const COMPLEXITY: usize = 100;\n    // Construct the the GraphQL query root\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    // Execute GraphQL request and fetch the results\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n\npub fn routes() -> Routes {\n    // Define route\n    Routes::new()\n        // We put all GraphQL route behind `graphql` prefix\n        .prefix("graphql")\n        // GraphQL playground page is a GET request\n        .add("/", get(graphql_playground))\n        // GraphQL handler is a POST request\n        .add("/", post(graphql_handler))\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"opening-graphql-playground",children:"Opening GraphQL Playground"}),"\n",(0,r.jsxs)(n.p,{children:["Compile and run the Loco application, then visit ",(0,r.jsx)(n.a,{href:"http://localhost:3000/api/graphql",children:"http://localhost:3000/api/graphql"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'$ cargo run start\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.60s\n     Running `target/debug/loco_seaography-cli start`\n2024-06-24T08:04:52.173924Z  INFO app: loco_rs::config: loading environment from selected_path="config/development.yaml" environment=development\n2024-06-24T08:04:52.180447Z  WARN app: loco_rs::boot: pretty backtraces are enabled (this is great for development but has a runtime cost for production. disable with `logger.pretty_backtrace` in your config yaml) environment=development\n2024-06-24T08:04:52.272392Z  INFO app: loco_rs::db: auto migrating environment=development\n2024-06-24T08:04:52.275198Z  INFO app: sea_orm_migration::migrator: Applying all pending migrations environment=development\n2024-06-24T08:04:52.280720Z  INFO app: sea_orm_migration::migrator: No pending migrations environment=development\n2024-06-24T08:04:52.281280Z  INFO app: loco_rs::boot: initializers loaded initializers="" environment=development\n2024-06-24T08:04:52.308827Z  INFO app: loco_rs::controller::app_routes: [GET] /api/_ping environment=development\n2024-06-24T08:04:52.308936Z  INFO app: loco_rs::controller::app_routes: [GET] /api/_health environment=development\n2024-06-24T08:04:52.309021Z  INFO app: loco_rs::controller::app_routes: [GET] /api/notes environment=development\n2024-06-24T08:04:52.309088Z  INFO app: loco_rs::controller::app_routes: [POST] /api/notes environment=development\n2024-06-24T08:04:52.309158Z  INFO app: loco_rs::controller::app_routes: [GET] /api/notes/:id environment=development\n2024-06-24T08:04:52.309234Z  INFO app: loco_rs::controller::app_routes: [DELETE] /api/notes/:id environment=development\n2024-06-24T08:04:52.309286Z  INFO app: loco_rs::controller::app_routes: [POST] /api/notes/:id environment=development\n2024-06-24T08:04:52.309334Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/register environment=development\n2024-06-24T08:04:52.309401Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/verify environment=development\n2024-06-24T08:04:52.309471Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/login environment=development\n2024-06-24T08:04:52.309572Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/forgot environment=development\n2024-06-24T08:04:52.309662Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/reset environment=development\n2024-06-24T08:04:52.309752Z  INFO app: loco_rs::controller::app_routes: [GET] /api/user/current environment=development\n2024-06-24T08:04:52.309827Z  INFO app: loco_rs::controller::app_routes: [POST] /api/files/upload/:notes_id environment=development\n2024-06-24T08:04:52.309910Z  INFO app: loco_rs::controller::app_routes: [GET] /api/files/list/:notes_id environment=development\n2024-06-24T08:04:52.309997Z  INFO app: loco_rs::controller::app_routes: [GET] /api/files/view/:files_id environment=development\n2024-06-24T08:04:52.310088Z  INFO app: loco_rs::controller::app_routes: [GET] /api/graphql environment=development\n2024-06-24T08:04:52.310172Z  INFO app: loco_rs::controller::app_routes: [POST] /api/graphql environment=development\n2024-06-24T08:04:52.310469Z  INFO app: loco_rs::controller::app_routes: [Middleware] Adding limit payload data="5mb" environment=development\n2024-06-24T08:04:52.310615Z  INFO app: loco_rs::controller::app_routes: [Middleware] Adding log trace id environment=development\n2024-06-24T08:04:52.310934Z  INFO app: loco_rs::controller::app_routes: [Middleware] Adding cors environment=development\n2024-06-24T08:04:52.311008Z  INFO app: loco_rs::controller::app_routes: [Middleware] Adding etag layer environment=development\n\n                      \u2584     \u2580\n                                 \u2580  \u2584\n                  \u2584       \u2580     \u2584  \u2584 \u2584\u2580\n                                    \u2584 \u2580\u2584\u2584\n                        \u2584     \u2580    \u2580  \u2580\u2584\u2580\u2588\u2584\n                                          \u2580\u2588\u2584\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584   \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2580\u2580\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2580\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2580\u2580\u2580 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2584\u2588\u2584\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2584\u2584\u2584 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588  \u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\n   \u2580\u2580\u2580\u2588\u2588\u2584 \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580  \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580  \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2580\n       \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\ncompilation: debug\n      modes: server\n\nlistening on [::]:3000\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-notes",children:"Creating Notes"}),"\n",(0,r.jsx)(n.p,{children:"Create a new notes with the GraphQL mutator."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  notesCreateOne(\n    data: {\n      id: 1\n      title: "Notes 001"\n      content: "Content 001"\n      createdAt: "2024-06-24 00:00:00"\n      updatedAt: "2024-06-24 00:00:00"\n    }\n  ) {\n    id\n    title\n    content\n    createdAt\n    updatedAt\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20create.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"querying-notes",children:"Querying Notes"}),"\n",(0,r.jsx)(n.p,{children:"Query notes with its related files."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"query {\n  notes {\n    nodes {\n      id\n      title\n      content\n      files {\n        nodes {\n          id\n          filePath\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20query.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"adding-user-authentication-to-graphql-endpoint",children:"Adding User Authentication to GraphQL Endpoint"}),"\n",(0,r.jsx)(n.p,{children:"Our GraphQL handler can be accessed without user authentication. Next, we want to only allow logged in user to access the GraphQL handler."}),"\n",(0,r.jsxs)(n.p,{children:["To do so, we add ",(0,r.jsx)(n.code,{children:"_auth: auth::JWT"})," to the ",(0,r.jsx)(n.code,{children:"graphql_handler"})," function."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-diff",metastring:'title="loco_seaography/src/controllers/graphql.rs"',children:"async fn graphql_handler(\n+   _auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    const DEPTH: usize = 10;\n    const COMPLEXITY: usize = 100;\n    // Construct the the GraphQL query root\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    // Execute GraphQL request and fetch the results\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, run the Loco application and visit the GraphQL playground again. You should see unauthorize error."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20unauthorize.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"adding-authentication-header-to-graphql-playground",children:"Adding Authentication header to GraphQL Playground"}),"\n",(0,r.jsx)(n.p,{children:"First, we generate a valid authorization token by logging in the user account with the corresponding email and password:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:'$ curl --location \'http://localhost:3000/api/auth/login\' \\\n--data-raw \'{\n    "email": "cwchan.billy@gmail.com",\n    "password": "password"\n}\'\n\n{\n    "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJwaWQiOiIwN2NjMDk5Ni03YWYxLTQ5YmYtYmY2NC01OTg4ZjFhODM2OTkiLCJleHAiOjE3MTk4MjIzMzN9.CgKp_aE-DyAuBJIvFGJ6l68ooAlEiJGhjWeaetDtHrupaYDm0ldVxf24vj3fPgkCqZ_njv2129n2pSCzHOjaow",\n    "pid": "07cc0996-7af1-49bf-bf64-5988f1a83699",\n    "name": "Billy",\n    "is_verified": true\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Go to the setting page of GraphQL playground. And add a new header under ",(0,r.jsx)(n.code,{children:"request. globalHeaders"}),":"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20authorization.png",alt:""})}),"\n",(0,r.jsx)(n.p,{children:"Then, we can access GraphQL handler as usual."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20query.png",alt:""})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Adding GraphQL support to Loco application is easy with the help of Seaography. It is an ergonomic library that turns SeaORM entities into GraphQL nodes and provides a set of utilities and combined with a code generator makes GraphQL API building a breeze."}),"\n",(0,r.jsx)(n.h2,{id:"sql-server-support",children:"SQL Server Support"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM-X/",children:"SQL Server for SeaORM"})," is now available as a closed beta. If you are interested`, please signup ",(0,r.jsx)(n.a,{href:"https://forms.office.com/r/1MuRPJmYBR",children:"here"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Migrating from ",(0,r.jsx)(n.code,{children:"sea-orm"})," to ",(0,r.jsx)(n.code,{children:"sea-orm-x"})," is straightforward with two simple steps. First, update the existing ",(0,r.jsx)(n.code,{children:"sea-orm"})," dependency to ",(0,r.jsx)(n.code,{children:"sea-orm-x"})," and enable the ",(0,r.jsx)(n.code,{children:"sqlz-mssql"})," feature. Note that you might need to patch SeaORM dependency for the upstream dependencies."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'sea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x", features = ["runtime-async-std-rustls", "sqlz-mssql"] }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n\n# Patch SeaORM dependency for the upstream dependencies\n[patch.crates-io]\nsea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x" }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n'})}),"\n",(0,r.jsx)(n.p,{children:"Second, update the connection string to connect to the MSSQL database."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"# If the schema is `dbo`, simply write:\nmssql://username:password@host/database\n\n# Or, specify the schema name by providing an extra `currentSchema` query param.\nmssql://username:password@host/database?currentSchema=my_schema\n\n# You can trust peer certificate by providing an extra trustCertificate query param.\nmssql://username:password@host/database?trustCertificate=true\n"})}),"\n",(0,r.jsx)(n.p,{children:"SeaORM X has full Loco support and integrate seamlessly with many web frameworks:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Actix"}),"\n",(0,r.jsx)(n.li,{children:"Axum"}),"\n",(0,r.jsx)(n.li,{children:"Async GraphQL"}),"\n",(0,r.jsx)(n.li,{children:"jsonrpsee"}),"\n",(0,r.jsx)(n.li,{children:"Loco"}),"\n",(0,r.jsx)(n.li,{children:"Poem"}),"\n",(0,r.jsx)(n.li,{children:"Salvo"}),"\n",(0,r.jsx)(n.li,{children:"Tonic"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Happy Coding!"})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},6269:e=>{e.exports=JSON.parse('{"permalink":"/blog/2024-07-01-graphql-support-with-loco-seaography","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-07-01-graphql-support-with-loco-seaography.md","source":"@site/blog/2024-07-01-graphql-support-with-loco-seaography.md","title":"Adding GraphQL Support to Loco with Seaography","description":"In this tutorial, we would add a GraphQL endpoint with Seaography based on our Loco starter application. Read our first tutorial of the series, Getting Started with Loco & SeaORM, if you haven\'t.","date":"2024-07-01T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":8.8,"hasTruncateMarker":false,"authors":[{"name":"Billy Chan","title":"SeaQL Team","url":"https://github.com/billy1624","imageURL":"https://avatars.githubusercontent.com/u/30400950?v=4","key":null,"page":null}],"frontMatter":{"slug":"2024-07-01-graphql-support-with-loco-seaography","title":"Adding GraphQL Support to Loco with Seaography","author":"Billy Chan","author_title":"SeaQL Team","author_url":"https://github.com/billy1624","author_image_url":"https://avatars.githubusercontent.com/u/30400950?v=4","image":"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Announcing SeaORM 1.0 \ud83d\udc1a","permalink":"/blog/2024-08-04-sea-orm-1.0"},"nextItem":{"title":"Getting Started with Loco & SeaORM","permalink":"/blog/2024-05-28-getting-started-with-loco-seaorm"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(6540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);