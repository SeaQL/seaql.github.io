"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[3521],{4265:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});var n=a(6468),i=a(8790),r=a(7630);const s={slug:"2021-10-15-whats-new-in-0.3.0",title:"What's new in SeaORM 0.3.0",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Transaction",id:"transaction",level:2},{value:"Streaming",id:"streaming",level:2},{value:"API for custom logic on save &amp; delete",id:"api-for-custom-logic-on-save--delete",level:2},{value:"Generate Entity Models That Derive Serialize / Deserialize",id:"generate-entity-models-that-derive-serialize--deserialize",level:2},{value:"Introduce <code>DeriveIntoActiveModel</code> macro &amp; <code>IntoActiveValue</code> Trait",id:"introduce-deriveintoactivemodel-macro--intoactivevalue-trait",level:2},{value:"Community",id:"community",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["\ud83c\udf89 We are pleased to release SeaORM ",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/0.3.0",children:(0,i.jsx)(t.code,{children:"0.3.0"})})," today! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,i.jsx)(t.h2,{id:"transaction",children:"Transaction"}),"\n",(0,i.jsxs)(t.p,{children:["[",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/pull/222",children:"#222"}),"] Use database transaction to perform atomic operations"]}),"\n",(0,i.jsx)(t.p,{children:"Two transaction APIs are provided:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"closure"})," style. Will be committed on Ok and rollback on Err."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'// <Fn, A, B> -> Result<A, B>\ndb.transaction::<_, _, DbErr>(|txn| {\n    Box::pin(async move {\n        bakery::ActiveModel {\n            name: Set("SeaSide Bakery".to_owned()),\n            ..Default::default()\n        }\n        .save(txn)\n        .await?;\n\n        bakery::ActiveModel {\n            name: Set("Top Bakery".to_owned()),\n            ..Default::default()\n        }\n        .save(txn)\n        .await?;\n\n        Ok(())\n    })\n})\n.await;\n'})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["RAII style. ",(0,i.jsx)(t.code,{children:"begin"})," the transaction followed by ",(0,i.jsx)(t.code,{children:"commit"})," or ",(0,i.jsx)(t.code,{children:"rollback"}),". If ",(0,i.jsx)(t.code,{children:"txn"})," goes out of scope, it'd automatically rollback."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"let txn = db.begin().await?;\n\n// do something with txn\n\ntxn.commit().await?;\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Contributed by:"}),"\n",(0,i.jsxs)("div",{class:"row",children:[(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/nappa85",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/7566389?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Marco Napetti"})})})]})}),(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tyt2y3",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1782664?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Chris Tsang"})})})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"streaming",children:"Streaming"}),"\n",(0,i.jsxs)(t.p,{children:["[",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/pull/222",children:"#222"}),"] Use async stream on any ",(0,i.jsx)(t.code,{children:"Select"})," for memory efficiency."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"let mut stream = Fruit::find().stream(&db).await?;\n\nwhile let Some(item) = stream.try_next().await? {\n    let item: fruit::ActiveModel = item.into();\n    // do something with item\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Contributed by:"}),"\n",(0,i.jsx)("div",{class:"row",children:(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/nappa85",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/7566389?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Marco Napetti"})})})]})})}),"\n",(0,i.jsx)(t.h2,{id:"api-for-custom-logic-on-save--delete",children:"API for custom logic on save & delete"}),"\n",(0,i.jsxs)(t.p,{children:["[",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/pull/210",children:"#210"}),"] We redefined the trait methods of ",(0,i.jsx)(t.code,{children:"ActiveModelBehavior"}),". You can now perform custom validation before and after ",(0,i.jsx)(t.code,{children:"insert"}),", ",(0,i.jsx)(t.code,{children:"update"}),", ",(0,i.jsx)(t.code,{children:"save"}),", ",(0,i.jsx)(t.code,{children:"delete"})," actions. You can abort an action even after it is done, if you are inside a transaction."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'impl ActiveModelBehavior for ActiveModel {\n    // Override default values\n    fn new() -> Self {\n        Self {\n            serial: Set(Uuid::new_v4()),\n            ..ActiveModelTrait::default()\n        }\n    }\n\n    // Triggered before insert / update\n    fn before_save(self, insert: bool) -> Result<Self, DbErr> {\n        if self.price.as_ref() <= &0.0 {\n            Err(DbErr::Custom(format!(\n                "[before_save] Invalid Price, insert: {}",\n                insert\n            )))\n        } else {\n            Ok(self)\n        }\n    }\n\n    // Triggered after insert / update\n    fn after_save(self, insert: bool) -> Result<Self, DbErr> {\n        Ok(self)\n    }\n\n    // Triggered before delete\n    fn before_delete(self) -> Result<Self, DbErr> {\n        Ok(self)\n    }\n\n    // Triggered after delete\n    fn after_delete(self) -> Result<Self, DbErr> {\n        Ok(self)\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Contributed by:"}),"\n",(0,i.jsxs)("div",{class:"row",children:[(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/MuhannadAlrusayni",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/14802524?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Muhannad"})})})]})}),(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/billy1624",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/30400950?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Billy Chan"})})})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"generate-entity-models-that-derive-serialize--deserialize",children:"Generate Entity Models That Derive Serialize / Deserialize"}),"\n",(0,i.jsxs)(t.p,{children:["[",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/pull/237",children:"#237"}),"] You can use ",(0,i.jsx)(t.code,{children:"sea-orm-cli"})," to generate entity models that also derive serde ",(0,i.jsx)(t.code,{children:"Serialize"})," / ",(0,i.jsx)(t.code,{children:"Deserialize"})," traits."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'//! SeaORM Entity. Generated by sea-orm-codegen 0.3.0\n\nuse sea_orm::entity::prelude:: * ;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(column_type = "Text", nullable)]\n    pub name: Option<String> ,\n}\n\n// ...\n'})}),"\n",(0,i.jsx)(t.p,{children:"Contributed by:"}),"\n",(0,i.jsx)("div",{class:"row",children:(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/elbart",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/48974?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Tim Eggert"})})})]})})}),"\n",(0,i.jsxs)(t.h2,{id:"introduce-deriveintoactivemodel-macro--intoactivevalue-trait",children:["Introduce ",(0,i.jsx)(t.code,{children:"DeriveIntoActiveModel"})," macro & ",(0,i.jsx)(t.code,{children:"IntoActiveValue"})," Trait"]}),"\n",(0,i.jsxs)(t.p,{children:["[",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/pull/240",children:"#240"}),"] introduced a new derive macro ",(0,i.jsx)(t.code,{children:"DeriveIntoActiveModel"})," for implementing ",(0,i.jsx)(t.code,{children:"IntoActiveModel"})," on structs. This is useful when creating your own struct with only partial fields of a model, for example as a form submission in a REST API."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"IntoActiveValue"})," trait allows converting ",(0,i.jsx)(t.code,{children:"Option<T>"})," into ",(0,i.jsx)(t.code,{children:"ActiveValue<T>"})," with the method ",(0,i.jsx)(t.code,{children:"into_active_value"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'// Define regular model as usual\n#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]\n#[sea_orm(table_name = "users")]\npub struct Model {\n    pub id: Uuid,\n    pub created_at: DateTimeWithTimeZone,\n    pub updated_at: DateTimeWithTimeZone,\n    pub email: String,\n    pub password: String,\n    pub full_name: Option<String>,\n    pub phone: Option<String>,\n}\n\n// Create a new struct with some fields omitted\n#[derive(DeriveIntoActiveModel)]\npub struct NewUser {\n    // id, created_at and updated_at are omitted from this struct,\n    // and will always be `ActiveValue::unset`\n    pub email: String,\n    pub password: String,\n    // Full name is usually optional, but it can be required here\n    pub full_name: String,\n    // Option implements `IntoActiveValue`, and when `None` will be `unset`\n    pub phone: Option<String>,\n}\n\n#[derive(DeriveIntoActiveModel)]\npub struct UpdateUser {\n    // Option<Option<T>> allows for Some(None) to update the column to be NULL\n    pub phone: Option<Option<String>>,\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Contributed by:"}),"\n",(0,i.jsx)("div",{class:"row",children:(0,i.jsx)("div",{class:"col col--3 margin-bottom--md",children:(0,i.jsxs)("div",{class:"avatar",children:[(0,i.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/Acidic9",children:(0,i.jsx)("img",{src:"https://avatars.githubusercontent.com/u/16362377?v=4"})}),(0,i.jsx)("div",{class:"avatar__intro",children:(0,i.jsx)("div",{class:"avatar__name",children:(0,i.jsx)(t.p,{children:"Ari Seyhun"})})})]})})}),"\n",(0,i.jsx)(t.h2,{id:"community",children:"Community"}),"\n",(0,i.jsx)(t.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and together build for Rust's future."}),"\n",(0,i.jsxs)(t.p,{children:["Here is the roadmap for SeaORM ",(0,i.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/milestone/4",children:(0,i.jsx)(t.code,{children:"0.4.x"})}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6468:e=>{e.exports=JSON.parse('{"permalink":"/blog/2021-10-15-whats-new-in-0.3.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2021-10-15-whats-new-in-0.3.0.md","source":"@site/blog/2021-10-15-whats-new-in-0.3.0.md","title":"What\'s new in SeaORM 0.3.0","description":"\ud83c\udf89 We are pleased to release SeaORM 0.3.0 today! Here are some feature highlights \ud83c\udf1f:","date":"2021-10-15T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":3.855,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Chris Tsang","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2021-10-15-whats-new-in-0.3.0","title":"What\'s new in SeaORM 0.3.0","author":"SeaQL Team","author_title":"Chris Tsang","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"What\'s new in SeaORM 0.4.0","permalink":"/blog/2021-11-19-whats-new-in-0.4.0"},"nextItem":{"title":"What\'s new in SeaORM 0.2.4","permalink":"/blog/2021-10-01-whats-new-in-0.2.4"}}')},7630:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>l});var n=a(2374);const i={},r=n.createContext(i);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);