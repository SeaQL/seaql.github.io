"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[8686],{442:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var r=s(611),t=s(4848),i=s(8453);const l={slug:"2022-12-30-whats-new-in-seaquery-0.28.0",title:"What's new in SeaQuery 0.28.0",author:"SeaQL Team",author_title:"Ivan Krivosheev",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},a=void 0,c={authorsImageUrls:[void 0]},d=[{value:"New <code>IdenStatic</code> trait for static identifier",id:"new-idenstatic-trait-for-static-identifier",level:2},{value:"New <code>PgExpr</code> and <code>SqliteExpr</code> traits for backend specific expressions",id:"new-pgexpr-and-sqliteexpr-traits-for-backend-specific-expressions",level:2},{value:"Bug Fixes",id:"bug-fixes",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"API Additions",id:"api-additions",level:2},{value:"Miscellaneous Enhancements",id:"miscellaneous-enhancements",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Community",id:"community",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["\ud83c\udf89 We are pleased to release SeaQuery ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.28.0",children:(0,t.jsx)(n.code,{children:"0.28.0"})}),"! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,t.jsxs)(n.h2,{id:"new-idenstatic-trait-for-static-identifier",children:["New ",(0,t.jsx)(n.code,{children:"IdenStatic"})," trait for static identifier"]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/508",children:"#508"}),"] Representing a identifier with ",(0,t.jsx)(n.code,{children:"&'static str"}),". The ",(0,t.jsx)(n.code,{children:"IdenStatic"})," trait looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub trait IdenStatic: Iden + Copy + 'static {\n    fn as_str(&self) -> &'static str;\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can derive it easily for your existing ",(0,t.jsx)(n.code,{children:"Iden"}),". Just changing the ",(0,t.jsx)(n.code,{children:"#[derive(Iden)]"})," into ",(0,t.jsx)(n.code,{children:"#[derive(IdenStatic)]"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'#[derive(IdenStatic)]\nenum User {\n    Table,\n    Id,\n    FirstName,\n    LastName,\n    #[iden = "_email"]\n    Email,\n}\n\nassert_eq!(User::Email.as_str(), "_email");\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"new-pgexpr-and-sqliteexpr-traits-for-backend-specific-expressions",children:["New ",(0,t.jsx)(n.code,{children:"PgExpr"})," and ",(0,t.jsx)(n.code,{children:"SqliteExpr"})," traits for backend specific expressions"]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/519",children:"#519"}),"] Postgres specific and SQLite specific expressions are being moved into its corresponding trait. You need to import the trait into scope before construct the expression with those backend specific methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// Importing `PgExpr` trait before constructing Postgres expression\nuse sea_query::{extension::postgres::PgExpr, tests_cfg::*, *};\n\nlet query = Query::select()\n    .columns([Font::Name, Font::Variant, Font::Language])\n    .from(Font::Table)\n    .and_where(Expr::val("a").concatenate("b").concat("c").concat("d"))\n    .to_owned();\n\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT "name", "variant", "language" FROM "font" WHERE \'a\' || \'b\' || \'c\' || \'d\'"#\n);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// Importing `SqliteExpr` trait before constructing SQLite expression\n use sea_query::{extension::sqlite::SqliteExpr, tests_cfg::*, *};\n\n let query = Query::select()\n    .column(Font::Name)\n    .from(Font::Table)\n    .and_where(Expr::col(Font::Name).matches("a"))\n    .to_owned();\n\n assert_eq!(\n    query.to_string(SqliteQueryBuilder),\n    r#"SELECT "name" FROM "font" WHERE "name" MATCH \'a\'"#\n );\n'})}),"\n",(0,t.jsx)(n.h2,{id:"bug-fixes",children:"Bug Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Wrap unions into parenthesis ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/498",children:"https://github.com/SeaQL/sea-query/pull/498"})]}),"\n",(0,t.jsxs)(n.li,{children:["Syntax error on empty condition ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/505",children:"https://github.com/SeaQL/sea-query/pull/505"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// given\nlet (statement, values) = sea_query::Query::select()\n    .column(Glyph::Id)\n    .from(Glyph::Table)\n    .cond_where(Cond::any()\n        .add(Cond::all()) // empty all() => TRUE\n        .add(Cond::any()) // empty any() => FALSE\n    )\n    .build(sea_query::MysqlQueryBuilder);\n\n// old behavior\nassert_eq!(statement, r#"SELECT `id` FROM `glyph`"#);\n\n// new behavior\nassert_eq!(\n    statement,\n    r#"SELECT `id` FROM `glyph` WHERE (TRUE) OR (FALSE)"#\n);\n\n// a complex example\nlet (statement, values) = Query::select()\n    .column(Glyph::Id)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::all()\n            .add(Cond::all().not())\n            .add(Cond::any().not())\n            .not(),\n    )\n    .build(MysqlQueryBuilder);\n\nassert_eq!(\n    statement,\n    r#"SELECT `id` FROM `glyph` WHERE NOT ((NOT TRUE) AND (NOT FALSE))"#\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/535",children:"#535"}),"] MSRV is up to 1.62"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"# Make sure you're running SeaQuery with Rust 1.62+ \ud83e\udd80\n$ rustup update\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/492",children:"#492"}),"] ",(0,t.jsx)(n.code,{children:"ColumnType::Array"})," definition changed from ",(0,t.jsx)(n.code,{children:"Array(SeaRc<Box<ColumnType>>)"})," to ",(0,t.jsx)(n.code,{children:"Array(SeaRc<ColumnType>)"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] ",(0,t.jsx)(n.code,{children:"Func::*"})," now returns ",(0,t.jsx)(n.code,{children:"FunctionCall"})," instead of ",(0,t.jsx)(n.code,{children:"SimpleExpr"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] ",(0,t.jsx)(n.code,{children:"Func::coalesce"})," now accepts ",(0,t.jsx)(n.code,{children:"IntoIterator<Item = SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"IntoIterator<Item = Into<SimpleExpr>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] Removed ",(0,t.jsx)(n.code,{children:"Expr::arg"})," and ",(0,t.jsx)(n.code,{children:"Expr::args"})," - these functions are no longer needed"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/507",children:"#507"}),"] Moved all Postgres specific operators to ",(0,t.jsx)(n.code,{children:"PgBinOper"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/476",children:"#476"}),"] ",(0,t.jsx)(n.code,{children:"Expr"})," methods used to accepts ",(0,t.jsx)(n.code,{children:"Into<Value>"})," now accepts ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/476",children:"#476"}),"] ",(0,t.jsx)(n.code,{children:"Expr::is_in"}),", ",(0,t.jsx)(n.code,{children:"Expr::is_not_in"})," now accepts ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"Into<Value>"})," and convert it to ",(0,t.jsx)(n.code,{children:"SimpleExpr::Tuple"})," instead of ",(0,t.jsx)(n.code,{children:"SimpleExpr::Values"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] ",(0,t.jsx)(n.code,{children:"Expr::expr"})," now accepts ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"SimpleExpr"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/519",children:"#519"}),"] Moved Postgres specific ",(0,t.jsx)(n.code,{children:"Expr"})," methods to new trait ",(0,t.jsx)(n.code,{children:"PgExpr"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/528",children:"#528"}),"] ",(0,t.jsx)(n.code,{children:"Expr::equals"})," now accepts ",(0,t.jsx)(n.code,{children:"C: IntoColumnRef"})," instead of ",(0,t.jsx)(n.code,{children:"T: IntoIden, C: IntoIden"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-diff",children:'use sea_query::{*, tests_cfg::*};\n\nlet query = Query::select()\n    .columns([Char::Character, Char::SizeW, Char::SizeH])\n    .from(Char::Table)\n    .and_where(\n        Expr::col((Char::Table, Char::FontId))\n-           .equals(Font::Table, Font::Id)\n+           .equals((Font::Table, Font::Id))\n    )\n    .to_owned();\n\nassert_eq!(\n    query.to_string(MysqlQueryBuilder),\n    r#"SELECT `character`, `size_w`, `size_h` FROM `character` WHERE `character`.`font_id` = `font`.`id`"#\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/525",children:"#525"}),"] Removed integer and date time column types' display length / precision option"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"api-additions",children:"API Additions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] Added ",(0,t.jsx)(n.code,{children:"SelectStatement::from_function"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_query::{tests_cfg::*, *};\n\nlet query = Query::select()\n    .column(ColumnRef::Asterisk)\n    .from_function(Func::random(), Alias::new("func"))\n    .to_owned();\n\nassert_eq!(\n    query.to_string(MysqlQueryBuilder),\n    r#"SELECT * FROM RAND() AS `func`"#\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/486",children:"#486"}),"] Added binary operators from the Postgres ",(0,t.jsx)(n.code,{children:"pg_trgm"})," extension"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_query::extension::postgres::PgBinOper;\n\nassert_eq!(\n    Query::select()\n        .expr(Expr::col(Font::Name).binary(PgBinOper::WordSimilarity, Expr::value("serif")))\n        .from(Font::Table)\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT "name" <% \'serif\' FROM "font""#\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/473",children:"#473"}),"] Added ",(0,t.jsx)(n.code,{children:"ILIKE"})," and ",(0,t.jsx)(n.code,{children:"NOT ILIKE"})," operators"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/510",children:"#510"}),"] Added the ",(0,t.jsx)(n.code,{children:"mul"})," and ",(0,t.jsx)(n.code,{children:"div"})," methods for ",(0,t.jsx)(n.code,{children:"SimpleExpr"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/513",children:"#513"}),"] Added the ",(0,t.jsx)(n.code,{children:"MATCH"}),", ",(0,t.jsx)(n.code,{children:"->"})," and ",(0,t.jsx)(n.code,{children:"->>"})," operators for SQLite"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_query::extension::sqlite::SqliteBinOper;\n\nassert_eq!(\n    Query::select()\n        .column(Char::Character)\n        .from(Char::Table)\n        .and_where(Expr::col(Char::Character).binary(SqliteBinOper::Match, Expr::val("test")))\n        .build(SqliteQueryBuilder),\n    (\n        r#"SELECT "character" FROM "character" WHERE "character" MATCH ?"#.to_owned(),\n        Values(vec!["test".into()])\n    )\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/497",children:"#497"}),"] Added the ",(0,t.jsx)(n.code,{children:"FULL OUTER JOIN"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/530",children:"#530"}),"] Added ",(0,t.jsx)(n.code,{children:"PgFunc::get_random_uuid"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/528",children:"#528"}),"] Added ",(0,t.jsx)(n.code,{children:"SimpleExpr::eq"}),", ",(0,t.jsx)(n.code,{children:"SimpleExpr::ne"}),", ",(0,t.jsx)(n.code,{children:"Expr::not_equals"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/529",children:"#529"}),"] Added ",(0,t.jsx)(n.code,{children:"PgFunc::starts_with"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/535",children:"#535"}),"] Added ",(0,t.jsx)(n.code,{children:"Expr::custom_keyword"})," and ",(0,t.jsx)(n.code,{children:"SimpleExpr::not"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_query::*;\n\nlet query = Query::select()\n    .expr(Expr::custom_keyword(Alias::new("test")))\n    .to_owned();\n\nassert_eq!(query.to_string(MysqlQueryBuilder), r#"SELECT test"#);\nassert_eq!(query.to_string(PostgresQueryBuilder), r#"SELECT test"#);\nassert_eq!(query.to_string(SqliteQueryBuilder), r#"SELECT test"#);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/539",children:"#539"}),"] Added ",(0,t.jsx)(n.code,{children:"SimpleExpr::like"}),", ",(0,t.jsx)(n.code,{children:"SimpleExpr::not_like"})," and ",(0,t.jsx)(n.code,{children:"Expr::cast_as"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/532",children:"#532"}),"] Added support for ",(0,t.jsx)(n.code,{children:"NULLS NOT DISTINCT"})," clause for Postgres"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/531",children:"#531"}),"] Added ",(0,t.jsx)(n.code,{children:"Expr::cust_with_expr"})," and ",(0,t.jsx)(n.code,{children:"Expr::cust_with_exprs"})]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_query::{tests_cfg::*, *};\n\nlet query = Query::select()\n    .expr(Expr::cust_with_expr("data @? ($1::JSONPATH)", "hello"))\n    .to_owned();\n\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT data @? (\'hello\'::JSONPATH)"#\n);\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/538",children:"#538"}),"] Added support for converting ",(0,t.jsx)(n.code,{children:"&String"})," to Value"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"miscellaneous-enhancements",children:"Miscellaneous Enhancements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/475",children:"#475"}),"] New struct ",(0,t.jsx)(n.code,{children:"FunctionCall"})," which hold function and arguments"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/503",children:"#503"}),"] Support ",(0,t.jsx)(n.code,{children:"BigDecimal"}),", ",(0,t.jsx)(n.code,{children:"IpNetwork"})," and ",(0,t.jsx)(n.code,{children:"MacAddress"})," for ",(0,t.jsx)(n.code,{children:"sea-query-postgres"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/511",children:"#511"}),"] Made ",(0,t.jsx)(n.code,{children:"value::with_array"})," module public and therefore making ",(0,t.jsx)(n.code,{children:"NotU8"})," trait public"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/524",children:"#524"}),"] Drop the ",(0,t.jsx)(n.code,{children:"Sized"})," requirement on implementers of ",(0,t.jsx)(n.code,{children:"SchemaBuilders"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(n.p,{children:"SeaQuery plays well with the other crates in the rust ecosystem."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/postgres",children:"Postgres Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/rusqlite",children:"Rusqlite Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_any",children:"SQLx Any Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_postgres",children:"SQLx Postgres Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_mysql",children:"SQLx MySql Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_sqlite",children:"SQLx Sqlite Example"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,t.jsx)(n.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and together build for Rust's future."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},611:e=>{e.exports=JSON.parse('{"permalink":"/blog/2022-12-30-whats-new-in-seaquery-0.28.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-12-30-whats-new-in-seaquery-0.28.0.md","source":"@site/blog/2022-12-30-whats-new-in-seaquery-0.28.0.md","title":"What\'s new in SeaQuery 0.28.0","description":"\ud83c\udf89 We are pleased to release SeaQuery 0.28.0! Here are some feature highlights \ud83c\udf1f:","date":"2022-12-30T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":5.88,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Ivan Krivosheev","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2022-12-30-whats-new-in-seaquery-0.28.0","title":"What\'s new in SeaQuery 0.28.0","author":"SeaQL Team","author_title":"Ivan Krivosheev","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Call for Contributors and Reviewers \ud83d\udce2","permalink":"/blog/2023-01-01-call-for-contributors-n-reviewers"},"nextItem":{"title":"What\'s new in Seaography 0.3.0","permalink":"/blog/2022-12-02-whats-new-in-seaography-0.3.0"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);