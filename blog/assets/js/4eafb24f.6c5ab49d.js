"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[2645],{8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},8832:e=>{e.exports=JSON.parse('{"permalink":"/blog/2022-12-02-whats-new-in-seaography-0.3.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-12-02-whats-new-in-seaography-0.3.0.md","source":"@site/blog/2022-12-02-whats-new-in-seaography-0.3.0.md","title":"What\'s new in Seaography 0.3.0","description":"\ud83c\udf89 We are pleased to release Seaography 0.3.0! Here are some feature highlights \ud83c\udf1f:","date":"2022-12-02T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/blog/tags/news"}],"readingTime":3.56,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Panagiotis Karatakis","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2022-12-02-whats-new-in-seaography-0.3.0","title":"What\'s new in Seaography 0.3.0","author":"SeaQL Team","author_title":"Panagiotis Karatakis","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"What\'s new in SeaQuery 0.28.0","permalink":"/blog/2022-12-30-whats-new-in-seaquery-0.28.0"},"nextItem":{"title":"What\'s new in SeaORM 0.10.x","permalink":"/blog/2022-11-10-whats-new-in-0.10.x"}}')},8864:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>p});var t=a(8832),r=a(4848),s=a(8453);const o={slug:"2022-12-02-whats-new-in-seaography-0.3.0",title:"What's new in Seaography 0.3.0",author:"SeaQL Team",author_title:"Panagiotis Karatakis",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},i=void 0,l={authorsImageUrls:[void 0]},p=[{value:"Dependency Upgrade",id:"dependency-upgrade",level:2},{value:"Support Self Referencing Relation",id:"support-self-referencing-relation",level:2},{value:"Web Framework Generator",id:"web-framework-generator",level:2},{value:"CLI Generator Option",id:"cli-generator-option",level:3},{value:"Actix",id:"actix",level:3},{value:"Poem",id:"poem",level:3},{value:"Related Query Enhancement",id:"related-query-enhancement",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Community",id:"community",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["\ud83c\udf89 We are pleased to release Seaography ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/releases/tag/0.3.0",children:(0,r.jsx)(n.code,{children:"0.3.0"})}),"! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,r.jsx)(n.h2,{id:"dependency-upgrade",children:"Dependency Upgrade"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/pull/93",children:"#93"}),"] We have upgraded a major dependency:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Upgrade ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm",children:(0,r.jsx)(n.code,{children:"sea-orm"})})," to 0.10"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"You might need to upgrade the corresponding dependency in your application as well."}),"\n",(0,r.jsx)(n.h2,{id:"support-self-referencing-relation",children:"Support Self Referencing Relation"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/pull/99",children:"#99"}),"] You can now query self referencing models and the inverse of it."]}),"\n",(0,r.jsxs)(n.p,{children:["Self referencing relation should be added to the ",(0,r.jsx)(n.code,{children:"Relation"})," enum, note that the ",(0,r.jsx)(n.code,{children:"belongs_to"})," attribute must be ",(0,r.jsx)(n.code,{children:'belongs_to = "Entity"'}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(\n    Clone, Debug, PartialEq, DeriveEntityModel,\n    async_graphql::SimpleObject, seaography::macros::Filter,\n)]\n#[sea_orm(table_name = "staff")]\n#[graphql(complex)]\n#[graphql(name = "Staff")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub staff_id: i32,\n    pub first_name: String,\n    pub last_name: String,\n    pub reports_to_id: Option<i32>,\n}\n\n#[derive(\n    Copy, Clone, Debug, EnumIter, DeriveRelation,\n    seaography::macros::RelationsCompact\n)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "Entity",\n        from = "Column::ReportsToId",\n        to = "Column::StaffId",\n    )]\n    SelfRef,\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, you can query the related models in GraphQL."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n    staff {\n        nodes {\n            firstName\n            reportsToId\n            selfRefReverse {\n                staffId\n                firstName\n            }\n            selfRef {\n                staffId\n                firstName\n            }\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The resulting JSON"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "staff": {\n        "nodes": [\n            {\n                "firstName": "Mike",\n                "reportsToId": null,\n                "selfRefReverse": [\n                    {\n                        "staffId": 2,\n                        "firstName": "Jon"\n                    }\n                ],\n                "selfRef": null\n            },\n            {\n                "firstName": "Jon",\n                "reportsToId": 1,\n                "selfRefReverse": null,\n                "selfRef": {\n                    "staffId": 1,\n                    "firstName": "Mike"\n                }\n            }\n        ]\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"web-framework-generator",children:"Web Framework Generator"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/pull/74",children:"#74"}),"] You can generate ",(0,r.jsx)(n.code,{children:"seaography"})," project with either Actix or Poem as the web server."]}),"\n",(0,r.jsx)(n.h3,{id:"cli-generator-option",children:"CLI Generator Option"}),"\n",(0,r.jsxs)(n.p,{children:["Run ",(0,r.jsx)(n.code,{children:"seaography-cli"})," to generate ",(0,r.jsx)(n.code,{children:"seaography"})," code with Actix or Poem as the web framework."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# The command take three arguments, generating project with Poem web framework by default\nseaography-cli <DATABASE_URL> <CRATE_NAME> <DESTINATION>\n\n# Generating project with Actix web framework\nseaography-cli -f actix <DATABASE_URL> <CRATE_NAME> <DESTINATION>\n\n# MySQL\nseaography-cli mysql://root:root@localhost/sakila seaography-mysql-example examples/mysql\n# PostgreSQL\nseaography-cli postgres://root:root@localhost/sakila seaography-postgres-example examples/postgres\n# SQLite\nseaography-cli sqlite://examples/sqlite/sakila.db seaography-sqlite-example examples/sqliteql\n"})}),"\n",(0,r.jsx)(n.h3,{id:"actix",children:"Actix"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use async_graphql::{\n    dataloader::DataLoader,\n    http::{playground_source, GraphQLPlaygroundConfig},\n    EmptyMutation, EmptySubscription, Schema,\n};\nuse async_graphql_actix_web::{GraphQLRequest, GraphQLResponse};\nuse sea_orm::Database;\nuse seaography_example_project::*;\n// ...\n\nasync fn graphql_playground() -> Result<HttpResponse> {\n    Ok(HttpResponse::Ok()\n        .content_type("text/html; charset=utf-8")\n        .body(\n            playground_source(GraphQLPlaygroundConfig::new("http://localhost:8000"))\n        ))\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // ...\n\n    let database = Database::connect(db_url).await.unwrap();\n    let orm_dataloader: DataLoader<OrmDataloader> = DataLoader::new(\n        OrmDataloader {\n            db: database.clone(),\n        },\n        tokio::spawn,\n    );\n\n    let schema = Schema::build(QueryRoot, EmptyMutation, EmptySubscription)\n        .data(database)\n        .data(orm_dataloader)\n        .finish();\n\n    let app = App::new()\n        .app_data(Data::new(schema.clone()))\n        .service(web::resource("/").guard(guard::Post()).to(index))\n        .service(web::resource("/").guard(guard::Get()).to(graphql_playground));\n\n    HttpServer::new(app)\n        .bind("127.0.0.1:8000")?\n        .run()\n        .await\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"poem",children:"Poem"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use async_graphql::{\n    dataloader::DataLoader,\n    http::{playground_source, GraphQLPlaygroundConfig},\n    EmptyMutation, EmptySubscription, Schema,\n};\nuse async_graphql_poem::GraphQL;\nuse poem::{handler, listener::TcpListener, web::Html, IntoResponse, Route, Server};\nuse sea_orm::Database;\nuse seaography_example_project::*;\n// ...\n\n#[handler]\nasync fn graphql_playground() -> impl IntoResponse {\n    Html(playground_source(GraphQLPlaygroundConfig::new("/")))\n}\n\n#[tokio::main]\nasync fn main() {\n    // ...\n\n    let database = Database::connect(db_url).await.unwrap();\n    let orm_dataloader: DataLoader<OrmDataloader> = DataLoader::new(\n        OrmDataloader { db: database.clone() },\n        tokio::spawn,\n    );\n\n    let schema = Schema::build(QueryRoot, EmptyMutation, EmptySubscription)\n        .data(database)\n        .data(orm_dataloader)\n        .finish();\n\n    let app = Route::new()\n        .at("/", get(graphql_playground)\n        .post(GraphQL::new(schema)));\n\n    Server::new(TcpListener::bind("0.0.0.0:8000"))\n        .run(app)\n        .await\n        .unwrap();\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"related-query-enhancement",children:"Related Query Enhancement"}),"\n",(0,r.jsxs)(n.p,{children:["[",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/pull/84",children:"#84"}),"] Filtering, sorting and paginating related 1-to-many queries. Note that the pagination is work-in-progress, currently it is in memory pagination."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, find all inactive customers, include their address, and their payments with amount greater than 7 ordered by amount the second result. You can execute the query below at our ",(0,r.jsx)(n.a,{href:"https://playground.sea-ql.org/seaography",children:"GraphQL playground"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'{\n  customer(\n    filters: { active: { eq: 0 } }\n    pagination: { cursor: { limit: 3, cursor: "Int[3]:271" } }\n  ) {\n    nodes {\n      customerId\n      lastName\n      email\n      address {\n        address\n      }\n      payment(\n        filters: { amount: { gt: "7" } }\n        orderBy: { amount: ASC }\n        pagination: { pages: { limit: 1, page: 1 } }\n      ) {\n        nodes {\n          paymentId\n          amount\n        }\n        pages\n        current\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n        }\n      }\n    }\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      endCursor\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,r.jsx)(n.p,{children:"We have the following examples for you, alongside with the SQL scripts to initialize the database."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/mysql",children:"MySQL"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/postgres",children:"PostgreSQL"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/sqlite",children:"SQLite"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,r.jsx)(n.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and together build for Rust's future."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);