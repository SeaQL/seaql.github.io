"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[85878],{28453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>i});var n=t(96540);const r={},s=n.createContext(r);function o(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:a},e.children)}},74866:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"seaography/seaography-intro","title":"\ud83e\udded Seaography Intro","description":"If you are building a full-stack application with a web GUI these days, it\'s likely you\'d use GraphQL as the communication interface between frontend and backend. A GraphQL schema is strongly typed and self-documenting, so no doubt frontend developers love them!","source":"@site/versioned_docs/version-0.12.x/10-seaography/01-seaography-intro.md","sourceDirName":"10-seaography","slug":"/seaography/seaography-intro","permalink":"/SeaORM/docs/0.12.x/seaography/seaography-intro","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/10-seaography/01-seaography-intro.md","tags":[],"version":"0.12.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756724548000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Create Index","permalink":"/SeaORM/docs/0.12.x/schema-statement/create-index"},"next":{"title":"Getting Started","permalink":"/SeaORM/docs/0.12.x/seaography/getting-started"}}');var r=t(74848),s=t(28453);const o={},i="\ud83e\udded Seaography Intro",d={},c=[];function h(e){const a={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"-seaography-intro",children:"\ud83e\udded Seaography Intro"})}),"\n",(0,r.jsx)(a.p,{children:"If you are building a full-stack application with a web GUI these days, it's likely you'd use GraphQL as the communication interface between frontend and backend. A GraphQL schema is strongly typed and self-documenting, so no doubt frontend developers love them!"}),"\n",(0,r.jsx)(a.p,{children:"However, building GraphQL resolvers is no easy task for backend developers. There is a huge impedance mismatch between GraphQL and SQL, even though they both deemed relational. Luckily, we've got your back!"}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/seaography",children:"Seaography"})," is a GraphQL framework built on top of SeaORM and ",(0,r.jsx)(a.a,{href:"https://github.com/async-graphql/async-graphql",children:"async-graphql"}),". Together with many other Rust libraries (e.g. ",(0,r.jsx)(a.code,{children:"tokio"}),", ",(0,r.jsx)(a.code,{children:"serde"}),"), we argue, the Rust ecosystem provides the best technology for building GraphQL backends!"]}),"\n",(0,r.jsxs)(a.p,{children:["SeaORM is dynamic by design. ",(0,r.jsx)(a.code,{children:"async-graphql"})," ",(0,r.jsx)(a.code,{children:"v5.0"})," introduced ",(0,r.jsx)(a.a,{href:"https://docs.rs/async-graphql/latest/async_graphql/dynamic/index.html",children:"dynamic schema"})," and is a perfect match with SeaORM, as we can take a SeaORM Entity and upgrade it into a GraphQL Entity."]}),"\n",(0,r.jsxs)(a.p,{children:["Seaography started out as a ",(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/summer-of-code/blob/main/2022/README.md#1-a-graphql-framework-on-top-of-seaorm",children:"Summer of Code 2022 project"}),". It is still in an early stage, the current limitations are: 1) No mutation 2) No Data Loader, but nonetheless can be useful in prototyping and building internal-use admin panels."]}),"\n",(0,r.jsx)(a.p,{children:"With just a few commands, you can launch a GraphQL server from SeaORM entities!"})]})}function l(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);