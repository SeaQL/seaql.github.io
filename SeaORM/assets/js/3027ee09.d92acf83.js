"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[17384],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},57166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"generate-entity/enumeration","title":"Enumeration","description":"You can use Rust enums in model where the values are mapped to a database string, integer or native enum.","source":"@site/versioned_docs/version-0.11.x/04-generate-entity/04-enumeration.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/enumeration","permalink":"/SeaORM/docs/0.11.x/generate-entity/enumeration","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.11.x/04-generate-entity/04-enumeration.md","tags":[],"version":"0.11.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1754947085000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Expanded Entity Structure","permalink":"/SeaORM/docs/0.11.x/generate-entity/expanded-entity-structure"},"next":{"title":"Newtype","permalink":"/SeaORM/docs/0.11.x/generate-entity/newtype"}}');var a=t(74848),i=t(28453);const s={},o="Enumeration",l={},u=[{value:"String",id:"string",level:3},{value:"Integers",id:"integers",level:3},{value:"Native Database Enum",id:"native-database-enum",level:3},{value:"Implementations",id:"implementations",level:2},{value:"Derive Implementation",id:"derive-implementation",level:3},{value:"Manual Implementation",id:"manual-implementation",level:3},{value:"Using ActiveEnum on Model",id:"using-activeenum-on-model",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"enumeration",children:"Enumeration"})}),"\n",(0,a.jsx)(n.p,{children:"You can use Rust enums in model where the values are mapped to a database string, integer or native enum."}),"\n",(0,a.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"integers",children:"Integers"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    #[sea_orm(num_value = 0)]\n    Black,\n    #[sea_orm(num_value = 1)]\n    White,\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Alternatively, you could write:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    Black = 0,\n    White = 1,\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"native-database-enum",children:"Native Database Enum"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,a.jsxs)(n.p,{children:["You can implement ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.ActiveEnum.html",children:(0,a.jsx)(n.code,{children:"ActiveEnum"})})," manually by hand or use the derive macro ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/derive.DeriveActiveEnum.html",children:(0,a.jsx)(n.code,{children:"DeriveActiveEnum"})}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"derive-implementation",children:"Derive Implementation"}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/derive.DeriveActiveEnum.html",children:(0,a.jsx)(n.code,{children:"DeriveActiveEnum"})})," for the full specification of macro attributes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n// Using the derive macro\n#[derive(Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(\n    rs_type = "String",\n    db_type = "String(Some(1))",\n    enum_name = "category"\n)]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"manual-implementation",children:"Manual Implementation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n// Implementing it manually\n#[derive(Debug, PartialEq, Eq, EnumIter)]\npub enum Category {\n    Big,\n    Small,\n}\n\nimpl ActiveEnum for Category {\n    // The macro attribute `rs_type` is being pasted here\n    type Value = String;\n\n    // By default, the name of Rust enum in camel case if `enum_name` was not provided explicitly\n    fn name() -> String {\n        "category".to_owned()\n    }\n\n    // Map Rust enum variants to corresponding `num_value` or `string_value`\n    fn to_value(&self) -> Self::Value {\n        match self {\n            Self::Big => "B",\n            Self::Small => "S",\n        }\n        .to_owned()\n    }\n\n    // Map `num_value` or `string_value` to corresponding Rust enum variants\n    fn try_from_value(v: &Self::Value) -> Result<Self, DbErr> {\n        match v.as_ref() {\n            "B" => Ok(Self::Big),\n            "S" => Ok(Self::Small),\n            _ => Err(DbErr::Type(format!(\n                "unexpected value for Category enum: {}",\n                v\n            ))),\n        }\n    }\n\n    // The macro attribute `db_type` is being pasted here\n    fn db_type() -> ColumnDef {\n        ColumnType::String(Some(1)).def()\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"using-activeenum-on-model",children:"Using ActiveEnum on Model"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n// Define the `Category` active enum\n#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    // Represents a db column using `Category` active enum\n    pub category: Category,\n    pub category_opt: Option<Category>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);