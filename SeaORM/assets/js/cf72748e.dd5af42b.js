"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[79979],{28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},84854:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"graph-ql/getting-started","title":"Getting Started","description":"Here we start from the Seaography Example using a simplified Bakery schema.","source":"@site/docs/10-graph-ql/02-getting-started.md","sourceDirName":"10-graph-ql","slug":"/graph-ql/getting-started","permalink":"/SeaORM/docs/graph-ql/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/10-graph-ql/02-getting-started.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761400599000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\udded Seaography","permalink":"/SeaORM/docs/graph-ql/seaography-intro"},"next":{"title":"\ud83d\udda5\ufe0f SeaORM Pro","permalink":"/SeaORM/docs/sea-orm-pro/sea-orm-pro-intro"}}');var r=a(74848),i=a(28453);const s={},o="Getting Started",l={},c=[{value:"Install Seaography CLI",id:"install-seaography-cli",level:2},{value:"Generate Seaography Entities",id:"generate-seaography-entities",level:2},{value:"Dense Entity Format",id:"dense-entity-format",level:3},{value:"Compact Entity Format",id:"compact-entity-format",level:3},{value:"Generate GraphQL Project",id:"generate-graphql-project",level:2},{value:"Start the server",id:"start-the-server",level:2},{value:"Run some queries",id:"run-some-queries",level:2},{value:"Find chocolate cakes and know where to buy them",id:"find-chocolate-cakes-and-know-where-to-buy-them",level:3},{value:"Find all cakes baked by Alice",id:"find-all-cakes-baked-by-alice",level:3},{value:"List all bakeries and their cakes, along with bakers who bakes them",id:"list-all-bakeries-and-their-cakes-along-with-bakers-who-bakes-them",level:3},{value:"Where to go from here",id:"where-to-go-from-here",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we start from the ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example",children:"Seaography Example"})," using a simplified Bakery schema."]}),"\n",(0,r.jsx)(n.p,{children:"There are other examples with more complex schemas:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/seaography/tree/1.1.x/examples/sqlite",children:"Sakila"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm-pro",children:"AdventureWorks"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["To get started, all you need is a live SQL database with schema. You can code everything in Rust by writing SeaORM migrations, or design the schema with a GUI tool (e.g. ",(0,r.jsx)(n.a,{href:"https://www.jetbrains.com/datagrip/",children:"DataGrip"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"install-seaography-cli",children:"Install Seaography CLI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cargo install seaography-cli@^2.0.0-rc\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generate-seaography-entities",children:"Generate Seaography Entities"}),"\n",(0,r.jsx)(n.h3,{id:"dense-entity-format",children:"Dense Entity Format"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.em,{children:"exact same, byte-for-byte"})," SeaORM entities can be used in Seaography. The magic happens behind the ",(0,r.jsx)(n.code,{children:"seaography"})," feature flag of SeaORM's macros."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sea-orm-cli generate entity --output-dir ./src/entities --entity-format dense\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/entities/cake.rs"',children:'//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.14\n\nuse sea_orm::entity::prelude::*;\n\n#[sea_orm::model]\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    #[sea_orm(column_type = "Decimal(Some((16, 4)))")]\n    pub price: Decimal,\n    pub bakery_id: i32,\n    pub gluten_free: bool,\n    #[sea_orm(\n        belongs_to,\n        from = "bakery_id",\n        to = "id",\n        on_update = "Cascade",\n        on_delete = "Cascade"\n    )]\n    pub bakery: HasOne<super::bakery::Entity>,\n    #[sea_orm(has_many, via = "cake_baker")]\n    pub bakers: HasMany<super::baker::Entity>,\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"compact-entity-format",children:"Compact Entity Format"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sea-orm-cli generate entity --output-dir ./src/entities --entity-format compact --seaography\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Generate entities with ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," like you normally do, but with an additional ",(0,r.jsx)(n.code,{children:"--seaography"})," flag. The entities are basically good-old SeaORM entities, but with an additional ",(0,r.jsx)(n.code,{children:"RelatedEntity"})," enum."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'{24-30} title="src/entities/cake.rs"',children:'//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.12\n\nuse sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    #[sea_orm(column_type = "Decimal(Some((16, 4)))")]\n    pub price: Decimal,\n    pub bakery_id: i32,\n    pub gluten_free: bool,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation { .. }\n\nimpl Related<super::bakery::Entity> for Entity { .. }\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\npub enum RelatedEntity {\n    #[sea_orm(entity = "super::bakery::Entity")]\n    Bakery,\n    #[sea_orm(entity = "super::baker::Entity")]\n    Baker,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"generate-graphql-project",children:"Generate GraphQL Project"}),"\n",(0,r.jsx)(n.p,{children:"Generating a fresh project is the easiest way to launch a GraphQL server.\nHowever, Seaography can easily be integrated to an existing web server built with any web framework."}),"\n",(0,r.jsx)(n.p,{children:"Seaography supports Poem, Actix, and Axum out of the box."}),"\n",(0,r.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"seaography-cli --output-dir . --entities ./src/entities --framework axum sea-orm-seaography-example\n"})}),"\n",(0,r.jsx)(n.p,{children:"Full help:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\ud83e\udded A GraphQL framework for SeaORM\n\nUsage: seaography-cli [OPTIONS] --entities <ENTITIES> --database-url <DATABASE_URL> <CRATE_NAME>\n\nArguments:\n  <CRATE_NAME>  Crate name for generated project\n\nOptions:\n  -o, --output-dir <OUTPUT_DIR>\n          Project output directory [default: ./]\n  -e, --entities <ENTITIES>\n          Entities directory\n  -u, --database-url <DATABASE_URL>\n          Database URL [env: DATABASE_URL]\n  -f, --framework <FRAMEWORK>\n          Which web framework to use [default: poem] [possible values: actix, poem, axum]\n      --depth-limit <DEPTH_LIMIT>\n          GraphQL depth limit\n      --complexity-limit <COMPLEXITY_LIMIT>\n          GraphQL complexity limit\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"start-the-server",children:"Start the server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cd graphql\ncargo run\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You are of course free to modify the project to suit your needs.\nThe interesting bit starts at the ",(0,r.jsx)(n.code,{children:"schema_builder"})," function in ",(0,r.jsx)(n.code,{children:"query_root.rs"}),".\nYou can add custom entities, queries and mutations to the GraphQL schema."]}),"\n",(0,r.jsx)(n.h2,{id:"run-some-queries",children:"Run some queries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"Visit GraphQL Playground at http://localhost:8000\n"})}),"\n",(0,r.jsx)(n.p,{children:"Navigate to the GraphQL Playground, and then start running some queries!"}),"\n",(0,r.jsx)(n.h3,{id:"find-chocolate-cakes-and-know-where-to-buy-them",children:"Find chocolate cakes and know where to buy them"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'{\n  cake(filters: { name: { contains: "Chocolate" } }) {\n    nodes {\n      name\n      price\n      bakery {\n        name\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"find-all-cakes-baked-by-alice",children:"Find all cakes baked by Alice"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'{\n  cake(having: { baker: { name: { eq: "Alice" } } }) {\n    nodes {\n      name\n      price\n      baker {\n        nodes {\n          name\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"list-all-bakeries-and-their-cakes-along-with-bakers-who-bakes-them",children:"List all bakeries and their cakes, along with bakers who bakes them"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n  bakery(pagination: { page: { limit: 10, page: 0 } }, orderBy: { name: ASC }) {\n    nodes {\n      name\n      cake {\n        nodes {\n          name\n          price\n          baker {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"where-to-go-from-here",children:"Where to go from here"}),"\n",(0,r.jsxs)(n.p,{children:["Seaography covers all the needs of building complex applications - from data access, access control to ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/sea-orm-pro",children:"frontend integration"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Learn more about adding custom GraphQL endpoints and customizing resolvers in ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/Seaography/docs/index/",children:"Seaography's Official Documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);