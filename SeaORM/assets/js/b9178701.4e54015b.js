"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[51342],{11611:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"generate-entity/newtype","title":"New Type","description":"You can define a New Type (T) and use it as model field. The following traits have to be implemented.","source":"@site/versioned_docs/version-1.0.x/04-generate-entity/05-newtype.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/newtype","permalink":"/SeaORM/docs/1.0.x/generate-entity/newtype","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/04-generate-entity/05-newtype.md","tags":[],"version":"1.0.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756724548000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Enumeration","permalink":"/SeaORM/docs/1.0.x/generate-entity/enumeration"},"next":{"title":"Basic Schema","permalink":"/SeaORM/docs/1.0.x/basic-crud/basic-schema"}}');var s=r(74848),a=r(28453);const o={},i="New Type",l={},c=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"new-type",children:"New Type"})}),"\n",(0,s.jsxs)(n.p,{children:["You can define a New Type (",(0,s.jsx)(n.code,{children:"T"}),") and use it as model field. The following traits have to be implemented."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.code,{children:"From<T>"})," for ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/value/enum.Value.html",children:(0,s.jsx)(n.code,{children:"sea_query::Value"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/trait.TryGetable.html",children:(0,s.jsx)(n.code,{children:"sea_orm::TryGetable"})})," for ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/value/trait.ValueType.html",children:(0,s.jsx)(n.code,{children:"sea_query::ValueType"})})," for ",(0,s.jsx)(n.code,{children:"T"})]}),"\n",(0,s.jsxs)(n.li,{children:["If the field is ",(0,s.jsx)(n.code,{children:"Option<T>"}),", implement ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/value/trait.Nullable.html",children:(0,s.jsx)(n.code,{children:"sea_query::Nullable"})})," for ",(0,s.jsx)(n.code,{children:"T"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "custom_value_type")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub number: Integer,\n    // Postgres only\n    pub str_vec: StringVec,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveValueType)]\npub struct Integer(i32);\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveValueType)]\npub struct StringVec(pub Vec<String>);\n'})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:["Which ",(0,s.jsx)(n.code,{children:"StringVec"})," expands to:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl std::convert::From<StringVec> for Value {\n    fn from(source: StringVec) -> Self {\n        source.0.into()\n    }\n}\n\nimpl sea_orm::TryGetable for StringVec {\n    fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, sea_orm::TryGetError> {\n        <Vec<String> as sea_orm::TryGetable>::try_get_by(res, idx).map(|v| StringVec(v))\n    }\n}\n\nimpl sea_orm::sea_query::ValueType for StringVec {\n    fn try_from(v: Value) -> Result<Self, sea_orm::sea_query::ValueTypeErr> {\n        <Vec<String> as sea_orm::sea_query::ValueType>::try_from(v).map(|v| StringVec(v))\n    }\n\n    fn type_name() -> String {\n        stringify!(StringVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::String\n    }\n\n    fn column_type() -> sea_orm::sea_query::ColumnType {\n        sea_orm::sea_query::ColumnType::String(None)\n    }\n}\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["You can also define a backend-generic ",(0,s.jsx)(n.code,{children:"Vec<T>"})," field by serialize / deserialize the object to / from JSON:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub str_vec: ObjectVec,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct ObjectVec(pub Vec<MyObject>);\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\npub struct MyObject {\n    ..\n}\n'})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:["Which ",(0,s.jsx)(n.code,{children:"ObjectVec"})," expands to:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl sea_orm::TryGetableFromJson for ObjectVec {}\n\nimpl std::convert::From<ObjectVec> for sea_orm::Value {\n    fn from(source: ObjectVec) -> Self {\n        sea_orm::Value::Json(serde_json::to_value(&source).ok().map(|s| std::boxed::Box::new(s)))\n    }\n}\n\nimpl sea_orm::sea_query::ValueType for ObjectVec {\n    fn try_from(v: sea_orm::Value) -> Result<Self, sea_orm::sea_query::ValueTypeErr> {\n        match v {\n            sea_orm::Value::Json(Some(json)) => Ok(\n                serde_json::from_value(*json).map_err(|_| sea_orm::sea_query::ValueTypeErr)?,\n            ),\n            _ => Err(sea_orm::sea_query::ValueTypeErr),\n        }\n    }\n\n    fn type_name() -> String {\n        stringify!(ObjectVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::Json\n    }\n\n    fn column_type() -> sea_orm::sea_query::ColumnType {\n        sea_orm::sea_query::ColumnType::Json\n    }\n}\n\nimpl sea_orm::sea_query::Nullable for ObjectVec {\n    fn null() -> sea_orm::Value {\n        sea_orm::Value::Json(None)\n    }\n}\n"})})]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(96540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);