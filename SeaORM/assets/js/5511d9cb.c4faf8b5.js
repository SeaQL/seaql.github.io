"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[38617],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(96540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},40530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"write-test/sqlite","title":"Using SQLite","description":"If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.","source":"@site/versioned_docs/version-0.4.x/07-write-test/03-sqlite.md","sourceDirName":"07-write-test","slug":"/write-test/sqlite","permalink":"/SeaORM/docs/0.4.x/write-test/sqlite","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/07-write-test/03-sqlite.md","tags":[],"version":"0.4.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760805209000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Mock Interface","permalink":"/SeaORM/docs/0.4.x/write-test/mock"},"next":{"title":"Custom Select","permalink":"/SeaORM/docs/0.4.x/advanced-query/custom-select"}}');var a=n(74848),r=n(28453);const i={},o="Using SQLite",c={},l=[{value:"Integration Test",id:"integration-test",level:2},{value:"Setup database schema",id:"setup-database-schema",level:2},{value:"Performing tests",id:"performing-tests",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"using-sqlite",children:"Using SQLite"})}),"\n",(0,a.jsx)(t.p,{children:"If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you."}),"\n",(0,a.jsxs)(t.p,{children:["Check out a simple example ",(0,a.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/tests/basic.rs",children:"here"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"integration-test",children:"Integration Test"}),"\n",(0,a.jsxs)(t.p,{children:["It is recommended to execute more complex test cases in ",(0,a.jsx)(t.a,{href:"https://doc.rust-lang.org/rust-by-example/testing/integration_testing.html",children:"integration tests"}),". The following code snippet illustrates the steps of connecting to a database, setting up schema and performing tests."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'async fn main() -> Result<(), DbErr> {\n    // Connecting SQLite\n    let db = Database::connect("sqlite::memory:").await?;\n\n    // Setup database schema\n    setup_schema(&db).await?;\n\n    // Performing tests\n    testcase(&db).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"setup-database-schema",children:"Setup database schema"}),"\n",(0,a.jsxs)(t.p,{children:["To create tables in SQLite database for testing, instead of writing ",(0,a.jsx)(t.a,{href:"https://docs.rs/sea-query/*/sea_query/table/struct.TableCreateStatement.html",children:(0,a.jsx)(t.code,{children:"TableCreateStatement"})})," manually, you can derive it from ",(0,a.jsx)(t.code,{children:"Entity"})," using ",(0,a.jsx)(t.a,{href:"https://docs.rs/sea-orm/0.4/sea_orm/schema/struct.Schema.html#method.create_table_from_entity",children:(0,a.jsx)(t.code,{children:"Schema::create_table_from_entity"})}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:"async fn setup_schema(db: &DbConn) {\n\n    // Setup Schema helper\n    let schema = Schema::new(DbBackend::Sqlite);\n\n    // Derive from Entity\n    let stmt: TableCreateStatement = schema.create_table_from_entity(MyEntity);\n\n    // Or setup manually\n    assert_eq!(\n        stmt.build(SqliteQueryBuilder),\n        Table::create()\n            .table(MyEntity)\n            .col(\n                ColumnDef::new(MyEntity::Column::Id)\n                    .integer()\n                    .not_null()\n            )\n            //...\n            .build(SqliteQueryBuilder)\n    );\n\n    // Execute create table statement\n    let result = db\n        .execute(db.get_database_backend().build(&stmt))\n        .await;\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"performing-tests",children:"Performing tests"}),"\n",(0,a.jsx)(t.p,{children:"Execute test cases and assert against the results."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'async fn testcase(db: &DbConn) -> Result<(), DbErr> {\n\n    let baker_bob = baker::ActiveModel {\n        name: Set("Baker Bob".to_owned()),\n        contact_details: Set(serde_json::json!({\n            "mobile": "+61424000000",\n            "home": "0395555555",\n            "address": "12 Test St, Testville, Vic, Australia"\n        })),\n        bakery_id: Set(2),\n        ..Default::default()\n    };\n\n    let baker_insert_res = Baker::insert(baker_bob)\n        .exec(db)\n        .await\n        .expect("could not insert baker");\n\n    assert_eq!(baker_insert_res.last_insert_id, 1);\n\n    Ok(())\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);