"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[23271],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(96540);const r={},a=i.createContext(r);function l(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(a.Provider,{value:n},e.children)}},57009:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"relation/entity-loader","title":"Entity Loader","description":"The Entity Loader intelligently uses join and data loader different relation types, eliminating the N+1 problem even when performing nested queries.","source":"@site/docs/06-relation/07-entity-loader.md","sourceDirName":"06-relation","slug":"/relation/entity-loader","permalink":"/SeaORM/docs/relation/entity-loader","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/06-relation/07-entity-loader.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761400599000,"sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Model Loader","permalink":"/SeaORM/docs/relation/model-loader"},"next":{"title":"Bakery Schema","permalink":"/SeaORM/docs/relation/bakery-schema"}}');var r=t(74848),a=t(28453);const l={},o="Entity Loader",s={},d=[{value:"Using Entity Loader",id:"using-entity-loader",level:2},{value:"Under the hood",id:"under-the-hood",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"entity-loader",children:"Entity Loader"})}),"\n",(0,r.jsx)(n.p,{children:"The Entity Loader intelligently uses join and data loader different relation types, eliminating the N+1 problem even when performing nested queries."}),"\n",(0,r.jsx)(n.p,{children:"For 1-1 relations, it does a join and select up to three tables together in a single query."}),"\n",(0,r.jsx)(n.p,{children:"For 1-N or M-N relations, it uses the data loader. Note that, it's a single query even for M-N relation, as the junction table will be joined."}),"\n",(0,r.jsx)(n.p,{children:"For nested queries, it uses the data loader. It consolidates the id of all the models in the 2nd query and issue one query for the 3rd."}),"\n",(0,r.jsx)(n.h2,{id:"using-entity-loader",children:"Using Entity Loader"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// join paths:\n// cake -> fruit\n// cake -> cake_filling -> filling\n//                         filling -> ingredient\n\nlet super_cake = cake::Entity::load()\n    .filter_by_id(42) // shorthand for .filter(cake::Column::Id.eq(42))\n    .with(fruit::Entity) // 1-1 uses join\n    .with((filling::Entity, ingredient::Entity)) // M-N uses data loader\n    .one(db)\n    .await?\n    .unwrap();\n\n// 3 queries are executed under the hood:\n// 1. SELECT FROM cake JOIN fruit WHERE id = $\n// 2. SELECT FROM filling JOIN cake_filling WHERE cake_id IN (..)\n// 3. SELECT FROM ingredient WHERE filling_id IN (..)\n\nsuper_cake\n    == cake::ModelEx {\n        id: 42,\n        name: "Black Forest".into(),\n        fruit: Some(\n            fruit::ModelEx {\n                name: "Cherry".into(),\n            }\n            .into(),\n        ),\n        fillings: vec![filling::ModelEx {\n            name: "Chocolate".into(),\n            ingredients: vec![ingredient::ModelEx {\n                name: "Syrup".into(),\n            }],\n        }],\n    };\n'})}),"\n",(0,r.jsx)(n.h2,{id:"under-the-hood",children:"Under the hood"}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"EntityLoader"})," struct will be generated for each Entity. It works ",(0,r.jsx)(n.em,{children:"conceptually"})," like the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl EntityLoader {\n    pub async fn all<C: sea_orm::ConnectionTrait>(mut self, db: &C) -> Result<Vec<Model>, DbErr> {\n        let mut select = self.select;\n\n        if self.with.fruit {\n            select = select.find_also(Entity, super::fruit::Entity);\n        }\n\n        let mut cakes = Vec::new();\n\n        for (mut cake, fruit) in select.all(db).await? {\n            cake.fruit = Some(fruit);\n            cakes.push(cake);\n        }\n\n        if self.with.filling {\n            let fillings = cakes.load_many(super::filling::Entity, db).await?;\n\n            for (cake, fillings) in cakes.iter_mut().zip(fillings) {\n                cake.fillings = fillings;\n            }\n        }\n\n        Ok(cakes)\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);