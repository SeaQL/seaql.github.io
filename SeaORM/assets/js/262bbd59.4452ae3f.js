"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[69023],{12004:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"basic-crud/raw-sql","title":"Raw SQL","description":"Query by raw SQL","source":"@site/versioned_docs/version-0.9.x/05-basic-crud/07-raw-sql.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/raw-sql","permalink":"/SeaORM/docs/0.9.x/basic-crud/raw-sql","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.9.x/05-basic-crud/07-raw-sql.md","tags":[],"version":"0.9.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756724548000,"sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JSON","permalink":"/SeaORM/docs/0.9.x/basic-crud/json"},"next":{"title":"One to One","permalink":"/SeaORM/docs/0.9.x/relation/one-to-one"}}');var s=a(74848),r=a(28453);const c={},i="Raw SQL",d={},l=[{value:"Query by raw SQL",id:"query-by-raw-sql",level:2},{value:"Get raw SQL query",id:"get-raw-sql-query",level:2},{value:"Use Raw Query &amp; Execute Interface",id:"use-raw-query--execute-interface",level:2},{value:"Get Custom Result using <code>query_one</code> and <code>query_all</code> methods",id:"get-custom-result-using-query_one-and-query_all-methods",level:3},{value:"Execute Query using <code>execute</code> method",id:"execute-query-using-execute-method",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"raw-sql",children:"Raw SQL"})}),"\n",(0,s.jsx)(n.h2,{id:"query-by-raw-sql",children:"Query by raw SQL"}),"\n",(0,s.jsxs)(n.p,{children:["You can select ",(0,s.jsx)(n.code,{children:"Model"})," from raw query, with appropriate syntax for binding parameters, i.e. ",(0,s.jsx)(n.code,{children:"?"})," for MySQL and SQLite, and ",(0,s.jsx)(n.code,{children:"$N"})," for PostgreSQL."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let cheese: Option<cake::Model> = cake::Entity::find()\n    .from_raw_sql(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" = $1"#,\n        vec![1.into()],\n    ))\n    .one(&db)\n    .await?;\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can also select a custom model. Here, we select all unique names from cake."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, FromQueryResult)]\npub struct UniqueCake {\n    name: String,\n}\n\nlet unique: Vec<UniqueCake> = UniqueCake::find_by_statement(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."name" FROM "cake" GROUP BY "cake"."name"#,\n        vec![],\n    ))\n    .all(&db)\n    .await?;\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can paginate ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.9/sea_orm/struct.SelectorRaw.html",children:(0,s.jsx)(n.code,{children:"SelectorRaw"})})," and fetch ",(0,s.jsx)(n.code,{children:"Model"})," in batch."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let mut cake_pages = cake::Entity::find()\n    .from_raw_sql(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" = $1"#,\n        vec![1.into()],\n    ))\n    .paginate(db, 50);\n \nwhile let Some(cakes) = cake_pages.fetch_and_next().await? {\n    // Do something on cakes: Vec<cake::Model>\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"get-raw-sql-query",children:"Get raw SQL query"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"build"})," and ",(0,s.jsx)(n.code,{children:"to_string"})," methods on any CRUD operations to get the database-specific raw SQL for debugging purposes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use sea_orm::DatabaseBackend;\n\nassert_eq!(\n    cake_filling::Entity::find_by_id((6, 8))\n        .build(DatabaseBackend::MySql)\n        .to_string(),\n    vec![\n        "SELECT `cake_filling`.`cake_id`, `cake_filling`.`filling_id` FROM `cake_filling`",\n        "WHERE `cake_filling`.`cake_id` = 6 AND `cake_filling`.`filling_id` = 8",\n    ].join(" ")\n);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"use-raw-query--execute-interface",children:"Use Raw Query & Execute Interface"}),"\n",(0,s.jsxs)(n.p,{children:["You can build SQL statements using ",(0,s.jsx)(n.code,{children:"sea-query"})," and query / execute it directly on the ",(0,s.jsx)(n.code,{children:"DatabaseConnection"})," interface inside SeaORM."]}),"\n",(0,s.jsxs)(n.h3,{id:"get-custom-result-using-query_one-and-query_all-methods",children:["Get Custom Result using ",(0,s.jsx)(n.code,{children:"query_one"})," and ",(0,s.jsx)(n.code,{children:"query_all"})," methods"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let query_res: Option<QueryResult> = db\n    .query_one(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\nlet query_res = query_res.unwrap();\nlet id: i32 = query_res.try_get("", "id")?;\n\nlet query_res_vec: Vec<QueryResult> = db\n    .query_all(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"execute-query-using-execute-method",children:["Execute Query using ",(0,s.jsx)(n.code,{children:"execute"})," method"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'let exec_res: ExecResult = db\n    .execute(Statement::from_string(\n        DatabaseBackend::MySql,\n        "DROP DATABASE IF EXISTS `sea`;".to_owned(),\n    ))\n    .await?;\nassert_eq!(exec_res.rows_affected(), 1);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>i});var t=a(96540);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);