"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[54991],{28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(96540);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}},47112:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"advanced-query/error-handling","title":"Error Handling","description":"All runtime errors in SeaORM is represented by DbErr.","source":"@site/versioned_docs/version-1.0.x/08-advanced-query/09-error-handling.md","sourceDirName":"08-advanced-query","slug":"/advanced-query/error-handling","permalink":"/SeaORM/docs/1.0.x/advanced-query/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/08-advanced-query/09-error-handling.md","tags":[],"version":"1.0.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1758931144000,"sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Active Model","permalink":"/SeaORM/docs/1.0.x/advanced-query/custom-active-model"},"next":{"title":"Create Table","permalink":"/SeaORM/docs/1.0.x/schema-statement/create-table"}}');var t=n(74848),s=n(28453);const i={},o="Error Handling",c={},d=[{value:"Handling common SQL errors",id:"handling-common-sql-errors",level:2},{value:"Handling database specific errors",id:"handling-database-specific-errors",level:2}];function l(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,t.jsxs)(r.p,{children:["All runtime errors in SeaORM is represented by ",(0,t.jsx)(r.a,{href:"https://docs.rs/sea-orm/*/sea_orm/error/enum.DbErr.html",children:(0,t.jsx)(r.code,{children:"DbErr"})}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"handling-common-sql-errors",children:"Handling common SQL errors"}),"\n",(0,t.jsxs)(r.p,{children:["You can use ",(0,t.jsx)(r.code,{children:"DbErr::sql_err()"})," method to convert SQL related error into common database errors ",(0,t.jsx)(r.code,{children:"SqlErr"}),", such as unique constraint or foreign key violation errors."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'assert!(matches!(\n    cake.into_active_model().insert(db).await\n        .expect_err("Insert a row with duplicated primary key")\n        .sql_err(),\n    Some(SqlErr::UniqueConstraintViolation(_))\n));\n\nassert!(matches!(\n    fk_cake.insert(db).await\n        .expect_err("Insert a row with invalid foreign key")\n        .sql_err(),\n    Some(SqlErr::ForeignKeyConstraintViolation(_))\n));\n'})}),"\n",(0,t.jsx)(r.h2,{id:"handling-database-specific-errors",children:"Handling database specific errors"}),"\n",(0,t.jsxs)(r.p,{children:["You can retrieve the database specific error code from ",(0,t.jsx)(r.code,{children:"RuntimeErr"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'let my_cake = cake::ActiveModel { id: Set(1), .. };\n\n// Insert a new cake with its primary key (`id` column) set to 1.\nlet cake = my_cake.save(db).await.expect("could not insert cake");\n\n// Insert the same row again and it failed because primary key of each row should be unique.\nlet error: DbErr = cake\n    .into_active_model()\n    .insert(db)\n    .await\n    .expect_err("inserting should fail due to duplicate primary key");\n\nmatch error {\n    DbErr::Exec(RuntimeErr::SqlxError(error)) => match error {\n        sqlx::Error::Database(e) => {\n            // We check the error code thrown by the database (MySQL in this case),\n            // `23000` means `ER_DUP_KEY`: we have a duplicate key in the table.\n            assert_eq!(e.code().unwrap(), "23000");\n        }\n        _ => panic!("Unexpected sqlx::Error kind"),\n    },\n    _ => panic!("Unexpected DbErr kind"),\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);