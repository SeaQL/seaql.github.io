"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[25297],{65813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"relation/multi-selects","title":"Multi Selects","description":"Nested Models","source":"@site/versioned_docs/version-1.1.x/06-relation/09-multi-selects.md","sourceDirName":"06-relation","slug":"/relation/multi-selects","permalink":"/SeaORM/docs/relation/multi-selects","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.1.x/06-relation/09-multi-selects.md","tags":[],"version":"1.1.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1750024439000,"sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bakery Schema","permalink":"/SeaORM/docs/relation/bakery-schema"},"next":{"title":"Robust & Correct","permalink":"/SeaORM/docs/write-test/testing"}}');var a=t(88790),i=t(77162);const s={},l="Multi Selects",o={},d=[{value:"Nested Models",id:"nested-models",level:2},{value:"Join with alias",id:"join-with-alias",level:3},{value:"Three-way Join",id:"three-way-join",level:2},{value:"Alternative shape",id:"alternative-shape",level:3},{value:"Three-Model select",id:"three-model-select",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"multi-selects",children:"Multi Selects"})}),"\n",(0,a.jsx)(n.h2,{id:"nested-models",children:"Nested Models"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"FromQueryResult"})," and ",(0,a.jsx)(n.code,{children:"DerivePartialModel"})," macros allows you to nest objects easily, simplifying the construction of complex queries."]}),"\n",(0,a.jsxs)(n.p,{children:["As a simple first example, we'd like to select ",(0,a.jsx)(n.code,{children:"Cake"})," with ",(0,a.jsx)(n.code,{children:"Bakery"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(FromQueryResult)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(FromQueryResult)]\nstruct Bakery {\n    #[sea_orm(from_alias = "bakery_id")]\n    id: i32,\n    #[sea_orm(from_alias = "bakery_name")]\n    brand: String,\n}\n\nlet cake: Cake = cake::Entity::find()\n    .select_only()\n    .column(cake::Column::Id)\n    .column(cake::Column::Name)\n    .column_as(bakery::Column::Id, "bakery_id")\n    .column_as(bakery::Column::Name, "bakery_name")\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_model()\n    .one(db)\n    .await?\n    .unwrap();\n\nassert_eq!(\n    cake,\n    Cake {\n        id: 1,\n        name: "Basque cheesecake".to_string(),\n        bakery: Some(Bakery {\n            id: 20,\n            brand: "Super Baker".to_string(),\n        })\n    }\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Because the tables ",(0,a.jsx)(n.code,{children:"cake"})," and ",(0,a.jsx)(n.code,{children:"bakery"})," have some duplicate column names, we'd have to do custom selects. ",(0,a.jsx)(n.code,{children:"select_only"})," here clears the default select list, and we apply aliases with ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/query/trait.QuerySelect.html#method.column_as",children:(0,a.jsx)(n.code,{children:"column_as"})}),". Then, in ",(0,a.jsx)(n.code,{children:"FromQueryResult"})," we use ",(0,a.jsx)(n.code,{children:"from_alias"})," to map the query result back to the nested struct."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/derive.DerivePartialModel.html",children:(0,a.jsx)(n.code,{children:"DerivePartialModel"})})," allows you to omit the custom selects and aliases.\nThe previous example can be written as:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(DerivePartialModel)] // FromQueryResult is no longer needed\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct Cake {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = "bakery::Entity", from_query_result)]\nstruct Bakery {\n    id: i32,\n    #[sea_orm(from_col = "Name")]\n    brand: String,\n}\n\n// same as previous example, but without the custom selects\nlet cake: Cake = cake::Entity::find()\n    .left_join(bakery::Entity)\n    .order_by_asc(cake::Column::Id)\n    .into_partial_model()\n    .one(db)\n    .await?\n    .unwrap();\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Under the hood, ",(0,a.jsx)(n.code,{children:"bakery_"})," prefix will be added to the column alias in the SQL query."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT\n    "cake"."id" AS "id",\n    "cake"."name" AS "name",\n    "bakery"."id" AS "bakery_id",\n    "bakery"."name" AS "bakery_brand"\nFROM "cake"\nLEFT JOIN "bakery" ON "cake"."bakery_id" = "bakery"."id"\nORDER BY "cake"."id" ASC LIMIT 1\n'})}),"\n",(0,a.jsx)(n.h3,{id:"join-with-alias",children:"Join with alias"}),"\n",(0,a.jsxs)(n.p,{children:["When the same table is joined more than once in the same query, it's necessary to use an alias. You can use the ",(0,a.jsx)(n.code,{children:"alias"})," attribute to select columns from an alias."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(DerivePartialModel)]\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct CakeFactory {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Factory>,\n}\n\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = "bakery::Entity", alias = "factory", from_query_result)]\nstruct Factory {\n    id: i32,\n    #[sea_orm(from_col = "name")]\n    plant: String,\n}\n\nlet cake_factory: CakeFactory = cake::Entity::find()\n    .join_as(\n        JoinType::LeftJoin,\n        cake::Relation::Bakery.def(),\n        Alias::new("factory"),\n    )\n    .order_by_asc(cake::Column::Id)\n    .into_partial_model()\n    .one(db)\n    .await?\n    .unwrap();\n'})}),"\n",(0,a.jsx)(n.p,{children:"Results in:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:'SELECT\n    "cake"."id" AS "id",\n    "cake"."name" AS "name",\n    "factory"."id" AS "bakery_id",\n    "factory"."name" AS "bakery_plant"\nFROM "cake"\nLEFT JOIN "bakery" AS "factory" ON "cake"."bakery_id" = "factory"."id"\nORDER BY "cake"."id" ASC LIMIT 1\n'})}),"\n",(0,a.jsx)(n.h2,{id:"three-way-join",children:"Three-way Join"}),"\n",(0,a.jsx)(n.p,{children:"Our join plan starts from Order:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"Order -> Customer\n      -> LineItem -> Cake\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "order::Entity", from_query_result)]\nstruct Order {\n    id: i32,\n    total: Decimal,\n    #[sea_orm(nested)]\n    customer: Customer,\n    #[sea_orm(nested)]\n    line: LineItem,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "customer::Entity", from_query_result)]\nstruct Customer {\n    name: String,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "lineitem::Entity", from_query_result)]\nstruct LineItem {\n    price: Decimal,\n    quantity: i32,\n    #[sea_orm(nested)]\n    cake: Cake,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct Cake {\n    name: String,\n}\n\nlet items: Vec<Order> = order::Entity::find()\n    .left_join(customer::Entity)\n    .left_join(lineitem::Entity)\n    .join(JoinType::LeftJoin, lineitem::Relation::Cake.def())\n    .order_by_asc(order::Column::Id)\n    .order_by_asc(lineitem::Column::Id)\n    .into_partial_model()\n    .all(db)\n    .await?;\n\nassert_eq!(\n    items,\n    [\n        Order {\n            id: 101,\n            total: Decimal::from(10),\n            customer: Customer {\n                name: "Bob".to_owned()\n            },\n            line: LineItem {\n                cake: Cake {\n                    name: "Cheesecake".to_owned()\n                },\n                price: Decimal::from(2),\n                quantity: 2,\n            }\n        },\n        ..\n    ]\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Since Cake is a related Entity of LineItem, not Order, it does not satisfy the trait bound of ",(0,a.jsx)(n.code,{children:"left_join"}),". It is thus necessary to use the more flexible ",(0,a.jsx)(n.code,{children:"join"})," method."]}),"\n",(0,a.jsx)(n.h3,{id:"alternative-shape",children:"Alternative shape"}),"\n",(0,a.jsx)(n.p,{children:"In the above, we make the nested structure resembles the topology of the join plan.\nBut there is no restriction. Indeed, SQL flattens the select into a flat table, so as long as all columns can be found,\nwe can freely arrange the result data structure."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "order::Entity", from_query_result)]\nstruct OrderItem {\n    #[sea_orm(nested)]\n    order: Order,\n    #[sea_orm(nested)]\n    customer: Customer,\n    #[sea_orm(nested)]\n    line: LineItem,\n    #[sea_orm(nested)]\n    cake: Cake,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "order::Entity", from_query_result)]\nstruct Order {\n    #[sea_orm(from_col = "id")]\n    order_id: i32,\n    total: Decimal,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "customer::Entity", from_query_result)]\nstruct Customer {\n    name: String,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "lineitem::Entity", from_query_result)]\nstruct LineItem {\n    price: Decimal,\n    quantity: i32,\n}\n\n#[derive(Debug, DerivePartialModel, PartialEq)]\n#[sea_orm(entity = "cake::Entity", from_query_result)]\nstruct Cake {\n    name: String,\n}\n\n// the exact same select query\n\nassert_eq!(\n    items,\n    [\n        OrderItem {\n            order: Order {\n                order_id: 101,\n                total: Decimal::from(10),\n            },\n            customer: Customer {\n                name: "Bob".to_owned()\n            },\n            line: LineItem {\n                price: Decimal::from(2),\n                quantity: 2,\n            },\n            cake: Cake {\n                name: "Cheesecake".to_owned()\n            },\n        },\n        ..\n    ]\n);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"three-model-select",children:"Three-Model select"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"Order -> Lineitem -> Cake\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"let items: Vec<(order::Model, Option<lineitem::Model>, Option<cake::Model>)> =\n    order::Entity::find()\n        .find_also_related(lineitem::Entity)\n        .and_also_related(cake::Entity)\n        .order_by_asc(order::Column::Id)\n        .order_by_asc(lineitem::Column::Id)\n        .all(db)\n        .await?;\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"find_also_related"})," is based on relations of the first entity.\n",(0,a.jsx)(n.code,{children:"and_also_related"})," is based on relations of the second entity."]}),"\n",(0,a.jsx)(n.p,{children:"To do this instead, you can write:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"Order -> Customer\n      -> LineItem\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"order::Entity::find()\n    .find_also_related(customer::Entity)\n    .find_also_related(lineitem::Entity)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(22374);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);