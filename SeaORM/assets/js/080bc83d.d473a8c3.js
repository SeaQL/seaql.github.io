"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[96881],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const r={},d=a.createContext(r);function i(e){const t=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(d.Provider,{value:t},e.children)}},33721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"basic-crud/update","title":"Update","description":"Update One","source":"@site/docs/05-basic-crud/05-update.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/update","permalink":"/SeaORM/docs/basic-crud/update","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-basic-crud/05-update.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760805209000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Insert","permalink":"/SeaORM/docs/basic-crud/insert"},"next":{"title":"Save","permalink":"/SeaORM/docs/basic-crud/save"}}');var r=n(74848),d=n(28453);const i={},s="Update",o={},l=[{value:"Update One",id:"update-one",level:2},{value:"Update Many",id:"update-many",level:2},{value:"Returning Updated Models",id:"returning-updated-models",level:2}];function c(e){const t={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"update",children:"Update"})}),"\n",(0,r.jsx)(t.h2,{id:"update-one",children:"Update One"}),"\n",(0,r.jsxs)(t.p,{children:["You will get a ",(0,r.jsx)(t.code,{children:"Model"})," from find result. If you want to save the model back into the database, you need to convert it into an ",(0,r.jsx)(t.code,{children:"ActiveModel"})," ",(0,r.jsx)(t.em,{children:"first"}),". The generated query will only include the ",(0,r.jsx)(t.code,{children:"Set"})," attributes."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'let pear: Option<fruit::Model> = Fruit::find_by_id(28).one(db).await?;\n\n// Into ActiveModel\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\n// Update name attribute\npear.name = Set("Sweet pear".to_owned());\n\n// SQL: `UPDATE "fruit" SET "name" = \'Sweet pear\' WHERE "id" = 28`\nlet pear: fruit::Model = pear.update(db).await?;\n'})}),"\n",(0,r.jsxs)(t.p,{children:["To update all attributes, you can convert ",(0,r.jsx)(t.code,{children:"Unchanged"})," into ",(0,r.jsx)(t.code,{children:"Set"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'// Into ActiveModel\nlet mut pear: fruit::ActiveModel = pear.into();\n\n// Update name attribute\npear.name = Set("Sweet pear".to_owned());\n\n// Set a specific attribute as "dirty" (force update)\npear.reset(fruit::Column::CakeId);\n// Or, set all attributes as "dirty" (force update)\npear.reset_all();\n\n// SQL: `UPDATE "fruit" SET "name" = \'Sweet pear\', "cake_id" = 10 WHERE "id" = 28`\nlet pear: fruit::Model = pear.update(db).await?;\n'})}),"\n",(0,r.jsx)(t.h2,{id:"update-many",children:"Update Many"}),"\n",(0,r.jsxs)(t.p,{children:["You can also update multiple rows in the database without finding each ",(0,r.jsx)(t.code,{children:"Model"})," with SeaORM select."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"// Bulk set attributes using ActiveModel\nlet update_result: UpdateResult = Fruit::update_many()\n    .set(pear)\n    .filter(fruit::Column::Id.is_in(vec![1]))\n    .exec(db)\n    .await?;\n\n// UPDATE `fruit` SET `cake_id` = 1 WHERE `fruit`.`name` LIKE '%Apple%'\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(1))\n    .filter(fruit::Column::Name.contains(\"Apple\"))\n    .exec(db)\n    .await?;\n"})}),"\n",(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsxs)(t.mdxAdmonitionTitle,{children:["Since ",(0,r.jsx)(t.code,{children:"2.0.0"})]}),(0,r.jsxs)(t.p,{children:["Added ",(0,r.jsx)(t.code,{children:"ColumnTrait::eq_any"})," as a shorthand for the ",(0,r.jsx)(t.code,{children:" = ANY"})," operator. Postgres only."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"Fruit::update_many().filter(fruit::Column::Id.eq_any(vec![2, 3]))\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"returning-updated-models",children:"Returning Updated Models"}),"\n",(0,r.jsxs)(t.p,{children:["Postgres only, SQLite requires the ",(0,r.jsx)(t.code,{children:"sqlite-use-returning-for-3_35"})," feature flag."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'let fruits: Vec<fruit::Model> = Fruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(1))\n    .filter(fruit::Column::Name.contains("Apple"))\n    .exec_with_returning(db)\n    .await?;\n\nassert_eq!(\n    fruits[0],\n    fruit::Model {\n        id: 2,\n        name: "Apple".to_owned(),\n        cake_id: Some(1),\n    }\n);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);