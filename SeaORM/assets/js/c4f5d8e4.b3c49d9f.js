"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[52634],{91523:(e,a,t)=>{t.r(a),t.d(a,{default:()=>B});var n=t(96540),s=t(13850),i=t(28774),o=t(44586);const r={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN",homepageBanner:"homepageBanner_mBTI",homepageLogo:"homepageLogo_ewR0"};var l=t(34164);const c={features:"features_xdhU",featureSvg:"featureSvg__8YW"};var d=t(85273),m=t(74848);const h=[{title:"Async",icon:(0,m.jsx)(d.vSZ,{size:26}),description:(0,m.jsx)(m.Fragment,{children:"Relying on SQLx, SeaORM is a new library with async support from day 1."})},{title:"Dynamic",icon:(0,m.jsx)(d.UyI,{size:26}),description:(0,m.jsx)(m.Fragment,{children:"Built upon SeaQuery, SeaORM allows you to build complex dynamic queries."})},{title:"Service Oriented",icon:(0,m.jsx)(d.dE0,{size:26}),description:(0,m.jsx)(m.Fragment,{children:"Quickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs."})},{title:"Production Ready",icon:(0,m.jsx)(d.mU9,{size:26}),description:(0,m.jsx)(m.Fragment,{children:"SeaORM is feature-rich, well-tested and used in production by companies and startups."})}];function p({icon:e,title:a,description:t}){return(0,m.jsx)("div",{className:(0,l.A)("col col--6"),children:(0,m.jsxs)("div",{style:{paddingBottom:"20px",paddingTop:"20px"},children:[(0,m.jsxs)("div",{style:{display:"flex"},children:[(0,m.jsx)("div",{style:{paddingRight:"22px"},children:e}),(0,m.jsx)("h3",{style:{fontSize:"20px",color:"var(--ifm-color-primary)"},children:a})]}),(0,m.jsx)("p",{children:t})]})})}function u(){return(0,m.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",c.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:"col col--11 col--offset-1",children:(0,m.jsx)("div",{className:"row",children:h.map((e,a)=>(0,m.jsx)(p,{...e},a))})})})})})}var g=t(11470),x=t(19365);const f={features:"features_f1J5"};var y=t(71765),v=t(95293),j=t(71983),w=t.n(j);(void 0!==t.g?t.g:window).Prism=w(),t(75342);const N=[{title:"Entity",summary:"You don't have to write this by hand! Entity files can be generated from an existing database with sea-orm-cli.",code:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}'},{title:"Select",summary:"SeaORM models 1-N and M-N relationships at the Entity level, letting you traverse many-to-many links through a junction table in a single call.",code:'// find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n\n// find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .all(db)\n    .await?;\n\n// find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n\n// find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n\n// find related models (eager): for 1-1 relations\nlet cake_with_fruit: Vec<(cake::Model, Option<fruit::Model>)> =\n    Cake::find().find_also_related(Fruit).all(db).await?;\n\n// find related models (eager): works for both 1-N and M-N relations\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> = Cake::find()\n    .find_with_related(Fruit) // for M-N relations, two joins are performed\n    .all(db) // rows are automatically consolidated by left entity\n    .await?;'},{title:"Nested Select",summary:"Partial models prevent overfetching by letting you querying only the fields you need; it also makes writing deeply nested relational queries simple.",code:'use sea_orm::DerivePartialModel;\n\n#[derive(DerivePartialModel)]\n#[sea_orm(entity = "cake::Entity")]\nstruct CakeWithFruit {\n    id: i32,\n    name: String,\n    #[sea_orm(nested)]\n    fruit: Option<fruit::Model>, // this can be a regular or another partial model\n}\n\nlet cakes: Vec<CakeWithFruit> = Cake::find()\n    .left_join(fruit::Entity) // no need to specify join condition\n    .into_partial_model() // only the columns in the partial model will be selected\n    .all(db)\n    .await?;'},{title:"Insert",summary:"SeaORM's ActiveModel lets you work directly with Rust data structures and persist them through a simple API.",code:'let apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default() // no need to set primary key\n};\n\nlet pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default()\n};\n\n// insert one: Active Record style\nlet apple = apple.insert(db).await?;\napple.id == 1;\n\n// insert one: repository style\nlet result = Fruit::insert(apple).exec(db).await?;\nresult.last_insert_id == 1;\n\n// insert many returning last insert id\nlet result = Fruit::insert_many([apple, pear]).exec(db).await?;\nresult.last_insert_id == Some(2);'},{title:"Insert (advanced)",summary:"You can take advantage of database specific features to perform upsert and idempotent insert.",code:'// insert many with returning (if supported by database)\nlet models: Vec<fruit::Model> = Fruit::insert_many([apple, pear])\n    .exec_with_returning(db)\n    .await?;\nmodels[0]\n    == fruit::Model {\n        id: 1, // database assigned value\n        name: "Apple".to_owned(),\n        cake_id: None,\n    };\n\n// insert with ON CONFLICT on primary key do nothing, with MySQL specific polyfill\nlet result = Fruit::insert_many([apple, pear])\n    .on_conflict_do_nothing()\n    .exec(db)\n    .await?;\n\nmatches!(result, TryInsertResult::Conflicted);'},{title:"Update",summary:"ActiveModel avoids race conditions by updating only the fields you've changed, never overwriting untouched columns. You can also craft complex bulk update queries with a fluent query building API.",code:'use fruit::Column::CakeId;\nuse sea_orm::sea_query::{Expr, Value};\n\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\npear.name = Set("Sweet pear".to_owned()); // update value of a single field\n\n// update one: only changed columns will be updated\nlet pear: fruit::Model = pear.update(db).await?;\n\n// update many: UPDATE "fruit" SET "cake_id" = "cake_id" + 2\n//               WHERE "fruit"."name" LIKE \'%Apple%\'\nFruit::update_many()\n    .col_expr(CakeId, Expr::col(CakeId).add(Expr::val(2)))\n    .filter(fruit::Column::Name.contains("Apple"))\n    .exec(db)\n    .await?;'},{title:"Save",summary:'You can perform "insert or update" operation with ActiveModel, making it easy to compose transactional operations.',code:'let banana = fruit::ActiveModel {\n    id: NotSet,\n    name: Set("Banana".to_owned()),\n    ..Default::default()\n};\n\n// create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\n\nbanana.id == Unchanged(2);\nbanana.name = Set("Banana Mongo".to_owned());\n\n// update, because primary key `id` is present\nlet banana = banana.save(db).await?;'},{title:"Delete",summary:"The same ActiveModel API consistent with insert and update.",code:'// delete one: Active Record style\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n\n// delete one: repository style\nlet orange = fruit::ActiveModel {\n    id: Set(2),\n    ..Default::default()\n};\nfruit::Entity::delete(orange).exec(db).await?;\n\n// delete many: DELETE FROM "fruit" WHERE "fruit"."name" LIKE \'%Orange%\'\nfruit::Entity::delete_many()\n    .filter(fruit::Column::Name.contains("Orange"))\n    .exec(db)\n    .await?;'},{title:"Ergonomic Raw SQL",summary:"Let SeaORM handle 90% of all the transactional queries.\nWhen your query is too complex to express, SeaORM still offer convenience in writing raw SQL.",code:'#[derive(FromQueryResult)]\nstruct CakeWithBakery {\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(FromQueryResult)]\nstruct Bakery {\n    #[sea_orm(alias = "bakery_name")]\n    name: String,\n}\n\nlet cake_ids = [2, 3, 4]; // expanded by the `..` operator\n\n// can use many APIs with raw SQL, including nested select\nlet cake: Option<CakeWithBakery> = CakeWithBakery::find_by_statement(raw_sql!(\n    Sqlite,\n    r#"SELECT "cake"."name", "bakery"."name" AS "bakery_name"\n       FROM "cake"\n       LEFT JOIN "bakery" ON "cake"."bakery_id" = "bakery"."id"\n       WHERE "cake"."id" IN ({..cake_ids})"#\n))\n.one(db)\n.await?;'}];function b(){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.A)(),{colorMode:a}=(0,v.G)(),[t,s]=(0,n.useState)(!1);(0,n.useEffect)(()=>{s(!0)},[]);const i=e.theme,r=e.darkTheme;return(0,m.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",f.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:(0,l.A)("col col--12"),children:(0,m.jsxs)("div",{className:"padding-horiz--md",children:[(0,m.jsx)("h2",{className:"text--center",children:"A quick taste of SeaORM"}),(0,m.jsx)(g.A,{className:(0,l.A)("aa"),defaultValue:N[0].title,values:N.map(({title:e,code:a})=>({label:e,value:e})),children:N.map(({title:e,summary:n,code:s},o)=>(0,m.jsxs)(x.A,{value:e,children:[(0,m.jsx)("p",{children:n}),(0,m.jsx)(y.f4,{code:s,theme:"dark"==a?r:i,language:"rust",children:({className:e,tokens:a,getLineProps:t,getTokenProps:n})=>(0,m.jsx)("pre",{className:`${e}`,children:a.map((e,a)=>(0,m.jsx)("div",{...t({line:e,key:a}),children:e.map((e,a)=>(0,m.jsx)("span",{...n({token:e,key:a})}))}))})},t)]},o))})]})})})})})}const _={features:"features_L4Q4",seaography:"seaography_o4rN"};function k(){return(0,m.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",_.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsxs)("div",{className:(0,l.A)("col col--12"),children:[(0,m.jsx)("h2",{className:"text--center",children:"SeaORM \u2795 GraphQL = \ud83e\udded Seaography"}),(0,m.jsxs)("p",{className:"text--center",children:["With ",(0,m.jsx)(i.A,{to:"/docs/graph-ql/seaography-intro/",children:"Seaography"}),", you can quickly launch a GraphQL server from SeaORM entities!"]}),(0,m.jsx)("div",{className:"text--center padding-horiz--md",children:(0,m.jsx)("img",{className:_.seaography,src:"/SeaORM/img/Seaography Screenshot.png"})})]})})})})}const S={features:"features_bzsK",sea_orm_pro_img:"sea_orm_pro_img_CtMH"};function M(){return(0,m.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",S.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsxs)("div",{className:(0,l.A)("col col--12"),children:[(0,m.jsx)("h2",{className:"text--center",children:"SeaORM \u2795 React = \ud83d\udda5\ufe0f SeaORM Pro "}),(0,m.jsxs)("p",{className:"text--center",children:["With ",(0,m.jsx)("a",{href:"https://www.sea-ql.org/sea-orm-pro/",children:"SeaORM Pro"}),", you can easily launch an admin panel for your application, frontend development skills not required!"]}),(0,m.jsx)("div",{className:"text--center padding-horiz--md",children:(0,m.jsx)("a",{href:"https://www.sea-ql.org/sea-orm-pro/",children:(0,m.jsx)("img",{className:S.sea_orm_pro_img,src:"https://www.sea-ql.org/sea-orm-pro/img/01_banner.png#light"})})})]})})})})}var A=t(4589);const R={features:"features_Em2x",lapdevLogo:"lapdevLogo_TnAI",openobserveLogo:"openobserveLogo_T1Ap",risingwaveLogo:"risingwaveLogo_fJmS",systeminitLogo:"systeminitLogo_Jbu_",spyglassLogo:"spyglassLogo_DddV",svixLogo:"svixLogo_ZdR9",mydatamyconsentLogo:"mydatamyconsentLogo_dng9",prefixdevLogo:"prefixdevLogo_ARcE",upvpnLogo:"upvpnLogo_kFbJ",anchorNormalText:"anchorNormalText_Wz4Z"},C=[{url:"https://caido.io/",logo:"img/other/caido-logo.png",desc:"A lightweight web security auditing toolkit",logoClassName:null},{url:"https://lap.dev/",logo:"img/other/lapdev-logo.png",desc:"Self-hosted remote development enviroment",logoClassName:R.lapdevLogo},{url:"https://openobserve.ai/",logo:"img/other/openobserve-logo.svg",desc:"Open-source observability platform",logoClassName:R.openobserveLogo},{url:"https://mydatamyconsent.com/",logo:"img/other/mydatamyconsent-logo.png",desc:"Online data sharing simplified",logoClassName:R.mydatamyconsentLogo},{url:"https://prefix.dev/",logo:"img/other/prefixdev-logo.png",desc:"Rethinking Package Management",logoClassName:R.prefixdevLogo},{url:"https://risingwave.com/",logo:"img/other/risingwave-logo.svg",desc:"Stream processing and management platform",logoClassName:R.risingwaveLogo},{url:"https://www.svix.com/",logo:"img/other/svix-logo.svg",desc:"The enterprise ready webhooks service",logoClassName:R.svixLogo},{url:"https://www.systeminit.com/",logo:"img/other/systeminit-logo.png",desc:"DevOps Automation Platform",logoClassName:R.systeminitLogo},{url:"https://upvpn.app/",logo:"img/other/upvpn-logo.png",desc:"Serverless Pay as you go VPN",logoClassName:R.upvpnLogo},{url:"https://zed.dev/",logo:"img/other/zed-logo.png",desc:"A high-performance, multiplayer code editor",logoClassName:R.zedLogo}];function L({url:e,logo:a,desc:t,logoClassName:n}){return(0,m.jsx)("div",{style:{height:"180px"},children:(0,m.jsx)("a",{href:e,target:"_blank",className:(0,l.A)(R.anchorNormalText),children:(0,m.jsxs)("div",{style:{paddingBottom:"20px",paddingTop:"20px",height:"100%",textAlign:"center",display:"flex",flexDirection:"column",justifyContent:"flex-end"},children:[(0,m.jsx)("div",{style:{display:"flex",justifyContent:"center"},children:(0,m.jsx)("img",{src:`${a}?t=${Date.now()}`,className:(0,l.A)(n),style:{width:"250px"}})}),(0,m.jsx)("p",{style:{margin:"0px",marginTop:"20px"},children:t})]})})})}const O={dots:!1,infinite:!0,pauseOnHover:!0,swipeToSlide:!0,slidesToShow:4,slidesToScroll:1,initialSlide:Math.floor(Math.random()*C.length),rows:1,autoplay:!0,speed:500,autoplaySpeed:3e3,responsive:[{breakpoint:1680,settings:{slidesToShow:3}},{breakpoint:900,settings:{slidesToShow:2}},{breakpoint:650,settings:{slidesToShow:1,rows:2}}]};function E(){return(0,m.jsx)("section",{id:"our-users",className:(0,l.A)("home-section",R.features),children:(0,m.jsxs)("div",{className:"container",children:[(0,m.jsx)("div",{className:"row",children:(0,m.jsxs)("div",{className:"col col--12",children:[(0,m.jsx)("h2",{className:"text--center",children:"Who's using SeaORM?"}),(0,m.jsx)("br",{}),(0,m.jsx)("p",{className:"text--center",children:"The following startups are using SeaORM:"})]})}),(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:"col col--12",children:(0,m.jsx)(A.A,{...O,children:C.map((e,a)=>(0,m.jsx)(L,{...e},a))})})}),(0,m.jsx)("br",{}),(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:"col col--12",children:(0,m.jsxs)("p",{className:"text--center",children:["For more projects, see ",(0,m.jsx)("a",{href:"https://github.com/SeaQL/sea-orm/blob/master/COMMUNITY.md#built-with-seaorm",target:"_blank",children:"Built with SeaORM"}),"."]})})})]})})}function T(){const{colorMode:e}=(0,v.G)();return(0,m.jsx)("section",{id:"our-users",className:(0,l.A)("home-section","home-section-alt",R.features),children:(0,m.jsxs)("div",{className:"container",children:[(0,m.jsx)("h2",{className:"text--center",children:"Gold Sponsors"}),(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:"col col--12",children:(0,m.jsxs)("div",{className:"row",children:[(0,m.jsx)("div",{className:"col col--4"}),(0,m.jsx)("div",{className:"col col--4",children:(0,m.jsx)("p",{className:"text--center",children:(0,m.jsx)("a",{href:"https://qdx.co/",target:"_blank",children:(0,m.jsx)("img",{src:"https://www.sea-ql.org/static/sponsors/QDX.svg",width:"180"})})})}),(0,m.jsx)("div",{className:"col col--4"})]})})}),(0,m.jsx)("br",{}),(0,m.jsx)("h2",{className:"text--center",children:"Silver Sponsors"}),(0,m.jsx)("div",{className:"row",children:(0,m.jsx)("div",{className:"col col--12",children:(0,m.jsxs)("div",{className:"row",children:[(0,m.jsx)("div",{className:"col col--2"}),(0,m.jsx)("div",{className:"col col--2"}),(0,m.jsx)("div",{className:"col col--2",children:(0,m.jsx)("p",{className:"text--center",children:(0,m.jsx)("a",{href:"https://www.digitalocean.com/",target:"_blank",children:(0,m.jsx)("img",{src:"https://www.sea-ql.org/static/sponsors/DigitalOcean.svg",width:"192"})})})}),(0,m.jsx)("div",{className:"col col--2",children:(0,m.jsx)("p",{className:"text--center",children:(0,m.jsx)("a",{href:"https://www.jetbrains.com/",target:"_blank",children:(0,m.jsx)("img",{src:"https://www.sea-ql.org/static/sponsors/JetBrains.svg",width:"192"})})})}),(0,m.jsx)("div",{className:"col col--2"}),(0,m.jsx)("div",{className:"col col--2"})]})})})]})})}const q={features:"features_nemC",mascot:"mascot_Rqr3"};function F(){return(0,m.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",q.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsxs)("div",{className:(0,l.A)("col col--12"),children:[(0,m.jsx)("h2",{className:"text--center",children:"Meet Terres, our official mascot"}),(0,m.jsxs)("p",{className:"text--center",children:["A friend of ",(0,m.jsx)("a",{href:"https://www.rustacean.net/",children:"Ferris"}),", Terres the hermit crab is a member of the Rustacean family."]}),(0,m.jsx)("div",{className:"text--center padding-horiz--md",children:(0,m.jsx)("img",{className:q.mascot,src:"/SeaORM/img/Terres.png"})})]})})})})}const P={sticker:"sticker_zgWb"};function D(){return(0,m.jsx)("section",{className:(0,l.A)("home-section",P.features),children:(0,m.jsx)("div",{className:"container",children:(0,m.jsx)("div",{className:"row",children:(0,m.jsxs)("div",{className:(0,l.A)("col col--12"),children:[(0,m.jsx)("h2",{className:"text--center",children:"Express your passion for Rust"}),(0,m.jsxs)("p",{className:"text--center",children:["The ",(0,m.jsx)("a",{href:"https://www.sea-ql.org/sticker-pack/",target:"_blank",children:"Rustacean Sticker Pack \ud83e\udd80"})," are made with a premium water-resistant vinyl with a unique matte finish.",(0,m.jsx)("br",{}),"All proceeds contributes directly to open-source development."]}),(0,m.jsx)("div",{className:"text--center padding-horiz--md",children:(0,m.jsx)("a",{href:"https://www.sea-ql.org/sticker-pack/",target:"_blank",children:(0,m.jsx)("img",{className:P.sticker,src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})})})]})})})})}function I(){const{siteConfig:e}=(0,o.A)();return(0,m.jsx)("header",{className:r.heroBanner,children:(0,m.jsxs)("div",{className:"container",children:[(0,m.jsx)("img",{className:r.homepageLogo,width:"90%",src:"/SeaORM/img/SeaORM logo.png"}),(0,m.jsx)("img",{className:r.homepageBanner,width:"90%",src:"/SeaORM/img/SeaORM banner.png"}),(0,m.jsx)("h2",{className:"hero__subtitle",children:e.tagline}),(0,m.jsx)("br",{}),(0,m.jsx)("div",{className:r.buttons,children:(0,m.jsx)(i.A,{className:"button button--primary button--lg",to:"/docs/index",children:"Getting Started"})})]})})}function B(){const{siteConfig:e}=(0,o.A)();return(0,m.jsxs)(s.A,{description:e.tagline,children:[(0,m.jsx)(I,{}),(0,m.jsxs)("main",{children:[(0,m.jsx)(u,{}),(0,m.jsx)(b,{}),(0,m.jsx)(k,{}),(0,m.jsx)(M,{}),(0,m.jsx)(E,{}),(0,m.jsx)(T,{}),(0,m.jsx)(D,{}),(0,m.jsx)(F,{})]})]})}}}]);