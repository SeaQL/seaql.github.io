"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[19418],{15022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"generate-entity/entity-structure","title":"Entity Structure","description":"Let\'s look at a simple Cake entity.","source":"@site/versioned_docs/version-0.6.x/03-generate-entity/02-entity-structure.md","sourceDirName":"03-generate-entity","slug":"/generate-entity/entity-structure","permalink":"/SeaORM/docs/0.6.x/generate-entity/entity-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.6.x/03-generate-entity/02-entity-structure.md","tags":[],"version":"0.6.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760084251000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using sea-orm-cli","permalink":"/SeaORM/docs/0.6.x/generate-entity/sea-orm-cli"},"next":{"title":"Expanded Entity Structure","permalink":"/SeaORM/docs/0.6.x/generate-entity/expanded-entity-structure"}}');var r=t(74848),s=t(28453);const l={},a="Entity Structure",d={},c=[{value:"Entity",id:"entity",level:2},{value:"Table Name",id:"table-name",level:3},{value:"Column",id:"column",level:2},{value:"Column Name",id:"column-name",level:3},{value:"Column Type",id:"column-type",level:3},{value:"Additional Properties",id:"additional-properties",level:3},{value:"Ignore Attribute",id:"ignore-attribute",level:3},{value:"Primary Key",id:"primary-key",level:2},{value:"Auto Increment",id:"auto-increment",level:3},{value:"Composite Key",id:"composite-key",level:3},{value:"Relation",id:"relation",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"entity-structure",children:"Entity Structure"})}),"\n",(0,r.jsxs)(n.p,{children:["Let's look at a simple ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/tests_cfg/cake.rs",children:"Cake"})," entity."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"entity",children:"Entity"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DeriveEntityModel"})," macro does all the heavy lifting of defining an ",(0,r.jsx)(n.code,{children:"Entity"})," with associating ",(0,r.jsx)(n.code,{children:"Model"}),", ",(0,r.jsx)(n.code,{children:"Column"})," and ",(0,r.jsx)(n.code,{children:"PrimaryKey"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"table-name",children:"Table Name"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"table_name"})," attribute specifies the corresponding table in the database.\nOptionally, you can also specify the database schema or database name by ",(0,r.jsx)(n.code,{children:"schema_name"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(table_name = "cake", schema_name = "public")]\npub struct Model { ... }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"column",children:"Column"}),"\n",(0,r.jsx)(n.h3,{id:"column-name",children:"Column Name"}),"\n",(0,r.jsxs)(n.p,{children:["All column names are assumed to be in snake-case. You can override the column name by specifying the ",(0,r.jsx)(n.code,{children:"column_name"})," attribute."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_name = "name")]\npub name: String\n'})}),"\n",(0,r.jsx)(n.h3,{id:"column-type",children:"Column Type"}),"\n",(0,r.jsx)(n.p,{children:"The column type will be derived automatically with the following mapping:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Rust type"}),(0,r.jsxs)(n.th,{children:["Database Type ",(0,r.jsx)("br",{})," (",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.6/sea_orm/entity/enum.ColumnType.html",children:(0,r.jsx)(n.code,{children:"ColumnType"})}),")"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Char"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"String"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"u8, i8"}),(0,r.jsx)(n.td,{children:"TinyInteger"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"u16, i16"}),(0,r.jsx)(n.td,{children:"SmallInteger"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"u32, i32"}),(0,r.jsx)(n.td,{children:"Integer"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"u64, i64"}),(0,r.jsx)(n.td,{children:"BigInteger"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"f32"}),(0,r.jsx)(n.td,{children:"Float"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"f64"}),(0,r.jsx)(n.td,{children:"Double"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"bool"}),(0,r.jsx)(n.td,{children:"Boolean"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NaiveDate"}),(0,r.jsx)(n.td,{children:"Date"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NaiveTime"}),(0,r.jsx)(n.td,{children:"Time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DateTime (chrono::NaiveDateTime)"}),(0,r.jsx)(n.td,{children:"DateTime"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:["DateTimeLocal (chrono::DateTime<Local>) ",(0,r.jsx)("br",{}),"DateTimeUtc (chrono::DateTime<Utc>)"]}),(0,r.jsx)(n.td,{children:"Timestamp"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"DateTimeWithTimeZone (chrono::DateTime<FixedOffset>)"}),(0,r.jsx)(n.td,{children:"TimestampWithTimeZone"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Uuid (uuid::Uuid)"}),(0,r.jsx)(n.td,{children:"Uuid"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Json (serde_json::Value)"}),(0,r.jsx)(n.td,{children:"Json"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Decimal (rust_decimal::Decimal)"}),(0,r.jsx)(n.td,{children:"Decimal"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Vec<u8>"}),(0,r.jsx)(n.td,{children:"Binary"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You can override the default mappings between a Rust type and ",(0,r.jsx)(n.code,{children:"ColumnType"})," by the ",(0,r.jsx)(n.code,{children:"column_type"})," attribute."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_type = "Text")]\npub name: String\n'})}),"\n",(0,r.jsx)(n.h3,{id:"additional-properties",children:"Additional Properties"}),"\n",(0,r.jsxs)(n.p,{children:["You can add additional properties ",(0,r.jsx)(n.code,{children:"default_value"}),", ",(0,r.jsx)(n.code,{children:"unique"}),", ",(0,r.jsx)(n.code,{children:"indexed"})," and ",(0,r.jsx)(n.code,{children:"nullable"})," to a column."]}),"\n",(0,r.jsxs)(n.p,{children:["If you specified a custom ",(0,r.jsx)(n.code,{children:"column_type"})," for an optional attribute, you must also specify ",(0,r.jsx)(n.code,{children:"nullable"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_type = "Text", default_value = "Sam", unique, indexed, nullable)]\npub name: Option<String>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ignore-attribute",children:"Ignore Attribute"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to ignore a particular model attribute such that it maps to no database column, you can use the ",(0,r.jsx)(n.code,{children:"ignore"})," annotation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(ignore)]\npub ignore_me: String\n"})}),"\n",(0,r.jsx)(n.h2,{id:"primary-key",children:"Primary Key"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"primary_key"})," attribute to mark a column as the primary key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key)]\npub id: i32\n"})}),"\n",(0,r.jsx)(n.h3,{id:"auto-increment",children:"Auto Increment"}),"\n",(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"auto_increment"})," is implied for ",(0,r.jsx)(n.code,{children:"primary_key"})," column. Override it by specifying ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key, auto_increment = false)]\npub id: i32\n"})}),"\n",(0,r.jsx)(n.h3,{id:"composite-key",children:"Composite Key"}),"\n",(0,r.jsxs)(n.p,{children:["This is usually the case in junction tables, where a two-column tuple is used as the primary key. Simply annotate multiple columns to define a composite primary key. By default, ",(0,r.jsx)(n.code,{children:"auto_increment"})," is ",(0,r.jsx)(n.code,{children:"false"})," for composite key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Model {\n    #[sea_orm(primary_key)]\n    pub cake_id: i32,\n    #[sea_orm(primary_key)]\n    pub fruit_id: i32,\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"relation",children:"Relation"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DeriveRelation"})," macro is a simple wrapper to impl the ",(0,r.jsx)(n.code,{children:"RelationTrait"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"expands into"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_many(super::fruit::Entity).into(),\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Learn more about relations in the next section."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);