"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[46389],{16621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"advanced-query/aggregate-function","title":"Aggregate Functions","description":"You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.","source":"@site/versioned_docs/version-1.0.x/08-advanced-query/03-aggregate-function.md","sourceDirName":"08-advanced-query","slug":"/advanced-query/aggregate-function","permalink":"/SeaORM/docs/1.0.x/advanced-query/aggregate-function","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/08-advanced-query/03-aggregate-function.md","tags":[],"version":"1.0.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1749812133000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Conditional Expressions","permalink":"/SeaORM/docs/1.0.x/advanced-query/conditional-expression"},"next":{"title":"Custom Joins","permalink":"/SeaORM/docs/1.0.x/advanced-query/custom-joins"}}');var o=t(88790),s=t(77162);const c={},r="Aggregate Functions",i={},d=[{value:"Group By",id:"group-by",level:2},{value:"Having",id:"having",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"aggregate-functions",children:"Aggregate Functions"})}),"\n",(0,o.jsxs)(n.p,{children:["You can group results selected from SeaORM find with the ",(0,o.jsx)(n.code,{children:"group_by"})," method. If you wish to further restrict the grouped result set, the ",(0,o.jsx)(n.code,{children:"having"})," method can help you achieve that."]}),"\n",(0,o.jsx)(n.h2,{id:"group-by",children:"Group By"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"group_by"})," method can take a column of the entity or a complex ",(0,o.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/expr/enum.SimpleExpr.html",children:(0,o.jsx)(n.code,{children:"sea_query::SimpleExpr"})}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column(cake::Column::Name)\n        .group_by(cake::Column::Name)\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."name" FROM "cake" GROUP BY "cake"."name""#\n);\n\nassert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column_as(cake::Column::Id.count(), "count")\n        .column_as(cake::Column::Id.sum(), "sum_of_id")\n        .group_by(cake::Column::Name)\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT COUNT("cake"."id") AS "count", SUM("cake"."id") AS "sum_of_id" FROM "cake" GROUP BY "cake"."name""#\n);\n'})}),"\n",(0,o.jsx)(n.h2,{id:"having",children:"Having"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"having"})," method can take any conditional expressions introduced in the previous section."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .having(cake::Column::Id.eq(4))\n        .having(cake::Column::Id.eq(5))\n        .build(DbBackend::MySql)\n        .to_string(),\n    "SELECT `cake`.`id`, `cake`.`name` FROM `cake` HAVING `cake`.`id` = 4 AND `cake`.`id` = 5"\n);\n\nassert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column_as(cake::Column::Id.count(), "count")\n        .column_as(cake::Column::Id.sum(), "sum_of_id")\n        .group_by(cake::Column::Name)\n        .having(Expr::col(Alias::new("count")).gt(6))\n        .build(DbBackend::MySql)\n        .to_string(),\n    "SELECT COUNT(`cake`.`id`) AS `count`, SUM(`cake`.`id`) AS `sum_of_id` FROM `cake` GROUP BY `cake`.`name` HAVING `count` > 6"\n);\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Aggregation functions such as ",(0,o.jsx)(n.code,{children:"max"}),", ",(0,o.jsx)(n.code,{children:"min"}),", ",(0,o.jsx)(n.code,{children:"sum"}),", ",(0,o.jsx)(n.code,{children:"count"})," are available in ",(0,o.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/trait.ColumnTrait.html",children:(0,o.jsx)(n.code,{children:"ColumnTrait"})}),"."]})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var a=t(22374);const o={},s=a.createContext(o);function c(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);