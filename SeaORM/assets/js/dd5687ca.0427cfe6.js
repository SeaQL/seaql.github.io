"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[8385],{26512:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"generate-entity/enumeration","title":"Enumeration","description":"You can use Rust enums in model where the values are mapped to a database string, integer or native enum.","source":"@site/versioned_docs/version-0.12.x/04-generate-entity/04-enumeration.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/enumeration","permalink":"/SeaORM/docs/0.12.x/generate-entity/enumeration","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/04-generate-entity/04-enumeration.md","tags":[],"version":"0.12.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1754048920000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Expanded Entity Structure","permalink":"/SeaORM/docs/0.12.x/generate-entity/expanded-entity-structure"},"next":{"title":"New Type","permalink":"/SeaORM/docs/0.12.x/generate-entity/newtype"}}');var r=t(88790),i=t(77162);const s={},o="Enumeration",l={},m=[{value:"String",id:"string",level:3},{value:"Integers",id:"integers",level:3},{value:"Native Database Enum",id:"native-database-enum",level:2},{value:"MySQL",id:"mysql",level:3},{value:"Postgres",id:"postgres",level:3},{value:"1. Custom TYPE statement",id:"1-custom-type-statement",level:4},{value:"2. <code>create_enum_from_active_enum</code>",id:"2-create_enum_from_active_enum",level:4},{value:"Implementations",id:"implementations",level:2},{value:"Using ActiveEnum on Model",id:"using-activeenum-on-model",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"enumeration",children:"Enumeration"})}),"\n",(0,r.jsx)(n.p,{children:"You can use Rust enums in model where the values are mapped to a database string, integer or native enum."}),"\n",(0,r.jsx)(n.h3,{id:"string",children:"String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"integers",children:"Integers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    #[sea_orm(num_value = 0)]\n    Black,\n    #[sea_orm(num_value = 1)]\n    White,\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Alternatively, you could write:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    Black = 0,\n    White = 1,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"native-database-enum",children:"Native Database Enum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mysql",children:"MySQL"}),"\n",(0,r.jsx)(n.p,{children:"MySQL enum is just part of the column definition, and cannot be reused for different tables."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'Table::create()\n    .table(Posts::TableName)\n    .col(\n        ColumnDef::new(Posts::ColumnName)\n            .enumeration(Alias::new("tea"), [Alias::new("EverydayTea"), Alias::new("BreakfastTea")]),\n    )\n\n"CREATE TABLE `table_name` (`column_name` ENUM(\'EverydayTea\', \'BreakfastTea\'))",\n'})}),"\n",(0,r.jsx)(n.h3,{id:"postgres",children:"Postgres"}),"\n",(0,r.jsxs)(n.p,{children:["If you are using Postgres, the enum has to be created in a separate ",(0,r.jsx)(n.code,{children:"Type"})," statement in a migration, you can create it with:"]}),"\n",(0,r.jsx)(n.h4,{id:"1-custom-type-statement",children:"1. Custom TYPE statement"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/sea-orm-migration/tests/common/migration/m20220118_000004_create_tea_enum.rs",children:"Full example"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// run this in migration:\n\nmanager\n    .create_type(\n        // CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')\n        Type::create()\n            .as_enum(Alias::new("tea"))\n            .values([Alias::new("EverydayTea"), Alias::new("BreakfastTea")])\n            .to_owned(),\n    )\n    .await?;\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"2-create_enum_from_active_enum",children:["2. ",(0,r.jsx)(n.code,{children:"create_enum_from_active_enum"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"// we can do this in migration:\n\nuse sea_orm::{Schema, DbBackend};\nlet schema = Schema::new(DbBackend::Postgres);\n\nmanager\n    .create_type(\n        // CREATE TYPE \"tea\" AS ENUM ('EverydayTea', 'BreakfastTea')\n        schema.create_enum_from_active_enum::<Tea>(),\n    )\n    .await?;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,r.jsxs)(n.p,{children:["You can implement ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.ActiveEnum.html",children:(0,r.jsx)(n.code,{children:"ActiveEnum"})})," by using the ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/derive.DeriveActiveEnum.html",children:(0,r.jsx)(n.code,{children:"DeriveActiveEnum"})})," macro."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Debug, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(\n    rs_type = "String",\n    db_type = "String(Some(1))",\n    enum_name = "category"\n)]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n'})}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"For illustration purpose, this is roughly what the macro implements:"}),(0,r.jsx)("div",{children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Debug, PartialEq, Eq, EnumIter)]\npub enum Category {\n    Big,\n    Small,\n}\n\n// Implementing manually\nimpl ActiveEnum for Category {\n    // The macro attribute `rs_type` is being pasted here\n    type Value = String;\n\n    // By default, the name of Rust enum in camel case if `enum_name` was not provided explicitly\n    fn name() -> String {\n        "category".to_owned()\n    }\n\n    // Map Rust enum variants to corresponding `num_value` or `string_value`\n    fn to_value(&self) -> Self::Value {\n        match self {\n            Self::Big => "B",\n            Self::Small => "S",\n        }\n        .to_owned()\n    }\n\n    // Map `num_value` or `string_value` to corresponding Rust enum variants\n    fn try_from_value(v: &Self::Value) -> Result<Self, DbErr> {\n        match v.as_ref() {\n            "B" => Ok(Self::Big),\n            "S" => Ok(Self::Small),\n            _ => Err(DbErr::Type(format!(\n                "unexpected value for Category enum: {}",\n                v\n            ))),\n        }\n    }\n\n    // The macro attribute `db_type` is being pasted here\n    fn db_type() -> ColumnDef {\n        ColumnType::String(Some(1)).def()\n    }\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"using-activeenum-on-model",children:"Using ActiveEnum on Model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n// Define the `Category` active enum\n#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    // Represents a db column using `Category` active enum\n    pub category: Category,\n    pub category_opt: Option<Category>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(22374);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);