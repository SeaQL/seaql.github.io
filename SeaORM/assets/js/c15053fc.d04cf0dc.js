"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[22465],{27214:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"migration/writing-migration","title":"Writing Migration","description":"Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.","source":"@site/versioned_docs/version-0.6.x/05-migration/02-writing-migration.md","sourceDirName":"05-migration","slug":"/migration/writing-migration","permalink":"/SeaORM/docs/0.6.x/migration/writing-migration","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.6.x/05-migration/02-writing-migration.md","tags":[],"version":"0.6.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1753876909000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Setting Up Migration","permalink":"/SeaORM/docs/0.6.x/migration/setting-up-migration"},"next":{"title":"Running Migration","permalink":"/SeaORM/docs/0.6.x/migration/running-migration"}}');var t=a(88790),i=a(77162);const s={},o="Writing Migration",l={},c=[{value:"Creating Migration File",id:"creating-migration-file",level:2},{value:"Defining Migration",id:"defining-migration",level:2},{value:"SeaQuery",id:"seaquery",level:3},{value:"Schema Creation Methods",id:"schema-creation-methods",level:4},{value:"Schema Mutation Methods",id:"schema-mutation-methods",level:4},{value:"Schema Inspection Methods",id:"schema-inspection-methods",level:4},{value:"Raw SQL",id:"raw-sql",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"writing-migration",children:"Writing Migration"})}),"\n",(0,t.jsxs)(n.p,{children:["Each migration contains two methods: ",(0,t.jsx)(n.code,{children:"up"})," and ",(0,t.jsx)(n.code,{children:"down"}),". The ",(0,t.jsx)(n.code,{children:"up"})," method is used to alter the database schema, such as adding new tables, columns or indexes, while the ",(0,t.jsx)(n.code,{children:"down"})," method revert the actions performed in the ",(0,t.jsx)(n.code,{children:"up"})," method."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-migration-file",children:"Creating Migration File"}),"\n",(0,t.jsxs)(n.p,{children:["You can create migration by duplicating an existing migration file or copy the template below. Remember to name the file according to naming convention ",(0,t.jsx)(n.code,{children:"mYYYYMMDD_HHMMSS_migration_name.rs"})," and update the ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-schema/0.5/sea_schema/migration/trait.MigrationName.html#tymethod.name",children:(0,t.jsx)(n.code,{children:"MigrationName::name"})})," method accordingly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:'title="migration/src/m20220101_000001_create_table.rs"',children:'use sea_schema::migration::prelude::*;\n\npub struct Migration;\n\nimpl MigrationName for Migration {\n    fn name(&self) -> &str {\n        "m20220101_000001_create_table"\n    }\n}\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table( ... )\n            .await\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .drop_table( ... )\n            .await\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Also, you have to include the new migration in ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-schema/0.5/sea_schema/migration/migrator/trait.MigratorTrait.html#tymethod.migrations",children:(0,t.jsx)(n.code,{children:"MigratorTrait::migrations"})})," method. Note that the migrations should be sorted in chronological order."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:'title="migration/src/lib.rs"',children:"pub use sea_schema::migration::*;\n\nmod m20220101_000001_create_table;\n\npub struct Migrator;\n\n#[async_trait::async_trait]\nimpl MigratorTrait for Migrator {\n    fn migrations() -> Vec<Box<dyn MigrationTrait>> {\n        vec![\n            Box::new(m20220101_000001_create_table::Migration),\n        ]\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"defining-migration",children:"Defining Migration"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-schema/0.5/sea_schema/migration/manager/struct.SchemaManager.html",children:(0,t.jsx)(n.code,{children:"SchemaManager"})})," helps you define migration in SeaQuery or in raw SQL"]}),"\n",(0,t.jsx)(n.h3,{id:"seaquery",children:"SeaQuery"}),"\n",(0,t.jsxs)(n.p,{children:["Click ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query#usage",children:"here"})," to take a quick tour of SeaQuery."]}),"\n",(0,t.jsx)(n.h4,{id:"schema-creation-methods",children:"Schema Creation Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use entity::post;\n\nmanager\n    .create_table(\n        sea_query::Table::create()\n            .table(post::Entity)\n            .if_not_exists()\n            .col(\n                ColumnDef::new(post::Column::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(ColumnDef::new(post::Column::Title).string().not_null())\n            .col(ColumnDef::new(post::Column::Text).string().not_null())\n            .to_owned()\n    )\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"If you don't have SeaORM entities defined?"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager\n    .create_table(\n        Table::create()\n            .table(Post::Table)\n            .if_not_exists()\n            .col(\n                ColumnDef::new(Post::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(ColumnDef::new(Post::Title).string().not_null())\n            .col(ColumnDef::new(Post::Text).string().not_null())\n            .to_owned()\n    )\n\n// Define the identifiers using SeaQuery's `Iden` macro\n#[derive(Iden)]\npub enum Post {\n    Table,\n    Id,\n    Title,\n    Text,\n}\n"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create Index"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.create_index(sea_query::Index::create())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create Foreign Key"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.create_foreign_key(sea_query::ForeignKey::create())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create Data Type (PostgreSQL only)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.create_type(sea_query::Type::create())\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"schema-mutation-methods",children:"Schema Mutation Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Drop Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use entity::post;\n\nmanager\n    .drop_table(\n        sea_query::Table::drop()\n            .table(post::Entity)\n            .to_owned()\n    )\n"})}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"If you don't have SeaORM entities defined?"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager\n    .drop_table(\n        sea_query::Table::drop()\n            .table(Post::Table)\n            .to_owned()\n    )\n\n// Define the identifiers using SeaQuery's `Iden` macro\n#[derive(Iden)]\npub enum Post {\n    Table,\n    Id,\n    Title,\n    Text,\n}\n"})})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Alter Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.alter_table(sea_query::Table::alter())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rename Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.rename_table(sea_query::Table::rename())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Truncate Table"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.truncate_table(sea_query::Table::truncate())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Drop Index"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.drop_index(sea_query::Index::drop())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Drop Foreign Key"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.drop_foreign_key(sea_query::ForeignKey::drop())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Alter Data Type (PostgreSQL only)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.alter_type(sea_query::Type::alter())\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Drop Data Type (PostgreSQL only)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.drop_type(sea_query::extension::postgres::Type())\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"schema-inspection-methods",children:"Schema Inspection Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Has Table","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.has_table(table_name)\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Has Column","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"manager.has_column(table_name, column_name)\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"raw-sql",children:"Raw SQL"}),"\n",(0,t.jsx)(n.p,{children:"Besides, you can define migration in raw SQL."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_orm::Statement;\nuse sea_schema::migration::prelude::*;\n\npub struct Migration;\n\nimpl MigrationName for Migration {\n    fn name(&self) -> &str {\n        "m20220101_000001_create_table"\n    }\n}\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let sql = "CREATE TABLE `cake` ( `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY, `name` varchar(255) NOT NULL )";\n        let stmt = Statement::from_string(manager.get_database_backend(), sql.to_owned());\n        manager.get_connection().execute(stmt).await.map(|_| ())\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let sql = "DROP TABLE `cake`";\n        let stmt = Statement::from_string(manager.get_database_backend(), sql.to_owned());\n        manager.get_connection().execute(stmt).await.map(|_| ())\n    }\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},77162:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var r=a(22374);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);