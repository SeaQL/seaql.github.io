"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[67234],{40027:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"2.0.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Index","href":"/SeaORM/docs/index","docId":"index","unlisted":false},{"type":"category","label":"Introduction","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"What is an ORM","href":"/SeaORM/docs/introduction/orm","docId":"introduction/orm","unlisted":false},{"type":"link","label":"Async Programming","href":"/SeaORM/docs/introduction/async","docId":"introduction/async","unlisted":false},{"type":"link","label":"SeaORM Concepts","href":"/SeaORM/docs/introduction/sea-orm","docId":"introduction/sea-orm","unlisted":false},{"type":"link","label":"Tutorial & Examples","href":"/SeaORM/docs/introduction/tutorial","docId":"introduction/tutorial","unlisted":false}]},{"type":"category","label":"Installation & Configuration","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Database & Async Runtime","href":"/SeaORM/docs/install-and-config/database-and-async-runtime","docId":"install-and-config/database-and-async-runtime","unlisted":false},{"type":"link","label":"Database Connection","href":"/SeaORM/docs/install-and-config/connection","docId":"install-and-config/connection","unlisted":false},{"type":"link","label":"Debug Log","href":"/SeaORM/docs/install-and-config/debug-log","docId":"install-and-config/debug-log","unlisted":false}]},{"type":"category","label":"Migration","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Setting Up Migration","href":"/SeaORM/docs/migration/setting-up-migration","docId":"migration/setting-up-migration","unlisted":false},{"type":"link","label":"Writing Migration","href":"/SeaORM/docs/migration/writing-migration","docId":"migration/writing-migration","unlisted":false},{"type":"link","label":"Running Migration","href":"/SeaORM/docs/migration/running-migration","docId":"migration/running-migration","unlisted":false},{"type":"link","label":"Seeding Data","href":"/SeaORM/docs/migration/seeding-data","docId":"migration/seeding-data","unlisted":false}]},{"type":"category","label":"Generating Entities","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Using sea-orm-cli","href":"/SeaORM/docs/generate-entity/sea-orm-cli","docId":"generate-entity/sea-orm-cli","unlisted":false},{"type":"link","label":"Entity Format","href":"/SeaORM/docs/generate-entity/entity-format","docId":"generate-entity/entity-format","unlisted":false},{"type":"link","label":"Column Types","href":"/SeaORM/docs/generate-entity/column-types","docId":"generate-entity/column-types","unlisted":false},{"type":"link","label":"ActiveEnum","href":"/SeaORM/docs/generate-entity/enumeration","docId":"generate-entity/enumeration","unlisted":false},{"type":"link","label":"New Type","href":"/SeaORM/docs/generate-entity/newtype","docId":"generate-entity/newtype","unlisted":false},{"type":"link","label":"Entity First Workfllow","href":"/SeaORM/docs/generate-entity/entity-first","docId":"generate-entity/entity-first","unlisted":false}]},{"type":"category","label":"Basic CRUD","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Basic Schema","href":"/SeaORM/docs/basic-crud/basic-schema","docId":"basic-crud/basic-schema","unlisted":false},{"type":"link","label":"Select","href":"/SeaORM/docs/basic-crud/select","docId":"basic-crud/select","unlisted":false},{"type":"link","label":"ActiveModel","href":"/SeaORM/docs/basic-crud/active-model","docId":"basic-crud/active-model","unlisted":false},{"type":"link","label":"Insert","href":"/SeaORM/docs/basic-crud/insert","docId":"basic-crud/insert","unlisted":false},{"type":"link","label":"Update","href":"/SeaORM/docs/basic-crud/update","docId":"basic-crud/update","unlisted":false},{"type":"link","label":"Save","href":"/SeaORM/docs/basic-crud/save","docId":"basic-crud/save","unlisted":false},{"type":"link","label":"Delete","href":"/SeaORM/docs/basic-crud/delete","docId":"basic-crud/delete","unlisted":false},{"type":"link","label":"JSON","href":"/SeaORM/docs/basic-crud/json","docId":"basic-crud/json","unlisted":false},{"type":"link","label":"Raw SQL","href":"/SeaORM/docs/basic-crud/raw-sql","docId":"basic-crud/raw-sql","unlisted":false}]},{"type":"category","label":"Relations","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"One to One","href":"/SeaORM/docs/relation/one-to-one","docId":"relation/one-to-one","unlisted":false},{"type":"link","label":"One to Many","href":"/SeaORM/docs/relation/one-to-many","docId":"relation/one-to-many","unlisted":false},{"type":"link","label":"Many to Many","href":"/SeaORM/docs/relation/many-to-many","docId":"relation/many-to-many","unlisted":false},{"type":"link","label":"Complex Relations","href":"/SeaORM/docs/relation/complex-relations","docId":"relation/complex-relations","unlisted":false},{"type":"link","label":"Model Loader","href":"/SeaORM/docs/relation/model-loader","docId":"relation/model-loader","unlisted":false},{"type":"link","label":"Entity Loader","href":"/SeaORM/docs/relation/entity-loader","docId":"relation/entity-loader","unlisted":false},{"type":"link","label":"Bakery Schema","href":"/SeaORM/docs/relation/bakery-schema","docId":"relation/bakery-schema","unlisted":false},{"type":"link","label":"Nested Selects","href":"/SeaORM/docs/relation/nested-selects","docId":"relation/nested-selects","unlisted":false},{"type":"link","label":"Multi Selects","href":"/SeaORM/docs/relation/multi-selects","docId":"relation/multi-selects","unlisted":false},{"type":"link","label":"Relational Query","href":"/SeaORM/docs/relation/relational-query","docId":"relation/relational-query","unlisted":false}]},{"type":"category","label":"Writing Tests","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Writing Tests","href":"/SeaORM/docs/write-test/testing","docId":"write-test/testing","unlisted":false},{"type":"link","label":"Mock Interface","href":"/SeaORM/docs/write-test/mock","docId":"write-test/mock","unlisted":false},{"type":"link","label":"Using SQLite","href":"/SeaORM/docs/write-test/sqlite","docId":"write-test/sqlite","unlisted":false}]},{"type":"category","label":"Advanced Queries","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Custom Select","href":"/SeaORM/docs/advanced-query/custom-select","docId":"advanced-query/custom-select","unlisted":false},{"type":"link","label":"Conditional Expressions","href":"/SeaORM/docs/advanced-query/conditional-expression","docId":"advanced-query/conditional-expression","unlisted":false},{"type":"link","label":"Aggregate Functions","href":"/SeaORM/docs/advanced-query/aggregate-function","docId":"advanced-query/aggregate-function","unlisted":false},{"type":"link","label":"Custom Join Condition","href":"/SeaORM/docs/advanced-query/custom-join-condition","docId":"advanced-query/custom-join-condition","unlisted":false},{"type":"link","label":"Sub Query","href":"/SeaORM/docs/advanced-query/subquery","docId":"advanced-query/subquery","unlisted":false},{"type":"link","label":"Transaction","href":"/SeaORM/docs/advanced-query/transaction","docId":"advanced-query/transaction","unlisted":false},{"type":"link","label":"Streaming","href":"/SeaORM/docs/advanced-query/streaming","docId":"advanced-query/streaming","unlisted":false},{"type":"link","label":"Custom Active Model","href":"/SeaORM/docs/advanced-query/custom-active-model","docId":"advanced-query/custom-active-model","unlisted":false},{"type":"link","label":"Error Handling","href":"/SeaORM/docs/advanced-query/error-handling","docId":"advanced-query/error-handling","unlisted":false},{"type":"link","label":"Advanced Joins","href":"/SeaORM/docs/advanced-query/advanced-joins","docId":"advanced-query/advanced-joins","unlisted":false}]},{"type":"category","label":"Schema Statement","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Create Table","href":"/SeaORM/docs/schema-statement/create-table","docId":"schema-statement/create-table","unlisted":false},{"type":"link","label":"Create Enum","href":"/SeaORM/docs/schema-statement/create-enum","docId":"schema-statement/create-enum","unlisted":false},{"type":"link","label":"Create Index","href":"/SeaORM/docs/schema-statement/create-index","docId":"schema-statement/create-index","unlisted":false}]},{"type":"category","label":"GraphQL Support","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"\ud83e\udded Seaography","href":"/SeaORM/docs/graph-ql/seaography-intro","docId":"graph-ql/seaography-intro","unlisted":false},{"type":"link","label":"Getting Started","href":"/SeaORM/docs/graph-ql/getting-started","docId":"graph-ql/getting-started","unlisted":false}]},{"type":"category","label":"Admin Panel","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"\ud83d\udda5\ufe0f SeaORM Pro","href":"/SeaORM/docs/sea-orm-pro/sea-orm-pro-intro","docId":"sea-orm-pro/sea-orm-pro-intro","unlisted":false},{"type":"link","label":"Getting Started","href":"/SeaORM/docs/sea-orm-pro/getting-started","docId":"sea-orm-pro/getting-started","unlisted":false}]},{"type":"category","label":"Internal Design","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Traits and Types","href":"/SeaORM/docs/internal-design/trait-and-type","docId":"internal-design/trait-and-type","unlisted":false},{"type":"link","label":"Derive Macros","href":"/SeaORM/docs/internal-design/derive-macro","docId":"internal-design/derive-macro","unlisted":false},{"type":"link","label":"Architecture","href":"/SeaORM/docs/internal-design/architecture","docId":"internal-design/architecture","unlisted":false},{"type":"link","label":"Compare with Diesel","href":"/SeaORM/docs/internal-design/diesel","docId":"internal-design/diesel","unlisted":false},{"type":"link","label":"Expanded Entity Format","href":"/SeaORM/docs/internal-design/expanded-entity-format","docId":"internal-design/expanded-entity-format","unlisted":false}]},{"type":"category","label":"What\'s Next","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"What\'s Next for SeaORM?","href":"/SeaORM/docs/whats-next/whats-next","docId":"whats-next/whats-next","unlisted":false}]}]},"docs":{"advanced-query/advanced-joins":{"id":"advanced-query/advanced-joins","title":"Advanced Joins","description":"Most of the need for the following has been addressed in 2.0 with nested select and entity loader. This is still a good reference when you have complex queries that you have roll your own.","sidebar":"tutorialSidebar"},"advanced-query/aggregate-function":{"id":"advanced-query/aggregate-function","title":"Aggregate Functions","description":"You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.","sidebar":"tutorialSidebar"},"advanced-query/conditional-expression":{"id":"advanced-query/conditional-expression","title":"Conditional Expressions","description":"You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.","sidebar":"tutorialSidebar"},"advanced-query/custom-active-model":{"id":"advanced-query/custom-active-model","title":"Custom Active Model","description":"Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.","sidebar":"tutorialSidebar"},"advanced-query/custom-join-condition":{"id":"advanced-query/custom-join-condition","title":"Custom Join Condition","description":"Sometimes you might want to join on another table with custom conditions, such as:","sidebar":"tutorialSidebar"},"advanced-query/custom-select":{"id":"advanced-query/custom-select","title":"Custom Select","description":"Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.","sidebar":"tutorialSidebar"},"advanced-query/error-handling":{"id":"advanced-query/error-handling","title":"Error Handling","description":"All runtime errors in SeaORM is represented by DbErr.","sidebar":"tutorialSidebar"},"advanced-query/streaming":{"id":"advanced-query/streaming","title":"Streaming","description":"Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.","sidebar":"tutorialSidebar"},"advanced-query/subquery":{"id":"advanced-query/subquery","title":"Sub Query","description":"Conditional Expression With Sub Query","sidebar":"tutorialSidebar"},"advanced-query/transaction":{"id":"advanced-query/transaction","title":"Transaction","description":"A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs supported in SeaORM, and you can pick one best suited to your programming paradigm.","sidebar":"tutorialSidebar"},"basic-crud/active-model":{"id":"basic-crud/active-model","title":"ActiveModel","description":"Before diving into insert and update operations we have to introduce ActiveValue and ActiveModel.","sidebar":"tutorialSidebar"},"basic-crud/basic-schema":{"id":"basic-crud/basic-schema","title":"Basic Schema","description":"We will be using this basic schema for demonstration:","sidebar":"tutorialSidebar"},"basic-crud/delete":{"id":"basic-crud/delete","title":"Delete","description":"Delete One","sidebar":"tutorialSidebar"},"basic-crud/insert":{"id":"basic-crud/insert","title":"Insert","description":"Insert One","sidebar":"tutorialSidebar"},"basic-crud/json":{"id":"basic-crud/json","title":"JSON","description":"Select JSON Result","sidebar":"tutorialSidebar"},"basic-crud/raw-sql":{"id":"basic-crud/raw-sql","title":"Raw SQL","description":"A new macro raw_sql is added, with many neat features to make writing raw SQL queries more ergononmic.","sidebar":"tutorialSidebar"},"basic-crud/save":{"id":"basic-crud/save","title":"Save","description":"This is a helper method to save (insert / update) ActiveModel into the database.","sidebar":"tutorialSidebar"},"basic-crud/select":{"id":"basic-crud/select","title":"Select","description":"Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.","sidebar":"tutorialSidebar"},"basic-crud/update":{"id":"basic-crud/update","title":"Update","description":"Update One","sidebar":"tutorialSidebar"},"generate-entity/column-types":{"id":"generate-entity/column-types","title":"Column Types","description":"Type mappings","sidebar":"tutorialSidebar"},"generate-entity/entity-first":{"id":"generate-entity/entity-first","title":"Entity First Workfllow","description":"SeaORM also supports an Entity first approach: your entities are the source of truth, and you run run DDL on the database to match your entity definition.","sidebar":"tutorialSidebar"},"generate-entity/entity-format":{"id":"generate-entity/entity-format","title":"Entity Format","description":"Let\'s look at a simple Cake entity.","sidebar":"tutorialSidebar"},"generate-entity/enumeration":{"id":"generate-entity/enumeration","title":"ActiveEnum","description":"You can use Rust enums in model where the values are mapped to a database string, integer or native enum.","sidebar":"tutorialSidebar"},"generate-entity/newtype":{"id":"generate-entity/newtype","title":"New Type","description":"You can define a New Type (T) and use it as model field. The following traits have to be implemented.","sidebar":"tutorialSidebar"},"generate-entity/sea-orm-cli":{"id":"generate-entity/sea-orm-cli","title":"Using sea-orm-cli","description":"First, install sea-orm-cli with cargo.","sidebar":"tutorialSidebar"},"graph-ql/getting-started":{"id":"graph-ql/getting-started","title":"Getting Started","description":"Here we start from the Seaography Example using a simplified Bakery schema.","sidebar":"tutorialSidebar"},"graph-ql/seaography-intro":{"id":"graph-ql/seaography-intro","title":"\ud83e\udded Seaography","description":"\ud83e\udded A GraphQL framework for Rust","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Index","description":"Introduction","sidebar":"tutorialSidebar"},"install-and-config/connection":{"id":"install-and-config/connection","title":"Database Connection","description":"To obtain a database connection, use the Database interface:","sidebar":"tutorialSidebar"},"install-and-config/database-and-async-runtime":{"id":"install-and-config/database-and-async-runtime","title":"Database & Async Runtime","description":"Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.","sidebar":"tutorialSidebar"},"install-and-config/debug-log":{"id":"install-and-config/debug-log","title":"Debug Log","description":"Statement Logging","sidebar":"tutorialSidebar"},"internal-design/architecture":{"id":"internal-design/architecture","title":"Architecture","description":"Let\'s dive under the Sea \ud83e\udd3f","sidebar":"tutorialSidebar"},"internal-design/derive-macro":{"id":"internal-design/derive-macro","title":"Derive Macros","description":"EntityModel","sidebar":"tutorialSidebar"},"internal-design/diesel":{"id":"internal-design/diesel","title":"Compare with Diesel","description":"This is an inevitable and controversial topic, and the technical difference between SeaORM and Diesel is already widely discussed. So I\'d like to point out a few design choices we made different deliberately that\'s intended to make working with SeaORM a nicer experience.","sidebar":"tutorialSidebar"},"internal-design/expanded-entity-format":{"id":"internal-design/expanded-entity-format","title":"Expanded Entity Format","description":"This was the entity format before compact format, nowadays the compact format is the default, and all new features are added on top of the compact format.","sidebar":"tutorialSidebar"},"internal-design/trait-and-type":{"id":"internal-design/trait-and-type","title":"Traits and Types","description":"Entity","sidebar":"tutorialSidebar"},"introduction/async":{"id":"introduction/async","title":"Async Programming","description":"Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.","sidebar":"tutorialSidebar"},"introduction/orm":{"id":"introduction/orm","title":"What is an ORM","description":"An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.","sidebar":"tutorialSidebar"},"introduction/sea-orm":{"id":"introduction/sea-orm","title":"SeaORM Concepts","description":"In SeaORM, a database with a collection of tables is called a Schema.","sidebar":"tutorialSidebar"},"introduction/tutorial":{"id":"introduction/tutorial","title":"Tutorial & Examples","description":"If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!","sidebar":"tutorialSidebar"},"migration/running-migration":{"id":"migration/running-migration","title":"Running Migration","description":"After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.","sidebar":"tutorialSidebar"},"migration/seeding-data":{"id":"migration/seeding-data","title":"Seeding Data","description":"You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.","sidebar":"tutorialSidebar"},"migration/setting-up-migration":{"id":"migration/setting-up-migration","title":"Setting Up Migration","description":"Our stickers are made with a premium water-resistant vinyl with a unique matte finish.","sidebar":"tutorialSidebar"},"migration/writing-migration":{"id":"migration/writing-migration","title":"Writing Migration","description":"In this chapter we will illustrate a schema first approach: you write migrations first and then generate entities from a live database.","sidebar":"tutorialSidebar"},"relation/bakery-schema":{"id":"relation/bakery-schema","title":"Bakery Schema","description":"Bakery Schema ERD","sidebar":"tutorialSidebar"},"relation/complex-relations":{"id":"relation/complex-relations","title":"Complex Relations","description":"Linked","sidebar":"tutorialSidebar"},"relation/entity-loader":{"id":"relation/entity-loader","title":"Entity Loader","description":"The Entity Loader intelligently uses join and data loader different relation types, eliminating the N+1 problem even when performing nested queries.","sidebar":"tutorialSidebar"},"relation/many-to-many":{"id":"relation/many-to-many","title":"Many to Many","description":"A standout feature of SeaORM is its ability to model many-to-many relationships directly at the Entity level. The intermediate junction table is abstracted away, so traversing an M-N relation feels just like a simple 1-N: a single method call instead of multiple joins.","sidebar":"tutorialSidebar"},"relation/model-loader":{"id":"relation/model-loader","title":"Model Loader","description":"The LoaderTrait provides an API to load related entities in batches.","sidebar":"tutorialSidebar"},"relation/multi-selects":{"id":"relation/multi-selects","title":"Multi Selects","description":"In the previous chapter, we used partial models for querying multiple entities together. We can achieve the same using the multi-select API.","sidebar":"tutorialSidebar"},"relation/nested-selects":{"id":"relation/nested-selects","title":"Nested Selects","description":"FromQueryResult and DerivePartialModel macros allows you to nest objects easily, simplifying the construction of complex queries.","sidebar":"tutorialSidebar"},"relation/one-to-many":{"id":"relation/one-to-many","title":"One to Many","description":"A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of \\"a Cake entity has at most one Fruit topping\\". To make it a one-to-many relation, we remove the \\"at most one\\" constraint. So, we have a Cake entity that might have many Fruit toppings.","sidebar":"tutorialSidebar"},"relation/one-to-one":{"id":"relation/one-to-one","title":"One to One","description":"Our stickers are made with a premium water-resistant vinyl with a unique matte finish.","sidebar":"tutorialSidebar"},"relation/relational-query":{"id":"relation/relational-query","title":"Relational Query","description":"Query by related Entity","sidebar":"tutorialSidebar"},"schema-statement/create-enum":{"id":"schema-statement/create-enum","title":"Create Enum","description":"You can generate SQL statement to create database tables with enum columns via the Schema helper struct.","sidebar":"tutorialSidebar"},"schema-statement/create-index":{"id":"schema-statement/create-index","title":"Create Index","description":"You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.","sidebar":"tutorialSidebar"},"schema-statement/create-table":{"id":"schema-statement/create-table","title":"Create Table","description":"Our stickers are made with a premium water-resistant vinyl with a unique matte finish.","sidebar":"tutorialSidebar"},"sea-orm-pro/getting-started":{"id":"sea-orm-pro/getting-started","title":"Getting Started","description":"Getting Started","sidebar":"tutorialSidebar"},"sea-orm-pro/sea-orm-pro-intro":{"id":"sea-orm-pro/sea-orm-pro-intro","title":"\ud83d\udda5\ufe0f SeaORM Pro","description":"SeaORM Pro is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required (but certainly nice to have).","sidebar":"tutorialSidebar"},"whats-next/whats-next":{"id":"whats-next/whats-next","title":"What\'s Next for SeaORM?","description":"We still remember the time when we first introduced SeaORM to the Rust community 4 years ago.","sidebar":"tutorialSidebar"},"write-test/mock":{"id":"write-test/mock","title":"Mock Interface","description":"To unit test more complex application logic with asynchronous interface and multiple underlying queries, you can use the mock database interface.","sidebar":"tutorialSidebar"},"write-test/sqlite":{"id":"write-test/sqlite","title":"Using SQLite","description":"If you want to test high level application domain logic that\'s not tied to database specific features, you can use SQLite in integration tests.","sidebar":"tutorialSidebar"},"write-test/testing":{"id":"write-test/testing","title":"Writing Tests","description":"Testing is an integral part of programming in Rust, with cargo test built directly into the toolchain.","sidebar":"tutorialSidebar"}}}}')}}]);