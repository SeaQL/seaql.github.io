"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[46146],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(96540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}},40310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"advanced-query/transaction","title":"Transaction","description":"A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.","source":"@site/versioned_docs/version-0.8.x/09-advanced-query/06-transaction.md","sourceDirName":"09-advanced-query","slug":"/advanced-query/transaction","permalink":"/SeaORM/docs/0.8.x/advanced-query/transaction","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.8.x/09-advanced-query/06-transaction.md","tags":[],"version":"0.8.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761400599000,"sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sub Query","permalink":"/SeaORM/docs/0.8.x/advanced-query/subquery"},"next":{"title":"Streaming","permalink":"/SeaORM/docs/0.8.x/advanced-query/streaming"}}');var r=t(74848),o=t(28453);const i={},s="Transaction",c={},d=[{value:"Within a <code>Closure</code>",id:"within-a-closure",level:2},{value:"<code>begin</code> &amp; <code>commit</code> / <code>rollback</code>",id:"begin--commit--rollback",level:2}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"transaction",children:"Transaction"})}),"\n",(0,r.jsx)(n.p,{children:"A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs."}),"\n",(0,r.jsxs)(n.h2,{id:"within-a-closure",children:["Within a ",(0,r.jsx)(n.code,{children:"Closure"})]}),"\n",(0,r.jsxs)(n.p,{children:["The transaction will be committed if the closure returned ",(0,r.jsx)(n.code,{children:"Ok"}),", rollbacked if returned ",(0,r.jsx)(n.code,{children:"Err"}),". The 2nd and 3rd type parameters are the Ok and Err types respectively."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// <Fn, A, B> -> Result<A, B>\ndb.transaction::<_, (), DbErr>(|txn| {\n    Box::pin(async move {\n        bakery::ActiveModel {\n            name: Set("SeaSide Bakery".to_owned()),\n            profit_margin: Set(10.4),\n            ..Default::default()\n        }\n        .save(txn)\n        .await?;\n\n        bakery::ActiveModel {\n            name: Set("Top Bakery".to_owned()),\n            profit_margin: Set(15.0),\n            ..Default::default()\n        }\n        .save(txn)\n        .await?;\n\n        Ok(())\n    })\n})\n.await;\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This is the preferred way for most cases. However, if you happen to run into an ",(0,r.jsx)(n.em,{children:"impossible lifetime"})," while trying to capture a reference in the async block, then the following API is the solution."]}),"\n",(0,r.jsxs)(n.h2,{id:"begin--commit--rollback",children:[(0,r.jsx)(n.code,{children:"begin"})," & ",(0,r.jsx)(n.code,{children:"commit"})," / ",(0,r.jsx)(n.code,{children:"rollback"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"begin"})," the transaction followed by a ",(0,r.jsx)(n.code,{children:"commit"})," or ",(0,r.jsx)(n.code,{children:"rollback"}),". If ",(0,r.jsx)(n.code,{children:"txn"})," goes out of scope, the transaction is automatically rollbacked."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'let txn = db.begin().await?;\n\nbakery::ActiveModel {\n    name: Set("SeaSide Bakery".to_owned()),\n    profit_margin: Set(10.4),\n    ..Default::default()\n}\n.save(&txn)\n.await?;\n\nbakery::ActiveModel {\n    name: Set("Top Bakery".to_owned()),\n    profit_margin: Set(15.0),\n    ..Default::default()\n}\n.save(&txn)\n.await?;\n\ntxn.commit().await?;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);