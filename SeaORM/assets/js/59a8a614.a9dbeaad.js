"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[19889],{48859:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(76687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,v=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(v,o(o({ref:t},c),{},{components:n})):a.createElement(v,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99249:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(31308),r=(n(76687),n(48859));const i={},o="Insert",l={unversionedId:"basic-crud/insert",id:"version-0.12.x/basic-crud/insert",title:"Insert",description:"Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.",source:"@site/versioned_docs/version-0.12.x/05-basic-crud/03-insert.md",sourceDirName:"05-basic-crud",slug:"/basic-crud/insert",permalink:"/SeaORM/docs/0.12.x/basic-crud/insert",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/05-basic-crud/03-insert.md",tags:[],version:"0.12.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1740741114,formattedLastUpdatedAt:"Feb 28, 2025",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Select",permalink:"/SeaORM/docs/0.12.x/basic-crud/select"},next:{title:"Update",permalink:"/SeaORM/docs/0.12.x/basic-crud/update"}},s={},d=[{value:"ActiveValue",id:"activevalue",level:2},{value:"Model &amp; ActiveModel",id:"model--activemodel",level:2},{value:"Set ActiveModel from JSON Value",id:"set-activemodel-from-json-value",level:3},{value:"Checking if an ActiveModel is changed",id:"checking-if-an-activemodel-is-changed",level:3},{value:"Convert ActiveModel back to Model",id:"convert-activemodel-back-to-model",level:3},{value:"Insert One",id:"insert-one",level:2},{value:"Insert Many",id:"insert-many",level:2},{value:"On Conflict",id:"on-conflict",level:2}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"insert"},"Insert"),(0,r.kt)("p",null,"Before diving into SeaORM insert we have to introduce ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveValue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel"),"."),(0,r.kt)("h2",{id:"activevalue"},"ActiveValue"),(0,r.kt)("p",null,"A wrapper struct to capture the changes made to ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," attributes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::ActiveValue::{Set, NotSet, Unchanged};\n\n// Set value\nlet _: ActiveValue<i32> = Set(10);\n\n// NotSet value\nlet _: ActiveValue<i32> = NotSet;\n\n// An `Unchanged` value\nlet v: ActiveValue<i32> = Unchanged(10);\n\n// Convert `Unchanged` active value as `Set`\nassert!(v.reset(), Set(10));\n")),(0,r.kt)("h2",{id:"model--activemodel"},"Model & ActiveModel"),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," has all the attributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"Model")," wrapped in ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveValue"),"."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," to insert a row with a subset of columns set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\n\n// Get Model\nlet model: cake::Model = cheese.unwrap();\nassert_eq!(model.name, "Cheese Cake".to_owned());\n\n// Into ActiveModel\nlet active_model: cake::ActiveModel = model.into();\nassert_eq!(active_model.name, ActiveValue::unchanged("Cheese Cake".to_owned()));\n')),(0,r.kt)("h3",{id:"set-activemodel-from-json-value"},"Set ActiveModel from JSON Value"),(0,r.kt)("p",null,"If you want to save user input into the database you can easily convert JSON value into ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel"),". Note that you might want to ",(0,r.kt)("a",{parentName:"p",href:"https://serde.rs/attr-skip-serializing.html"},"skip deserializing")," JSON's primary key attribute, you can config that as shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "fruit")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(skip_deserializing)] // Skip deserializing\n    pub id: i32,\n    pub name: String,\n    pub cake_id: Option<i32>,\n}\n')),(0,r.kt)("p",null,"Set the attributes in ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"set_from_json")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// A ActiveModel with primary key set\nlet mut fruit = fruit::ActiveModel {\n    id: ActiveValue::Set(1),\n    name: ActiveValue::NotSet,\n    cake_id: ActiveValue::NotSet,\n};\n\n// Note that this method will not alter the primary key values in ActiveModel\nfruit.set_from_json(json!({\n    "id": 8,\n    "name": "Apple",\n    "cake_id": 1,\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::Set(1),\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::Set(Some(1)),\n    }\n);\n')),(0,r.kt)("p",null,"Create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," from JSON value with the ",(0,r.kt)("inlineCode",{parentName:"p"},"from_json")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let fruit = fruit::ActiveModel::from_json(json!({\n    "name": "Apple",\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::NotSet,\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::NotSet,\n    }\n);\n')),(0,r.kt)("h3",{id:"checking-if-an-activemodel-is-changed"},"Checking if an ActiveModel is changed"),(0,r.kt)("p",null,"You can check whether any field in an ",(0,r.kt)("inlineCode",{parentName:"p"},"ActiveModel")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Set")," with the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/trait.ActiveModelTrait.html#method.is_changed"},(0,r.kt)("inlineCode",{parentName:"a"},"is_changed"))," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut fruit: fruit::ActiveModel = Default::default();\nassert!(!fruit.is_changed());\n\nfruit.set(fruit::Column::Name, "apple".into());\nassert!(fruit.is_changed());\n')),(0,r.kt)("h3",{id:"convert-activemodel-back-to-model"},"Convert ActiveModel back to Model"),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.TryIntoModel.html#tymethod.try_into_model"},"try_into_model")," method you can convert ActiveModel back to Model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    ActiveModel {\n        id: Set(2),\n        name: Set("Apple".to_owned()),\n        cake_id: Set(Some(1)),\n    }\n    .try_into_model()\n    .unwrap(),\n    Model {\n        id: 2,\n        name: "Apple".to_owned(),\n        cake_id: Some(1),\n    }\n);\n\nassert_eq!(\n    ActiveModel {\n        id: Set(1),\n        name: NotSet,\n        cake_id: Set(None),\n    }\n    .try_into_model(),\n    Err(DbErr::AttrNotSet(String::from("name")))\n);\n')),(0,r.kt)("h2",{id:"insert-one"},"Insert One"),(0,r.kt)("p",null,"Insert an active model and get back a fresh ",(0,r.kt)("inlineCode",{parentName:"p"},"Model"),". Its value is retrieved from database, so any auto-generated fields will be populated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\nlet pear: fruit::Model = pear.insert(db).await?;\n')),(0,r.kt)("p",null,"Insert an active model and get back the last insert id. Its type matches the model's primary key type, so it could be a tuple if the model has a composite primary key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\nlet res: InsertResult = fruit::Entity::insert(pear).exec(db).await?;\nassert_eq!(res.last_insert_id, 28)\n')),(0,r.kt)("h2",{id:"insert-many"},"Insert Many"),(0,r.kt)("p",null,"Insert many active models and get back the last insert id."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default()\n};\n\nlet orange = fruit::ActiveModel {\n    name: Set("Orange".to_owned()),\n    ..Default::default()\n};\n\nlet res: InsertResult = Fruit::insert_many([apple, orange]).exec(db).await?;\nassert_eq!(res.last_insert_id, 30)\n')),(0,r.kt)("p",null,"Supplying an empty set to ",(0,r.kt)("inlineCode",{parentName:"p"},"insert_many")," method will result in an error. However, you can change the behaviour with ",(0,r.kt)("inlineCode",{parentName:"p"},"on_empty_do_nothing")," which wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"InsertResult")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"TryInsertResult"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let res = Bakery::insert_many(std::iter::empty())\n    .on_empty_do_nothing()\n    .exec(db)\n    .await;\n\nassert!(matches!(res, Ok(TryInsertResult::Empty)));\n")),(0,r.kt)("h2",{id:"on-conflict"},"On Conflict"),(0,r.kt)("p",null,"Insert active model with on conflict behaviour."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let orange = cake::ActiveModel {\n    id: ActiveValue::set(2),\n    name: ActiveValue::set("Orange".to_owned()),\n};\n\nassert_eq!(\n    cake::Entity::insert(orange.clone())\n        .on_conflict(\n            // on conflict do nothing\n            sea_query::OnConflict::column(cake::Column::Name)\n                .do_nothing()\n                .to_owned()\n        )\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"INSERT INTO "cake" ("id", "name") VALUES (2, \'Orange\') ON CONFLICT ("name") DO NOTHING"#,\n);\n\nassert_eq!(\n    cake::Entity::insert(orange)\n        .on_conflict(\n            // on conflict do update\n            sea_query::OnConflict::column(cake::Column::Name)\n                .update_column(cake::Column::Name)\n                .to_owned()\n        )\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"INSERT INTO "cake" ("id", "name") VALUES (2, \'Orange\') ON CONFLICT ("name") DO UPDATE SET "name" = "excluded"."name""#,\n);\n')),(0,r.kt)("p",null,"Performing an upsert statement without inserting or updating any of the row will result in a ",(0,r.kt)("inlineCode",{parentName:"p"},"DbErr::RecordNotInserted")," error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// When `id` column have conflicting value, do nothing\nlet on_conflict = OnConflict::column(Column::Id).do_nothing().to_owned();\n\n// Insert `1`, `2`, `3` into the table\nlet res = Entity::insert_many([\n    ActiveModel { id: Set(1) },\n    ActiveModel { id: Set(2) },\n    ActiveModel { id: Set(3) },\n])\n.on_conflict(on_conflict.clone())\n.exec(db)\n.await;\n\nassert_eq!(res?.last_insert_id, 3);\n\n// Insert `4` into the table together with the previous 3 rows\nlet res = Entity::insert_many([\n    ActiveModel { id: Set(1) },\n    ActiveModel { id: Set(2) },\n    ActiveModel { id: Set(3) },\n    ActiveModel { id: Set(4) },\n])\n.on_conflict(on_conflict.clone())\n.exec(db)\n.await;\n\nassert_eq!(res?.last_insert_id, 4);\n\n// Repeat last insert. Since all 4 rows already exist, this essentially did nothing.\n// A `DbErr::RecordNotInserted` error will be thrown.\nlet res = Entity::insert_many([\n    ActiveModel { id: Set(1) },\n    ActiveModel { id: Set(2) },\n    ActiveModel { id: Set(3) },\n    ActiveModel { id: Set(4) },\n])\n.on_conflict(on_conflict)\n.exec(db)\n.await;\n\nassert_eq!(res.err(), Some(DbErr::RecordNotInserted));\n")),(0,r.kt)("p",null,"If you want ",(0,r.kt)("inlineCode",{parentName:"p"},"RecordNotInserted")," to be an ",(0,r.kt)("inlineCode",{parentName:"p"},"Ok")," instead of an error, call ",(0,r.kt)("inlineCode",{parentName:"p"},".do_nothing()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let res = Entity::insert_many([..])\n    .on_conflict(on_conflict)\n    .do_nothing()\n    .exec(db)\n    .await;\n\nassert!(matches!(res, Ok(TryInsertResult::Conflicted)));\n")))}u.isMDXComponent=!0}}]);