"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[90844],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(96540);const r={},d=a.createContext(r);function i(e){const t=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(d.Provider,{value:t},e.children)}},93556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"basic-crud/update","title":"Update","description":"Update One","source":"@site/versioned_docs/version-0.7.x/06-basic-crud/03-update.md","sourceDirName":"06-basic-crud","slug":"/basic-crud/update","permalink":"/SeaORM/docs/0.7.x/basic-crud/update","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.7.x/06-basic-crud/03-update.md","tags":[],"version":"0.7.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760805209000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Insert","permalink":"/SeaORM/docs/0.7.x/basic-crud/insert"},"next":{"title":"Save","permalink":"/SeaORM/docs/0.7.x/basic-crud/save"}}');var r=n(74848),d=n(28453);const i={},s="Update",o={},c=[{value:"Update One",id:"update-one",level:2},{value:"Update Many",id:"update-many",level:2}];function u(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"update",children:"Update"})}),"\n",(0,r.jsx)(t.h2,{id:"update-one",children:"Update One"}),"\n",(0,r.jsxs)(t.p,{children:["You will get a ",(0,r.jsx)(t.code,{children:"Model"})," from find result. If you want to save the model back into the database, you need to convert it into an ",(0,r.jsx)(t.code,{children:"ActiveModel"})," ",(0,r.jsx)(t.em,{children:"first"}),". The generated query will only include the ",(0,r.jsx)(t.code,{children:"Set"})," attributes."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:'let pear: Option<fruit::Model> = Fruit::find_by_id(28).one(db).await?;\n\n// Into ActiveModel\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\n// Update name attribute\npear.name = Set("Sweet pear".to_owned());\n\n// Update corresponding row in database using primary key value\nlet pear: fruit::Model = pear.update(db).await?;\n'})}),"\n",(0,r.jsx)(t.h2,{id:"update-many",children:"Update Many"}),"\n",(0,r.jsxs)(t.p,{children:["You can also update multiple rows in the database without finding each ",(0,r.jsx)(t.code,{children:"Model"})," with SeaORM select."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"// Bulk set attributes using ActiveModel\nlet update_result: UpdateResult = Fruit::update_many()\n    .set(pear)\n    .filter(fruit::Column::Id.eq(1))\n    .exec(db)\n    .await?;\n\n// UPDATE `fruit` SET `cake_id` = 1 WHERE `fruit`.`name` LIKE '%Apple%'\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(1))\n    .filter(fruit::Column::Name.contains(\"Apple\"))\n    .exec(db)\n    .await?;\n"})})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);