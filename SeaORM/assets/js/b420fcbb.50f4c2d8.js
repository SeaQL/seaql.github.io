"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[8810],{26477:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"generate-entity/newtype","title":"Newtype","description":"You can define a newtype and use it as model field. Following traits have to be implemented.","source":"@site/versioned_docs/version-0.10.x/04-generate-entity/05-newtype.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/newtype","permalink":"/SeaORM/docs/0.10.x/generate-entity/newtype","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/04-generate-entity/05-newtype.md","tags":[],"version":"0.10.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760084251000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Enumeration","permalink":"/SeaORM/docs/0.10.x/generate-entity/enumeration"},"next":{"title":"Select","permalink":"/SeaORM/docs/0.10.x/basic-crud/select"}}');var s=r(74848),a=r(28453);const o={},i="Newtype",l={},c=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"newtype",children:"Newtype"})}),"\n",(0,s.jsx)(n.p,{children:"You can define a newtype and use it as model field. Following traits have to be implemented."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Implements ",(0,s.jsx)(n.code,{children:"From<newtype>"})," for ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/0.27/sea_query/value/enum.Value.html",children:(0,s.jsx)(n.code,{children:"sea_query::Value"})})]}),"\n",(0,s.jsxs)(n.li,{children:["Implements ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.10/sea_orm/trait.TryGetable.html",children:(0,s.jsx)(n.code,{children:"sea_orm::TryGetable"})})," for ",(0,s.jsx)(n.code,{children:"newtype"})]}),"\n",(0,s.jsxs)(n.li,{children:["Implements ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/0.27/sea_query/value/trait.ValueType.html",children:(0,s.jsx)(n.code,{children:"sea_query::ValueType"})})," for ",(0,s.jsx)(n.code,{children:"newtype"})]}),"\n",(0,s.jsxs)(n.li,{children:["Implements ",(0,s.jsx)(n.a,{href:"https://docs.rs/sea-query/0.27/sea_query/value/trait.Nullable.html",children:(0,s.jsx)(n.code,{children:"sea_query::Nullable"})})," for ",(0,s.jsx)(n.code,{children:"newtype"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\nuse sea_orm::{TryGetError, TryGetable};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub str_vec: Option<StringVec>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct StringVec(pub Vec<String>);\n\nimpl From<StringVec> for Value {\n    fn from(source: StringVec) -> Self {\n        Value::String(serde_json::to_string(&source).ok().map(Box::new))\n    }\n}\n\nimpl sea_orm::TryGetable for StringVec {\n    fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {\n        let json_str: String = res.try_get(pre, col).map_err(TryGetError::DbErr)?;\n        serde_json::from_str(&json_str).map_err(|e| TryGetError::DbErr(DbErr::Json(e.to_string())))\n    }\n}\n\nimpl sea_query::ValueType for StringVec {\n    fn try_from(v: Value) -> Result<Self, sea_query::ValueTypeErr> {\n        match v {\n            Value::String(Some(x)) => Ok(StringVec(\n                serde_json::from_str(&x).map_err(|_| sea_query::ValueTypeErr)?,\n            )),\n            _ => Err(sea_query::ValueTypeErr),\n        }\n    }\n\n    fn type_name() -> String {\n        stringify!(StringVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::String\n    }\n\n    fn column_type() -> sea_query::ColumnType {\n        sea_query::ColumnType::String(None)\n    }\n}\n\nimpl sea_query::Nullable for StringVec {\n    fn null() -> Value {\n        Value::String(None)\n    }\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(96540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);