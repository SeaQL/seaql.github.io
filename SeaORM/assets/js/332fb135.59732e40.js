"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[43830],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},75847:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"internal-design/architecture","title":"Architecture","description":"Let\'s dive under the Sea \ud83e\udd3f","source":"@site/versioned_docs/version-0.12.x/11-internal-design/04-architecture.md","sourceDirName":"11-internal-design","slug":"/internal-design/architecture","permalink":"/SeaORM/docs/0.12.x/internal-design/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/11-internal-design/04-architecture.md","tags":[],"version":"0.12.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756725675000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Compare with Diesel","permalink":"/SeaORM/docs/0.12.x/internal-design/diesel"},"next":{"title":"What\'s Next for SeaORM?","permalink":"/SeaORM/docs/0.12.x/whats-next/whats-next"}}');var i=n(74848),r=n(28453);const a={},o="Architecture",c={},d=[];function h(e){const t={blockquote:"blockquote",code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Let's dive under the Sea \ud83e\udd3f"}),"\n"]}),"\n",(0,i.jsx)("img",{width:"100%",src:"/SeaORM/img/SeaORM Architecture.svg"}),"\n",(0,i.jsx)(t.p,{children:"To understand the architecture of SeaORM, let's discuss what is an ORM. ORM exists to provide abstractions over common operations you would do against a database and hide the implementation details like the actual SQL queries."}),"\n",(0,i.jsxs)(t.p,{children:["With a good ORM, you shouldn't bother to look under the API surface. Until you do. I hear you say ",(0,i.jsx)(t.em,{children:"'abstraction leaks'"}),", and yes, it does."]}),"\n",(0,i.jsxs)(t.p,{children:["The approach SeaORM takes is ",(0,i.jsx)(t.strong,{children:"'layered abstraction'"}),", where you'd dig one layer beneath if you want to. That's why we made SeaQuery into a standalone repository. It's useful on its own, and with a public API surface and a separate namespace, it's far more difficult to create confusing internal APIs than a monolithic approach."]}),"\n",(0,i.jsx)(t.p,{children:"The central idea in SeaORM is nearly everything is runtime configurable. At compile time, it does not know what the underlying database is."}),"\n",(0,i.jsx)(t.p,{children:"What benefits does database-agnostic bring? For example, you can:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Make your app work on any database, depending on runtime configuration"}),"\n",(0,i.jsx)(t.li,{children:"Use the same models and transfer them across different databases"}),"\n",(0,i.jsx)(t.li,{children:"Share entities across different projects by creating a 'data structure crate', where the database is chosen by downstream 'behaviour crates'"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The API of SeaORM is not a thin shell, but consist of layers, with each layer underneath being less abstract."}),"\n",(0,i.jsx)(t.p,{children:"There are different stages when the API is being utilized."}),"\n",(0,i.jsxs)(t.p,{children:["So there are two dimensions to navigate the SeaORM code base, ",(0,i.jsx)(t.strong,{children:"'stage'"})," and ",(0,i.jsx)(t.strong,{children:"'abstractness'"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["First is the declaration stage. Entities and relations among them are being defined with the ",(0,i.jsx)(t.code,{children:"EntityTrait"}),", ",(0,i.jsx)(t.code,{children:"ColumnTrait"})," & ",(0,i.jsx)(t.code,{children:"RelationTrait"})," etc."]}),"\n",(0,i.jsx)(t.p,{children:"Second is the query building stage."}),"\n",(0,i.jsxs)(t.p,{children:["The top most layer is ",(0,i.jsx)(t.code,{children:"Entity"}),"'s ",(0,i.jsx)(t.code,{children:"find*"}),", ",(0,i.jsx)(t.code,{children:"insert"}),", ",(0,i.jsx)(t.code,{children:"update"})," & ",(0,i.jsx)(t.code,{children:"delete"})," methods, where you can intuitively perform basic CRUD operations."]}),"\n",(0,i.jsxs)(t.p,{children:["One layer down, is the ",(0,i.jsx)(t.code,{children:"Select"}),", ",(0,i.jsx)(t.code,{children:"Insert"}),", ",(0,i.jsx)(t.code,{children:"Update"})," & ",(0,i.jsx)(t.code,{children:"Delete"})," structs, where they each have their own API for more advanced operations."]}),"\n",(0,i.jsxs)(t.p,{children:["One layer down, is the SeaQuery ",(0,i.jsx)(t.code,{children:"SelectStatement"}),", ",(0,i.jsx)(t.code,{children:"InsertStatement"}),", ",(0,i.jsx)(t.code,{children:"UpdateStatement"})," & ",(0,i.jsx)(t.code,{children:"DeleteStatement"}),", where they have a rich API for you to fiddle with the SQL syntax tree."]}),"\n",(0,i.jsxs)(t.p,{children:["Third is the execution stage. A separate set of structs, ",(0,i.jsx)(t.code,{children:"Selector"}),", ",(0,i.jsx)(t.code,{children:"Inserter"}),", ",(0,i.jsx)(t.code,{children:"Updater"})," & ",(0,i.jsx)(t.code,{children:"Deleter"}),", are responsible for executing the statements against a database connection."]}),"\n",(0,i.jsx)(t.p,{children:"Finally is the resolution stage, when query results are converted into Rust types and shoved into structs. Subsequently, if it is a relational query, the structs will be pieced together according to their relations."}),"\n",(0,i.jsx)(t.p,{children:"Because only the execution and resolution stages are database specific, we have the possibility to use a different driver by replacing those."}),"\n",(0,i.jsx)(t.p,{children:"I imagine some day, we will support a number of databases, with a matrix of different syntaxes, protocols and form-factors."})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);