"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[63653],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(96540);const d={},s=i.createContext(d);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},87760:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"basic-crud/active-model","title":"ActiveModel","description":"Before diving into insert and update operations we have to introduce ActiveValue and ActiveModel.","source":"@site/docs/05-basic-crud/03-active-model.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/active-model","permalink":"/SeaORM/docs/next/basic-crud/active-model","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-basic-crud/03-active-model.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756053540000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Select","permalink":"/SeaORM/docs/next/basic-crud/select"},"next":{"title":"Insert","permalink":"/SeaORM/docs/next/basic-crud/insert"}}');var d=t(74848),s=t(28453);const a={},c="ActiveModel",o={},l=[{value:"ActiveValue",id:"activevalue",level:2},{value:"Examples",id:"examples",level:3},{value:"ActiveModel",id:"activemodel-1",level:2},{value:"Checking if an ActiveModel is changed",id:"checking-if-an-activemodel-is-changed",level:3},{value:"Convert ActiveModel back to Model",id:"convert-activemodel-back-to-model",level:3}];function r(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"activemodel",children:"ActiveModel"})}),"\n",(0,d.jsxs)(n.p,{children:["Before diving into insert and update operations we have to introduce ",(0,d.jsx)(n.code,{children:"ActiveValue"})," and ",(0,d.jsx)(n.code,{children:"ActiveModel"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"activevalue",children:"ActiveValue"}),"\n",(0,d.jsxs)(n.p,{children:["The state of a field in an ",(0,d.jsx)(n.code,{children:"ActiveModel"}),"."]}),"\n",(0,d.jsx)(n.p,{children:"There are three possible states represented by three enum variants:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Set"})," - A ",(0,d.jsx)(n.code,{children:"Value"})," that's explicitly set by the application and sent to the database.\nUse this to insert or set a specific value."]}),"\n",(0,d.jsxs)(n.p,{children:["When editing an existing value, you can use ",(0,d.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/enum.ActiveValue.html#method.set_if_not_equals",children:(0,d.jsx)(n.code,{children:"set_if_not_equal"})}),"\nto preserve the ",(0,d.jsx)(n.code,{children:"Unchanged"})," state when the new value is the same as the old one.\nThen you can meaningfully use methods like ",(0,d.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.ActiveModelTrait.html#method.is_changed",children:(0,d.jsx)(n.code,{children:"ActiveModelTrait::is_changed"})}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"Unchanged"})," - An existing, unchanged ",(0,d.jsx)(n.code,{children:"Value"})," from the database."]}),"\n",(0,d.jsxs)(n.p,{children:["You get these when you query an existing ",(0,d.jsx)(n.code,{children:"Model"}),"\nfrom the database and convert it into an ",(0,d.jsx)(n.code,{children:"ActiveModel"}),"."]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"NotSet"})," - An undefined ",(0,d.jsx)(n.code,{children:"Value"}),". Nothing is sent to the database."]}),"\n",(0,d.jsxs)(n.p,{children:["When you create a new ",(0,d.jsx)(n.code,{children:"ActiveModel"}),", its fields are ",(0,d.jsx)(n.code,{children:"NotSet"})," by default."]}),"\n",(0,d.jsx)(n.p,{children:"This can be useful when:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"You insert a new record and want the database to generate a default value (e.g., an id)."}),"\n",(0,d.jsxs)(n.li,{children:["In an ",(0,d.jsx)(n.code,{children:"UPDATE"})," statement, you don't want to update some fields."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["The difference between these states is useful\nwhen constructing ",(0,d.jsx)(n.code,{children:"INSERT"})," and ",(0,d.jsx)(n.code,{children:"UPDATE"})," SQL statements (see examples below).\nIt's also useful for knowing which fields have changed in a record."]}),"\n",(0,d.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-rust",children:'use sea_orm::tests_cfg::{cake, fruit};\nuse sea_orm::{DbBackend, entity::*, query::*};\n\n// Here, we use `NotSet` to let the database automatically generate an `id`.\n// This is different from `Set(None)` that explicitly sets `cake_id` to `NULL`.\nassert_eq!(\n    Insert::one(fruit::ActiveModel {\n        id: ActiveValue::NotSet,\n        name: ActiveValue::Set("Orange".to_owned()),\n        cake_id: ActiveValue::Set(None),\n    })\n    .build(DbBackend::Postgres)\n    .to_string(),\n    r#"INSERT INTO "fruit" ("name", "cake_id") VALUES (\'Orange\', NULL)"#\n);\n\n// Here, we update the record, set `cake_id` to the new value\n// and use `NotSet` to avoid updating the `name` field.\n// `id` is the primary key, so it\'s used in the condition and not updated.\nassert_eq!(\n    Update::one(fruit::ActiveModel {\n        id: ActiveValue::Unchanged(1),\n        name: ActiveValue::NotSet,\n        cake_id: ActiveValue::Set(Some(2)),\n    })\n    .build(DbBackend::Postgres)\n    .to_string(),\n    r#"UPDATE "fruit" SET "cake_id" = 2 WHERE "fruit"."id" = 1"#\n);\n'})}),"\n",(0,d.jsx)(n.h2,{id:"activemodel-1",children:"ActiveModel"}),"\n",(0,d.jsxs)(n.p,{children:["An ",(0,d.jsx)(n.code,{children:"ActiveModel"})," has all the attributes of ",(0,d.jsx)(n.code,{children:"Model"})," wrapped in ",(0,d.jsx)(n.code,{children:"ActiveValue"}),"."]}),"\n",(0,d.jsxs)(n.p,{children:["You can use ",(0,d.jsx)(n.code,{children:"ActiveModel"})," to insert a row with a subset of columns set."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-rust",children:'let cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\n\n// Get Model\nlet model: cake::Model = cheese.unwrap();\nassert_eq!(model.name, "Cheese Cake".to_owned());\n\n// Into ActiveModel\nlet active_model: cake::ActiveModel = model.into();\nassert_eq!(active_model.name, ActiveValue::unchanged("Cheese Cake".to_owned()));\n'})}),"\n",(0,d.jsx)(n.h3,{id:"checking-if-an-activemodel-is-changed",children:"Checking if an ActiveModel is changed"}),"\n",(0,d.jsxs)(n.p,{children:["You can check whether any field in an ",(0,d.jsx)(n.code,{children:"ActiveModel"})," is ",(0,d.jsx)(n.code,{children:"Set"})," with the ",(0,d.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/trait.ActiveModelTrait.html#method.is_changed",children:(0,d.jsx)(n.code,{children:"is_changed"})})," method."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-rust",children:'let mut fruit: fruit::ActiveModel = Default::default();\nassert!(!fruit.is_changed());\n\nfruit.set(fruit::Column::Name, "apple".into());\nassert!(fruit.is_changed());\n'})}),"\n",(0,d.jsx)(n.h3,{id:"convert-activemodel-back-to-model",children:"Convert ActiveModel back to Model"}),"\n",(0,d.jsxs)(n.p,{children:["Using ",(0,d.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.TryIntoModel.html#tymethod.try_into_model",children:(0,d.jsx)(n.code,{children:"try_into_model"})})," method you can convert ActiveModel back to Model."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    ActiveModel {\n        id: Set(2),\n        name: Set("Apple".to_owned()),\n        cake_id: Set(Some(1)),\n    }\n    .try_into_model()\n    .unwrap(),\n    Model {\n        id: 2,\n        name: "Apple".to_owned(),\n        cake_id: Some(1),\n    }\n);\n\nassert_eq!(\n    ActiveModel {\n        id: Set(1),\n        name: NotSet,\n        cake_id: Set(None),\n    }\n    .try_into_model(),\n    Err(DbErr::AttrNotSet(String::from("name")))\n);\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(r,{...e})}):r(e)}}}]);