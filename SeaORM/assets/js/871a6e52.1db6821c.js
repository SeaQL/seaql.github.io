"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[76380],{9762:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"write-test/testing","title":"Writing Tests","description":"Testing is an integral part of programming in Rust, with cargo test built directly into the toolchain.","source":"@site/docs/07-write-test/01-testing.md","sourceDirName":"07-write-test","slug":"/write-test/testing","permalink":"/SeaORM/docs/write-test/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/07-write-test/01-testing.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761400599000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Relational Query","permalink":"/SeaORM/docs/relation/relational-query"},"next":{"title":"Mock Interface","permalink":"/SeaORM/docs/write-test/mock"}}');var i=n(74848),a=n(28453);const r={},o="Writing Tests",l={},c=[{value:"Logic Tests",id:"logic-tests",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"writing-tests",children:"Writing Tests"})}),"\n",(0,i.jsxs)(t.p,{children:["Testing is an integral part of programming in Rust, with ",(0,i.jsx)(t.a,{href:"https://doc.rust-lang.org/cargo/commands/cargo-test.html",children:(0,i.jsx)(t.code,{children:"cargo test"})})," built directly into the toolchain."]}),"\n",(0,i.jsx)(t.p,{children:"There are two kinds of tests you'd write: unit tests and integration tests."}),"\n",(0,i.jsx)(t.p,{children:"SeaORM is designed to be testable: the core API is a facade that doesn't require a database backend at compile time. That means you can bring in entities and models as plain Rust types, and use them in unit tests. You can even run queries against a mock database for advanced tests, without spinning up a database backend."}),"\n",(0,i.jsx)(t.h2,{id:"logic-tests",children:"Logic Tests"}),"\n",(0,i.jsx)(t.p,{children:"Just to give a small example, let's say we have an Entity:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",metastring:'title="triangle.rs"',children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "triangle")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub p1: Point,\n    pub p2: Point,\n    pub p3: Point,\n}\n\n#[derive(Clone, Debug, PartialEq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct Point {\n    pub x: f64,\n    pub y: f64,\n}\n\n// ..\n'})}),"\n",(0,i.jsx)(t.p,{children:"You can write unit tests for the logic around this entity:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"use triangle::{Model as Triangle, Point};\n\nimpl Triangle {\n    fn area(&self) -> f64 {\n        let a = self.p1.distance_to(&self.p2);\n        let b = self.p2.distance_to(&self.p3);\n        let c = self.p3.distance_to(&self.p1);\n        let s = (a + b + c) / 2.0;\n        (s * (s - a) * (s - b) * (s - c)).sqrt()\n    }\n}\n\nimpl Point {\n    fn distance_to(&self, p: &Point) -> f64 {\n        let dx = self.x - p.x;\n        let dy = self.y - p.y;\n        (dx * dx + dy * dy).sqrt()\n    }\n}\n\nassert!(\n    (Triangle {\n        id: 1,\n        p1: Point { x: 0., y: 0. },\n        p2: Point { x: 2., y: 0. },\n        p3: Point { x: 0., y: 2. },\n    }\n    .area() - 2.) .abs() < 0.00000001\n);\n"})}),"\n",(0,i.jsxs)(t.p,{children:["This can be done in a pure crate without ",(0,i.jsx)(t.code,{children:"tokio"})," or ",(0,i.jsx)(t.code,{children:"sqlx"})," dependency.\nThese entities will be the exact same ones you use in database interaction."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);