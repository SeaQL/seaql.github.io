"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[73249],{17769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"migration/setting-up-migration","title":"Setting Up Migration","description":"Version control your database schema with migrations written in SeaQuery or SQL.","source":"@site/versioned_docs/version-0.8.x/06-migration/01-setting-up-migration.md","sourceDirName":"06-migration","slug":"/migration/setting-up-migration","permalink":"/SeaORM/docs/0.8.x/migration/setting-up-migration","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.8.x/06-migration/01-setting-up-migration.md","tags":[],"version":"0.8.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1753879009000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Raw SQL","permalink":"/SeaORM/docs/0.8.x/basic-crud/raw-sql"},"next":{"title":"Writing Migration","permalink":"/SeaORM/docs/0.8.x/migration/writing-migration"}}');var r=t(88790),a=t(77162);const o={},s="Setting Up Migration",c={},l=[{value:"Migration Table",id:"migration-table",level:2},{value:"Creating Migration Directory",id:"creating-migration-directory",level:2},{value:"Workspace Structure",id:"workspace-structure",level:2},{value:"Entity Crate",id:"entity-crate",level:3},{value:"Migration Crate",id:"migration-crate",level:3},{value:"App Crate",id:"app-crate",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"setting-up-migration",children:"Setting Up Migration"})}),"\n",(0,r.jsx)(n.p,{children:"Version control your database schema with migrations written in SeaQuery or SQL."}),"\n",(0,r.jsx)(n.h2,{id:"migration-table",children:"Migration Table"}),"\n",(0,r.jsxs)(n.p,{children:["A table named ",(0,r.jsx)(n.code,{children:"seaql_migrations"})," will be created in your database to keep track of the applied migrations. It will be created automatically when you run the migration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "seaql_migrations")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub version: String,\n    pub applied_at: i64,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-migration-directory",children:"Creating Migration Directory"}),"\n",(0,r.jsxs)(n.p,{children:["Setup the migration directory by executing ",(0,r.jsx)(n.code,{children:"sea-orm-cli migrate init"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Setup the migration directory in `./migration`\n$ sea-orm-cli migrate init\nInitializing migration directory...\nCreating file `./migration/src/lib.rs`\nCreating file `./migration/src/m20220101_000001_create_table.rs`\nCreating file `./migration/src/main.rs`\nCreating file `./migration/Cargo.toml`\nCreating file `./migration/README.md`\nDone!\n\n# If you want to setup the migration directory in else where\n$ sea-orm-cli migrate init -d ./other/migration/dir\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should have a migration directory with a structure like below."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"migration\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 lib.rs                              # Migrator API, for integration\n    \u251c\u2500\u2500 m20220101_000001_create_table.rs    # A sample migration file\n    \u2514\u2500\u2500 main.rs                             # Migrator CLI, for running manually\n"})}),"\n",(0,r.jsx)(n.h2,{id:"workspace-structure",children:"Workspace Structure"}),"\n",(0,r.jsxs)(n.p,{children:["It is recommended to structure your cargo workspace as follows to share SeaORM entities between the app crate and the migration crate. Checkout the ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples",children:"integration examples"})," for demonstration."]}),"\n",(0,r.jsx)(n.h3,{id:"entity-crate",children:"Entity Crate"}),"\n",(0,r.jsx)(n.p,{children:"Create an entity crate in your root workspace."}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"You don't have SeaORM entities defined?"}),(0,r.jsxs)(n.p,{children:["You can create an entity crate with no entity files. Then, write the migration and run it to create tables in the database. Finally, ",(0,r.jsx)(n.a,{href:"/SeaORM/docs/0.8.x/generate-entity/sea-orm-cli",children:"generate SeaORM entities"})," with ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," and output the entity files to ",(0,r.jsx)(n.code,{children:"entity/src/entities"})," folder."]}),(0,r.jsxs)(n.p,{children:["After generating the entity files, you can re-export the generated entities by adding following lines in ",(0,r.jsx)(n.code,{children:"entity/src/lib.rs"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"mod entities;\npub use entities::*;\n"})})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"entity\n\u251c\u2500\u2500 Cargo.toml      # Include SeaORM dependency\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 lib.rs      # Re-export SeaORM and entities\n    \u2514\u2500\u2500 post.rs     # Define the `post` entity\n"})}),"\n",(0,r.jsx)(n.p,{children:"Specify SeaORM dependency."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="entity/Cargo.toml"',children:'[dependencies]\nsea-orm = { version = "^0" }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"migration-crate",children:"Migration Crate"}),"\n",(0,r.jsxs)(n.p,{children:["Import the ",(0,r.jsx)(n.a,{href:"https://crates.io/crates/sea-orm-migration",children:(0,r.jsx)(n.code,{children:"sea-orm-migration"})})," crate. If you need some SeaORM entities when writing migrations, you can import the entity crate."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="migration/Cargo.toml"',children:'[dependencies]\nsea-orm-migration = { version = "^0" }\nentity = { path = "../entity" } # depends on your needs\n'})}),"\n",(0,r.jsx)(n.p,{children:"Let's write a migration. Detailed instructions in the next section."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="migration/src/m20220120_000001_create_post_table.rs"',children:'use entity::post::*;\nuse sea_orm_migration::prelude::*;\n\npub struct Migration;\n\nimpl MigrationName for Migration {\n    fn name(&self) -> &str {\n        "m20220120_000001_create_post_table"\n    }\n}\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Entity)\n                    .if_not_exists()\n                    .col(\n                        ColumnDef::new(Column::Id)\n                            .integer()\n                            .not_null()\n                            .auto_increment()\n                            .primary_key(),\n                    )\n                    .col(ColumnDef::new(Column::Title).string().not_null())\n                    .col(ColumnDef::new(Column::Text).string().not_null())\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // if you are against backward migrations, you do not have to impl this\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .drop_table(Table::drop().table(Entity).to_owned())\n            .await\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"app-crate",children:"App Crate"}),"\n",(0,r.jsx)(n.p,{children:"This is where the application logic goes."}),"\n",(0,r.jsx)(n.p,{children:"Create a workspace that contains app, entity and migration crates and import the entity crate into the app crate."}),"\n",(0,r.jsx)(n.p,{children:"If we want to bundle the migration utility as part of your app, you'd also want to import the migration crate."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="./Cargo.toml"',children:'[workspace]\nmembers = [".", "entity", "migration"]\n\n[dependencies]\nentity = { path = "entity" }\nmigration = { path = "migration" } # depends on your needs\n\n[dependencies.sea-orm]\nversion = "^0"\nfeatures = [ ... ]\n'})}),"\n",(0,r.jsx)(n.p,{children:"In your app, you can then run the migrator on startup."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/main.rs"',children:"use migration::{Migrator, MigratorTrait};\n\nlet connection = sea_orm::Database::connect(&database_url).await?;\nMigrator::up(&connection, None).await?;\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(22374);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);