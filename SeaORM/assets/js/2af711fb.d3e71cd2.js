"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[26667],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(96540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},81103:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"advanced-query/streaming","title":"Streaming","description":"Use async stream on any Select for reducing memory allocation to improve efficiency.","source":"@site/versioned_docs/version-0.8.x/09-advanced-query/07-streaming.md","sourceDirName":"09-advanced-query","slug":"/advanced-query/streaming","permalink":"/SeaORM/docs/0.8.x/advanced-query/streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.8.x/09-advanced-query/07-streaming.md","tags":[],"version":"0.8.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1754947085000,"sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Transaction","permalink":"/SeaORM/docs/0.8.x/advanced-query/transaction"},"next":{"title":"Custom Active Model","permalink":"/SeaORM/docs/0.8.x/advanced-query/custom-active-model"}}');var a=n(74848),i=n(28453);const s={},o="Streaming",c={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"streaming",children:"Streaming"})}),"\n",(0,a.jsxs)(t.p,{children:["Use async stream on any ",(0,a.jsx)(t.code,{children:"Select"})," for reducing memory allocation to improve efficiency."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:"// Stream all fruits\nlet mut stream = Fruit::find().stream(db).await?;\n\nwhile let Some(item) = stream.try_next().await? {\n    let item: fruit::ActiveModel = item.into();\n    // do something with item\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'// Stream all fruits with name contains character "a"\nlet mut stream = Fruit::find()\n    .filter(fruit::Column::Name.contains("a"))\n    .order_by_asc(fruit::Column::Name)\n    .stream(db)\n    .await?;\n'})}),"\n",(0,a.jsx)(t.p,{children:"Note that the stream object will exclusively hold onto the connection until dropped, preventing the connection to be borrowed by others."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:"{\n    let s1 = Fruit::find().stream(db).await?;\n    let s2 = Fruit::find().stream(db).await?;\n    let s3 = Fruit::find().stream(db).await?;\n    // 3 connections are held\n}\n// All streams are dropped and connections are returned to the connection pool\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);