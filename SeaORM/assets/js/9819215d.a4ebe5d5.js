"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[49814],{28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var i=t(96540);const o={},a=i.createContext(o);function d(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(a.Provider,{value:n},e.children)}},76290:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"advanced-query/custom-active-model","title":"Custom Active Model","description":"Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.","source":"@site/versioned_docs/version-0.4.x/08-advanced-query/08-custom-active-model.md","sourceDirName":"08-advanced-query","slug":"/advanced-query/custom-active-model","permalink":"/SeaORM/docs/0.4.x/advanced-query/custom-active-model","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/08-advanced-query/08-custom-active-model.md","tags":[],"version":"0.4.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1760084251000,"sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Streaming","permalink":"/SeaORM/docs/0.4.x/advanced-query/streaming"},"next":{"title":"Traits and Types","permalink":"/SeaORM/docs/0.4.x/internal-design/trait-and-type"}}');var o=t(74848),a=t(28453);const d={},s="Custom Active Model",r={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"custom-active-model",children:"Custom Active Model"})}),"\n",(0,o.jsxs)(n.p,{children:["Creating your own struct with partial fields of a model, which implements ",(0,o.jsx)(n.code,{children:"IntoActiveModel"})," that can be converted into an ",(0,o.jsx)(n.code,{children:"ActiveModel"})," with the method ",(0,o.jsx)(n.code,{children:"into_active_model"}),". For example, it can be used as a form submission in a REST API."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"IntoActiveValue"})," trait allows converting ",(0,o.jsx)(n.code,{children:"Option<T>"})," into ",(0,o.jsx)(n.code,{children:"ActiveValue<T>"})," with the method ",(0,o.jsx)(n.code,{children:"into_active_value"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'// Define regular model as usual\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "fruit")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    pub cake_id: Option<i32>,\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Create a new struct with some fields omitted."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'#[derive(DeriveIntoActiveModel)]\npub struct NewFruit {\n    // id is omitted\n    pub name: String,\n    // it is required as opposed to optional in Model\n    pub cake_id: i32,\n}\n\nassert_eq!(\n    NewFruit {\n        name: "Apple".to_owned(),\n        cake_id: 1,\n    }\n    .into_active_model(),\n    fruit::ActiveModel {\n        id: Unset(None),\n        name: Set("Apple".to_owned()),\n        cake_id: Set(Some(1)),\n    }\n);\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Option<Option<T>>"})," allows for ",(0,o.jsx)(n.code,{children:"Some(None)"})," to update the column to be NULL."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"#[derive(DeriveIntoActiveModel)]\npub struct UpdateFruit {\n    pub cake_id: Option<Option<i32>>,\n}\n\nassert_eq!(\n    UpdateFruit {\n        cake_id: Some(Some(1)),\n    }\n    .into_active_model(),\n    fruit::ActiveModel {\n        id: Unset(None),\n        name: Unset(None),\n        cake_id: Set(Some(1)),\n    }\n);\n\nassert_eq!(\n    UpdateFruit {\n        cake_id: Some(None),\n    }\n    .into_active_model(),\n    fruit::ActiveModel {\n        id: Unset(None),\n        name: Unset(None),\n        cake_id: Set(None),\n    }\n);\n\nassert_eq!(\n    UpdateFruit {\n        cake_id: None,\n    }\n    .into_active_model(),\n    fruit::ActiveModel {\n        id: Unset(None),\n        name: Unset(None),\n        cake_id: Unset(None),\n    }\n);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);