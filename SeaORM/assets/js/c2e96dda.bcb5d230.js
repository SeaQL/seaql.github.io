"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[93101],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(96540);const i={},a=o.createContext(i);function r(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:n},e.children)}},98225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"relation/one-to-many","title":"One to Many","description":"A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of \\"a Cake entity has at most one Fruit topping\\". To make it a one-to-many relation, we remove the \\"at most one\\" constraint. So, we have a Cake entity that might have many Fruit toppings.","source":"@site/docs/06-relation/02-one-to-many.md","sourceDirName":"06-relation","slug":"/relation/one-to-many","permalink":"/SeaORM/docs/relation/one-to-many","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/06-relation/02-one-to-many.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1759584009000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"One to One","permalink":"/SeaORM/docs/relation/one-to-one"},"next":{"title":"Many to Many","permalink":"/SeaORM/docs/relation/many-to-many"}}');var i=t(74848),a=t(28453);const r={},s="One to Many",l={},d=[{value:"Defining the Relation",id:"defining-the-relation",level:2},{value:"Defining the Inverse Relation",id:"defining-the-inverse-relation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"one-to-many",children:"One to Many"})}),"\n",(0,i.jsxs)(n.p,{children:['A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a ',(0,i.jsx)(n.code,{children:"Cake"})," entity has at most one ",(0,i.jsx)(n.code,{children:"Fruit"}),' topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a ',(0,i.jsx)(n.code,{children:"Cake"})," entity that might have many ",(0,i.jsx)(n.code,{children:"Fruit"})," toppings."]}),"\n",(0,i.jsx)(n.h2,{id:"defining-the-relation",children:"Defining the Relation"}),"\n",(0,i.jsxs)(n.p,{children:["This is almost identical to defining a one-to-one relation; the only difference is that we use ",(0,i.jsx)(n.code,{children:"Entity::has_many()"})," method here."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",metastring:'title="entity/cake.rs"',children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n'})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"It's expanded to:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",metastring:"{3,9,16}",children:"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Fruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_many(super::fruit::Entity).into(),\n        }\n    }\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"defining-the-inverse-relation",children:"Defining the Inverse Relation"}),"\n",(0,i.jsxs)(n.p,{children:["It is the same as defining the one-to-one inverse relation. The rule of thumb is, always define a ",(0,i.jsx)(n.code,{children:"belongs_to"})," on the Entity with a foreign key ",(0,i.jsx)(n.code,{children:"xxx_id"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",metastring:'title="entity/fruit.rs"',children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::cake::Entity",\n        from = "Column::CakeId",\n        to = "super::cake::Column::Id"\n    )]\n    Cake,\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n'})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"It's expanded to:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Cake,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Cake => Entity::belongs_to(super::cake::Entity)\n                .from(Column::CakeId)\n                .to(super::cake::Column::Id)\n                .into(),\n        }\n    }\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n"})})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);