"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[52974],{9619:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"relation/self-referencing","title":"Self Referencing","description":"In previous section, we introduced the Linked trait. It can also help you define self referencing relations.","source":"@site/versioned_docs/version-0.6.x/07-relation/05-self-referencing.md","sourceDirName":"07-relation","slug":"/relation/self-referencing","permalink":"/SeaORM/docs/0.6.x/relation/self-referencing","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.6.x/07-relation/05-self-referencing.md","tags":[],"version":"0.6.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1754048920000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Chained Relations","permalink":"/SeaORM/docs/0.6.x/relation/chained-relations"},"next":{"title":"Bakery Schema","permalink":"/SeaORM/docs/0.6.x/relation/bakery-schema"}}');var i=t(88790),o=t(77162);const s={},a="Self Referencing",l={},c=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"self-referencing",children:"Self Referencing"})}),"\n",(0,i.jsxs)(n.p,{children:["In previous section, we introduced the ",(0,i.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.6/sea_orm/entity/trait.Linked.html",children:(0,i.jsx)(n.code,{children:"Linked"})})," trait. It can also help you define self referencing relations."]}),"\n",(0,i.jsx)(n.p,{children:"The following example defines an Entity that references itself."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "self_join")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub uuid: Uuid,\n    pub uuid_ref: Option<Uuid>,\n    pub time: Option<Time>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(belongs_to = "Entity", from = "Column::UuidRef", to = "Column::Uuid")]\n    SelfReferencing,\n}\n\npub struct SelfReferencingLink;\n\nimpl Linked for SelfReferencingLink {\n    type FromEntity = Entity;\n\n    type ToEntity = Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![Relation::SelfReferencing.def()]\n    }\n}\n'})})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(22374);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);