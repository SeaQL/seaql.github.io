"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[7622],{9064:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"internal-design/trait-and-type","title":"Traits and Types","description":"Entity","source":"@site/versioned_docs/version-0.7.x/10-internal-design/01-trait-and-type.md","sourceDirName":"10-internal-design","slug":"/internal-design/trait-and-type","permalink":"/SeaORM/docs/0.7.x/internal-design/trait-and-type","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.7.x/10-internal-design/01-trait-and-type.md","tags":[],"version":"0.7.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1759584009000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Active Model","permalink":"/SeaORM/docs/0.7.x/advanced-query/custom-active-model"},"next":{"title":"Derive Macros","permalink":"/SeaORM/docs/0.7.x/internal-design/derive-macro"}}');var r=i(74848),l=i(28453);const s={},d="Traits and Types",a={},c=[{value:"Entity",id:"entity",level:2},{value:"Column",id:"column",level:2},{value:"Primary Key",id:"primary-key",level:2},{value:"Model",id:"model",level:2},{value:"Active Model",id:"active-model",level:2},{value:"Active Enum",id:"active-enum",level:2},{value:"Relation",id:"relation",level:2},{value:"Related",id:"related",level:2},{value:"Linked",id:"linked",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"traits-and-types",children:"Traits and Types"})}),"\n",(0,r.jsx)(n.h2,{id:"entity",children:"Entity"}),"\n",(0,r.jsxs)(n.p,{children:["A unit struct that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"EntityTrait"})})," representing a table in the database."]}),"\n",(0,r.jsx)(n.p,{children:"This trait contains the properties of an entity including"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Table Name (implemented ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"EntityName"})}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Column (implemented ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ColumnTrait"})}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Relation (implemented ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"RelationTrait"})}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Primary Key (implemented ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"PrimaryKeyTrait"})})," and ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"PrimaryKeyToColumn"})}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This trait also provides an API for CRUD actions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Select: ",(0,r.jsx)(n.code,{children:"find"}),", ",(0,r.jsx)(n.code,{children:"find_*"})]}),"\n",(0,r.jsxs)(n.li,{children:["Insert: ",(0,r.jsx)(n.code,{children:"insert"}),", ",(0,r.jsx)(n.code,{children:"insert_*"})]}),"\n",(0,r.jsxs)(n.li,{children:["Update: ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"update_*"})]}),"\n",(0,r.jsxs)(n.li,{children:["Delete: ",(0,r.jsx)(n.code,{children:"delete"}),", ",(0,r.jsx)(n.code,{children:"delete_*"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"column",children:"Column"}),"\n",(0,r.jsxs)(n.p,{children:["An enum that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ColumnTrait"})})," representing all columns of the table and the column types and attributes."]}),"\n",(0,r.jsx)(n.p,{children:"It also implements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"IdenStatic"})})," provides mapping to column identifier with static lifetime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"Iterable"})})," allows SeaORM core to iterate over all column variants"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"primary-key",children:"Primary Key"}),"\n",(0,r.jsxs)(n.p,{children:["An enum that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"PrimaryKeyTrait"})})," representing the primary key. Each primary key variant must have a corresponding column variant."]}),"\n",(0,r.jsx)(n.p,{children:"It also implements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"IdenStatic"})})," provides mapping to primary key identifier with static lifetime"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"Iterable"})})," allows SeaORM core to iterate over all primary key variants"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"model",children:"Model"}),"\n",(0,r.jsxs)(n.p,{children:["A struct that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ModelTrait"})})," storing the query result in memory. This is intended for readonly purposes, and it is stateless."]}),"\n",(0,r.jsx)(n.p,{children:"It also implements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"FromQueryResult"})})," converts raw query result into corresponding model"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"active-model",children:"Active Model"}),"\n",(0,r.jsxs)(n.p,{children:["A struct that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ActiveModelTrait"})})," representing insert/update actions. This is intended to be edited and saved into database."]}),"\n",(0,r.jsx)(n.p,{children:"It also implements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ActiveModelBehavior"})})," defines handlers for different actions on an active model"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"active-enum",children:"Active Enum"}),"\n",(0,r.jsxs)(n.p,{children:["A enum that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"ActiveEnum"})})," representing value stored in database as a Rust enum variant."]}),"\n",(0,r.jsx)(n.h2,{id:"relation",children:"Relation"}),"\n",(0,r.jsxs)(n.p,{children:["An enum that implements ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"RelationTrait"})})," defined relations with other entities."]}),"\n",(0,r.jsx)(n.p,{children:"It also implements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"Iterable"})})," allows SeaORM core to iterate over all relation variants"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(n.p,{children:["A generic trait, ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"Related"})}),", defines join paths to help you query related entities together, especially helpful in many-to-many relations."]}),"\n",(0,r.jsx)(n.h2,{id:"linked",children:"Linked"}),"\n",(0,r.jsxs)(n.p,{children:["A trait, ",(0,r.jsx)(n.a,{href:"#",children:(0,r.jsx)(n.code,{children:"Linked"})}),", defines complex join paths including chained relation, self referencing relation and multiple relations between two entities."]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(96540);const r={},l=t.createContext(r);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);