"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[29396],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(96540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},74838:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"basic-crud/raw-sql","title":"Raw SQL","description":"A new macro raw_sql is added, with many neat features to make writing raw SQL queries more ergononmic.","source":"@site/docs/05-basic-crud/09-raw-sql.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/raw-sql","permalink":"/SeaORM/docs/next/basic-crud/raw-sql","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-basic-crud/09-raw-sql.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1759486910000,"sidebarPosition":9,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JSON","permalink":"/SeaORM/docs/next/basic-crud/json"},"next":{"title":"One to One","permalink":"/SeaORM/docs/next/relation/one-to-one"}}');var a=t(74848),s=t(28453);const i={},c="Raw SQL",d={},l=[{value:"Find Model by raw SQL",id:"find-model-by-raw-sql",level:2},{value:"Select into custom struct by raw SQL",id:"select-into-custom-struct-by-raw-sql",level:2},{value:"Paginate raw SQL query",id:"paginate-raw-sql-query",level:2},{value:"Inspect raw SQL from queries",id:"inspect-raw-sql-from-queries",level:2},{value:"Use Raw Query &amp; Execute Interface",id:"use-raw-query--execute-interface",level:2},{value:"Get Custom Result using <code>query_one</code> and <code>query_all</code> methods",id:"get-custom-result-using-query_one-and-query_all-methods",level:3},{value:"Execute Query using <code>execute</code> method",id:"execute-query-using-execute-method",level:3},{value:"Execute Unprepared SQL Statement",id:"execute-unprepared-sql-statement",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"raw-sql",children:"Raw SQL"})}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["Since ",(0,a.jsx)(n.code,{children:"2.0.0"})]}),(0,a.jsxs)(n.p,{children:["A new macro ",(0,a.jsx)(n.code,{children:"raw_sql"})," is added, with many neat features to make writing raw SQL queries more ergononmic."]}),(0,a.jsxs)(n.p,{children:["In particular, you can expand arrays with ",(0,a.jsx)(n.code,{children:"({..ids})"})," into ",(0,a.jsx)(n.code,{children:"(?, ?, ?)"}),"."]}),(0,a.jsxs)(n.p,{children:["Learn more in ",(0,a.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2025-08-15-sea-query-raw-sql/",children:"SeaQuery just made writing raw SQL more enjoyable"}),"."]})]}),"\n",(0,a.jsx)(n.h2,{id:"find-model-by-raw-sql",children:"Find Model by raw SQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let id = 1;\n\nlet cake: Option<cake::Model> = cake::Entity::find()\n    .from_raw_sql(raw_sql!(\n        Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" = {id}"#\n    ))\n    .one(&db)\n    .await?;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"select-into-custom-struct-by-raw-sql",children:"Select into custom struct by raw SQL"}),"\n",(0,a.jsx)(n.p,{children:"Here nested select is also demonstrated."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(FromQueryResult)]\nstruct Cake {\n    name: String,\n    #[sea_orm(nested)]\n    bakery: Option<Bakery>,\n}\n\n#[derive(FromQueryResult)]\nstruct Bakery {\n    #[sea_orm(alias = "bakery_name")]\n    name: String,\n}\n\nlet cake_ids = [2, 3, 4];\n\nlet cake: Option<Cake> = Cake::find_by_statement(raw_sql!(\n    Sqlite,\n    r#"SELECT "cake"."name", "bakery"."name" AS "bakery_name"\n       FROM "cake"\n       LEFT JOIN "bakery" ON "cake"."bakery_id" = "bakery"."id"\n       WHERE "cake"."id" IN ({..cake_ids})"#\n))\n.one(db)\n.await?;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"paginate-raw-sql-query",children:"Paginate raw SQL query"}),"\n",(0,a.jsxs)(n.p,{children:["You can paginate ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/struct.SelectorRaw.html",children:(0,a.jsx)(n.code,{children:"SelectorRaw"})})," and fetch ",(0,a.jsx)(n.code,{children:"Model"})," in batch."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let ids = vec![1, 2, 3, 4];\n\nlet mut cake_pages = cake::Entity::find()\n    .from_raw_sql(raw_sql!(\n        Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" IN ({..ids})"#\n    ))\n    .paginate(db, 10);\n\nwhile let Some(cakes) = cake_pages.fetch_and_next().await? {\n    // Do something on cakes: Vec<cake::Model>\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"inspect-raw-sql-from-queries",children:"Inspect raw SQL from queries"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"build"})," and ",(0,a.jsx)(n.code,{children:"to_string"})," methods on any CRUD operations to get the database-specific raw SQL for debugging purposes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{DbBackend, QueryTrait};\n\nassert_eq!(\n    cake_filling::Entity::find_by_id((6, 8))\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake_filling`.`cake_id`, `cake_filling`.`filling_id` FROM `cake_filling`",\n        "WHERE `cake_filling`.`cake_id` = 6 AND `cake_filling`.`filling_id` = 8",\n    ].join(" ")\n);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"use-raw-query--execute-interface",children:"Use Raw Query & Execute Interface"}),"\n",(0,a.jsxs)(n.p,{children:["You can build SQL statements using ",(0,a.jsx)(n.code,{children:"sea-query"})," and query / execute it directly on the ",(0,a.jsx)(n.code,{children:"DatabaseConnection"})," interface inside SeaORM."]}),"\n",(0,a.jsxs)(n.h3,{id:"get-custom-result-using-query_one-and-query_all-methods",children:["Get Custom Result using ",(0,a.jsx)(n.code,{children:"query_one"})," and ",(0,a.jsx)(n.code,{children:"query_all"})," methods"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let query_res: Option<QueryResult> = db\n    .query_one_raw(Statement::from_string(\n        DbBackend::MySql,\n        "SELECT * FROM `cake`;",\n    ))\n    .await?;\nlet query_res = query_res.unwrap();\nlet id: i32 = query_res.try_get("", "id")?;\n\nlet query_res_vec: Vec<QueryResult> = db\n    .query_all_raw(Statement::from_string(\n        DbBackend::MySql,\n        "SELECT * FROM `cake`;",\n    ))\n    .await?;\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"execute-query-using-execute-method",children:["Execute Query using ",(0,a.jsx)(n.code,{children:"execute"})," method"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let exec_res: ExecResult = db\n    .execute_raw(Statement::from_string(\n        DbBackend::MySql,\n        "DROP DATABASE IF EXISTS `sea`;",\n    ))\n    .await?;\nassert_eq!(exec_res.rows_affected(), 1);\n'})}),"\n",(0,a.jsx)(n.h2,{id:"execute-unprepared-sql-statement",children:"Execute Unprepared SQL Statement"}),"\n",(0,a.jsxs)(n.p,{children:["You can execute an unprepared SQL statement with ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/trait.ConnectionTrait.html#tymethod.execute_unprepared",children:(0,a.jsx)(n.code,{children:"ConnectionTrait::execute_unprepared"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let exec_res: ExecResult =\n    db.execute_unprepared("CREATE EXTENSION IF NOT EXISTS citext").await?;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}}}]);