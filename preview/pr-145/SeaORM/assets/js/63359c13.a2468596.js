"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[34754],{77162:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>l});var i=t(22374);const r={},s=i.createContext(r);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:n},e.children)}},79471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"generate-entity/entity-structure","title":"Entity Structure","description":"Let\'s look at a simple Cake entity.","source":"@site/versioned_docs/version-0.11.x/04-generate-entity/02-entity-structure.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/entity-structure","permalink":"/preview/pr-145/SeaORM/docs/0.11.x/generate-entity/entity-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.11.x/04-generate-entity/02-entity-structure.md","tags":[],"version":"0.11.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1747536252000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using sea-orm-cli","permalink":"/preview/pr-145/SeaORM/docs/0.11.x/generate-entity/sea-orm-cli"},"next":{"title":"Expanded Entity Structure","permalink":"/preview/pr-145/SeaORM/docs/0.11.x/generate-entity/expanded-entity-structure"}}');var r=t(88790),s=t(77162);const d={},l="Entity Structure",a={},c=[{value:"Entity",id:"entity",level:2},{value:"Table Name",id:"table-name",level:3},{value:"Column",id:"column",level:2},{value:"Column Name",id:"column-name",level:3},{value:"Column Type",id:"column-type",level:3},{value:"Additional Properties",id:"additional-properties",level:3},{value:"Ignore Attribute",id:"ignore-attribute",level:3},{value:"Cast Column Type on Select and Save",id:"cast-column-type-on-select-and-save",level:3},{value:"Primary Key",id:"primary-key",level:2},{value:"Auto Increment",id:"auto-increment",level:3},{value:"Composite Key",id:"composite-key",level:3},{value:"Relation",id:"relation",level:2},{value:"Active Model Behavior",id:"active-model-behavior",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"entity-structure",children:"Entity Structure"})}),"\n",(0,r.jsxs)(n.p,{children:["Let's look at a simple ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/tests_cfg/cake.rs",children:"Cake"})," entity."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Do not delete ",(0,r.jsx)(n.code,{children:"Relation"})," enum or ",(0,r.jsx)(n.code,{children:"ActiveModelBehavior"})," impl block even if you do not want any relations or additional behavior.\nKeep their body empty is enough to make the entity just work."]})}),"\n",(0,r.jsx)(n.h2,{id:"entity",children:"Entity"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"DeriveEntityModel"})," macro does all the heavy lifting of defining an ",(0,r.jsx)(n.code,{children:"Entity"})," with associating ",(0,r.jsx)(n.code,{children:"Model"}),", ",(0,r.jsx)(n.code,{children:"Column"})," and ",(0,r.jsx)(n.code,{children:"PrimaryKey"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"table-name",children:"Table Name"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"table_name"})," attribute specifies the corresponding table in the database.\nOptionally, you can also specify the database schema or database name by ",(0,r.jsx)(n.code,{children:"schema_name"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(table_name = "cake", schema_name = "public")]\npub struct Model { ... }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"column",children:"Column"}),"\n",(0,r.jsx)(n.h3,{id:"column-name",children:"Column Name"}),"\n",(0,r.jsxs)(n.p,{children:["All column names are assumed to be in snake-case. You can override the column name by specifying the ",(0,r.jsx)(n.code,{children:"column_name"})," attribute."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_name = "name")]\npub name: String\n'})}),"\n",(0,r.jsx)(n.h3,{id:"column-type",children:"Column Type"}),"\n",(0,r.jsx)(n.p,{children:"The column type will be derived automatically with the following mapping:"}),"\n",(0,r.jsx)(n.p,{children:"For the mappings of Rust primitive data types."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Rust type"}),(0,r.jsxs)(n.th,{children:["Database Type ",(0,r.jsx)("br",{})," (",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/enum.ColumnType.html",children:(0,r.jsx)(n.code,{children:"ColumnType"})}),")"]}),(0,r.jsxs)(n.th,{children:["SQLite ",(0,r.jsx)("br",{})," datatype"]}),(0,r.jsxs)(n.th,{children:["MySQL ",(0,r.jsx)("br",{})," datatype"]}),(0,r.jsxs)(n.th,{children:["PostgreSQL ",(0,r.jsx)("br",{})," datatype"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})}),(0,r.jsx)(n.td,{children:"Char"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"char"}),(0,r.jsx)(n.td,{children:"char"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"String"})}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"varchar"}),(0,r.jsx)(n.td,{children:"varchar"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i8"})}),(0,r.jsx)(n.td,{children:"TinyInteger"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"tinyint"}),(0,r.jsx)(n.td,{children:"char"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"u8"})}),(0,r.jsx)(n.td,{children:"TinyUnsigned"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"tinyint unsigned"}),(0,r.jsx)(n.td,{children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i16"})}),(0,r.jsx)(n.td,{children:"SmallInteger"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"smallint"}),(0,r.jsx)(n.td,{children:"smallint"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"u16"})}),(0,r.jsx)(n.td,{children:"SmallUnsigned"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"smallint unsigned"}),(0,r.jsx)(n.td,{children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i32"})}),(0,r.jsx)(n.td,{children:"Integer"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"int"}),(0,r.jsx)(n.td,{children:"integer"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"u32"})}),(0,r.jsx)(n.td,{children:"Unsigned"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"int unsigned"}),(0,r.jsx)(n.td,{children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"i64"})}),(0,r.jsx)(n.td,{children:"BigInteger"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"bigint"}),(0,r.jsx)(n.td,{children:"bigint"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"u64"})}),(0,r.jsx)(n.td,{children:"BigUnsigned"}),(0,r.jsx)(n.td,{children:"N/A"}),(0,r.jsx)(n.td,{children:"bigint unsigned"}),(0,r.jsx)(n.td,{children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f32"})}),(0,r.jsx)(n.td,{children:"Float"}),(0,r.jsx)(n.td,{children:"real"}),(0,r.jsx)(n.td,{children:"float"}),(0,r.jsx)(n.td,{children:"real"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"f64"})}),(0,r.jsx)(n.td,{children:"Double"}),(0,r.jsx)(n.td,{children:"real"}),(0,r.jsx)(n.td,{children:"double"}),(0,r.jsx)(n.td,{children:"double precision"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bool"})}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"integer"}),(0,r.jsx)(n.td,{children:"bool"}),(0,r.jsx)(n.td,{children:"bool"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Vec<u8>"})}),(0,r.jsx)(n.td,{children:"Binary"}),(0,r.jsx)(n.td,{children:"blob"}),(0,r.jsx)(n.td,{children:"blob"}),(0,r.jsx)(n.td,{children:"bytea"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["For the mappings of Rust non-primitive data types. You can check ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/entity/prelude.rs",children:(0,r.jsx)(n.code,{children:"entity/prelude.rs"})})," for all of the reexported types."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Rust type"}),(0,r.jsxs)(n.th,{children:["Database Type ",(0,r.jsx)("br",{})," (",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/enum.ColumnType.html",children:(0,r.jsx)(n.code,{children:"ColumnType"})}),")"]}),(0,r.jsxs)(n.th,{children:["SQLite ",(0,r.jsx)("br",{})," datatype"]}),(0,r.jsxs)(n.th,{children:["MySQL ",(0,r.jsx)("br",{})," datatype"]}),(0,r.jsxs)(n.th,{children:["PostgreSQL ",(0,r.jsx)("br",{})," datatype"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Date"}),": chrono::NaiveDate ",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"TimeDate"}),": time::Date"]}),(0,r.jsx)(n.td,{children:"Date"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"date"}),(0,r.jsx)(n.td,{children:"date"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Time"}),": chrono::NaiveTime ",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"TimeTime"}),": time::Time"]}),(0,r.jsx)(n.td,{children:"Time"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"time"}),(0,r.jsx)(n.td,{children:"time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"DateTime"}),": chrono::NaiveDateTime ",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"TimeDateTime"}),": time::PrimitiveDateTime"]}),(0,r.jsx)(n.td,{children:"DateTime"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"datetime"}),(0,r.jsx)(n.td,{children:"timestamp"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"DateTimeLocal"}),": chrono::DateTime<Local> ",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"DateTimeUtc"}),": chrono::DateTime<Utc>"]}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{children:"N/A"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"DateTimeWithTimeZone"}),": chrono::DateTime<FixedOffset> ",(0,r.jsx)("br",{}),(0,r.jsx)(n.code,{children:"TimeDateTimeWithTimeZone"}),": time::OffsetDateTime"]}),(0,r.jsx)(n.td,{children:"TimestampWithTimeZone"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"timestamp"}),(0,r.jsx)(n.td,{children:"timestamp with time zone"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Uuid"}),": uuid::Uuid, uuid::fmt::Braced, uuid::fmt::Hyphenated, uuid::fmt::Simple, uuid::fmt::Urn"]}),(0,r.jsx)(n.td,{children:"Uuid"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"binary(16)"}),(0,r.jsx)(n.td,{children:"uuid"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Json"}),": serde_json::Value"]}),(0,r.jsx)(n.td,{children:"Json"}),(0,r.jsx)(n.td,{children:"text"}),(0,r.jsx)(n.td,{children:"json"}),(0,r.jsx)(n.td,{children:"json"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"Decimal"}),": rust_decimal::Decimal"]}),(0,r.jsx)(n.td,{children:"Decimal"}),(0,r.jsx)(n.td,{children:"real"}),(0,r.jsx)(n.td,{children:"decimal"}),(0,r.jsx)(n.td,{children:"decimal"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["You can override the default mappings between a Rust type and ",(0,r.jsx)(n.code,{children:"ColumnType"})," by the ",(0,r.jsx)(n.code,{children:"column_type"})," attribute."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_type = "Text")]\npub name: String\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you need your JSON field to be deserialized into a struct. You would need to derive ",(0,r.jsx)(n.code,{children:"FromJsonQueryResult"})," for it."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_struct")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    // JSON column defined in `serde_json::Value`\n    pub json: Json,\n    // JSON column defined in custom struct\n    pub json_value: KeyValue,\n    pub json_value_opt: Option<KeyValue>,\n}\n\n// The custom struct must derive `FromJsonQueryResult`, `Serialize` and `Deserialize`\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct KeyValue {\n    pub id: i32,\n    pub name: String,\n    pub price: f32,\n    pub notes: Option<String>,\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Array datatype is supported for PostgreSQL, you can define a vector of any types that are already supported by SeaORM in the model. Keep in mind that you need to enable the ",(0,r.jsx)(n.code,{children:"postgres-array"})," feature and this is a Postgres only feature."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(table_name = "collection")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub integers: Vec<i32>,\n    pub integers_opt: Option<Vec<i32>>,\n    pub floats: Vec<f32>,\n    pub doubles: Vec<f64>,\n    pub strings: Vec<String>,\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"additional-properties",children:"Additional Properties"}),"\n",(0,r.jsxs)(n.p,{children:["You can add additional properties ",(0,r.jsx)(n.code,{children:"default_value"}),", ",(0,r.jsx)(n.code,{children:"unique"}),", ",(0,r.jsx)(n.code,{children:"indexed"})," and ",(0,r.jsx)(n.code,{children:"nullable"})," to a column."]}),"\n",(0,r.jsxs)(n.p,{children:["If you specified a custom ",(0,r.jsx)(n.code,{children:"column_type"})," for an optional attribute, you must also specify ",(0,r.jsx)(n.code,{children:"nullable"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_type = "Text", default_value = "Sam", unique, indexed, nullable)]\npub name: Option<String>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"ignore-attribute",children:"Ignore Attribute"}),"\n",(0,r.jsxs)(n.p,{children:["If you want to ignore a particular model attribute such that it maps to no database column, you can use the ",(0,r.jsx)(n.code,{children:"ignore"})," annotation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(ignore)]\npub ignore_me: String\n"})}),"\n",(0,r.jsx)(n.h3,{id:"cast-column-type-on-select-and-save",children:"Cast Column Type on Select and Save"}),"\n",(0,r.jsxs)(n.p,{children:["If you need to select a column as one type but save it into the database as another, you can specify the ",(0,r.jsx)(n.code,{children:"select_as"})," and the ",(0,r.jsx)(n.code,{children:"save_as"})," attributes to perform the casting. A typical use case is selecting a column of type ",(0,r.jsx)(n.code,{children:"citext"})," (case-insensitive text) as ",(0,r.jsx)(n.code,{children:"String"})," in Rust and saving it into the database as ",(0,r.jsx)(n.code,{children:"citext"}),". One should define the model field as below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(select_as = "text", save_as = "citext")]\npub case_insensitive_text: String\n'})}),"\n",(0,r.jsx)(n.h2,{id:"primary-key",children:"Primary Key"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"primary_key"})," attribute to mark a column as the primary key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key)]\npub id: i32\n"})}),"\n",(0,r.jsx)(n.h3,{id:"auto-increment",children:"Auto Increment"}),"\n",(0,r.jsxs)(n.p,{children:["By default, ",(0,r.jsx)(n.code,{children:"auto_increment"})," is implied for ",(0,r.jsx)(n.code,{children:"primary_key"})," column. Override it by specifying ",(0,r.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key, auto_increment = false)]\npub id: i32\n"})}),"\n",(0,r.jsx)(n.h3,{id:"composite-key",children:"Composite Key"}),"\n",(0,r.jsxs)(n.p,{children:["This is usually the case in junction tables, where a two-column tuple is used as the primary key. Simply annotate multiple columns to define a composite primary key. By default, ",(0,r.jsx)(n.code,{children:"auto_increment"})," is ",(0,r.jsx)(n.code,{children:"false"})," for composite key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"pub struct Model {\n    #[sea_orm(primary_key)]\n    pub cake_id: i32,\n    #[sea_orm(primary_key)]\n    pub fruit_id: i32,\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"relation",children:"Relation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"DeriveRelation"})," is a macro to help you implement the ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.RelationTrait.html",children:(0,r.jsx)(n.code,{children:"RelationTrait"})}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"If there are no relations, simply write:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.Related.html",children:"Related"})," trait connects entities together, such that you can build queries selecting both entities."]}),"\n",(0,r.jsxs)(n.p,{children:["Learn more about relations in the ",(0,r.jsx)(n.a,{href:"/preview/pr-145/SeaORM/docs/0.11.x/relation/one-to-one",children:"Relation"})," chapter."]}),"\n",(0,r.jsx)(n.h2,{id:"active-model-behavior",children:"Active Model Behavior"}),"\n",(0,r.jsxs)(n.p,{children:["Handlers for different actions on an ",(0,r.jsx)(n.code,{children:"ActiveModel"}),". For example, you can perform custom validation logic or trigger side effects. Inside a transaction, you can even abort an action after it is done, preventing it from saving into the database."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    /// Create a new ActiveModel with default values. Also used by `Default::default()`.\n    fn new() -> Self {\n        Self {\n            uuid: Set(Uuid::new_v4()),\n            ..ActiveModelTrait::default()\n        }\n    }\n\n    /// Will be triggered before insert / update\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        if self.price.as_ref() <= &0.0 {\n            Err(DbErr::Custom(format!(\n                "[before_save] Invalid Price, insert: {}",\n                insert\n            )))\n        } else {\n            Ok(self)\n        }\n    }\n\n    /// Will be triggered after insert / update\n    async fn after_save<C>(model: Model, db: &C, insert: bool) -> Result<Model, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(model)\n    }\n\n    /// Will be triggered before delete\n    async fn before_delete<C>(self, db: &C) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(self)\n    }\n\n    /// Will be triggered after delete\n    async fn after_delete<C>(self, db: &C) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(self)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"If no customization is needed, simply write:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"impl ActiveModelBehavior for ActiveModel {}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);