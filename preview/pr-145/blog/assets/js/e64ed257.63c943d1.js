"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[9709],{6521:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>o});var s=n(9395),l=n(8790),i=n(7630);const t={slug:"2024-12-03-whats-new-in-seaquery-0.32.x",title:"What's new in SeaQuery 0.32.x",author:"SeaQL Team",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/blog/img/SeaQL.png",tags:["news"]},a=void 0,d={authorsImageUrls:[void 0]},o=[{value:"New Features",id:"new-features",level:2},{value:"Unify <code>Expr</code> and <code>SimpleExpr</code> Methods with <code>ExprTrait</code> #791",id:"unify-expr-and-simpleexpr-methods-with-exprtrait-791",level:3},{value:"Support of Postgres Vector #774",id:"support-of-postgres-vector-774",level:3},{value:"Support Partial Index #478",id:"support-partial-index-478",level:3},{value:"Get Null Value",id:"get-null-value",level:3},{value:"Bitwise AND/OR Operators #841",id:"bitwise-andor-operators-841",level:3},{value:"Enhancements",id:"enhancements",level:2},{value:"<code>sea-query-derive</code>",id:"sea-query-derive",level:3},{value:"<code>sea-query-attr</code>",id:"sea-query-attr",level:3},{value:"Upgrades",id:"upgrades",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Community",id:"community",level:2},{value:"Rustacean Sticker Pack \ud83e\udd80",id:"rustacean-sticker-pack-",level:2}];function c(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(r.p,{children:["\ud83c\udf89 We are pleased to release SeaQuery ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.32.0",children:(0,l.jsx)(r.code,{children:"0.32.0"})})," / ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.32.1",children:(0,l.jsx)(r.code,{children:"0.32.1"})}),"! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,l.jsx)(r.h2,{id:"new-features",children:"New Features"}),"\n",(0,l.jsxs)(r.h3,{id:"unify-expr-and-simpleexpr-methods-with-exprtrait-791",children:["Unify ",(0,l.jsx)(r.code,{children:"Expr"})," and ",(0,l.jsx)(r.code,{children:"SimpleExpr"})," Methods with ",(0,l.jsx)(r.code,{children:"ExprTrait"})," ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/791",children:"#791"})]}),"\n",(0,l.jsxs)(r.p,{children:['Previously, "operator" methods (e.g. ',(0,l.jsx)(r.code,{children:"add"}),", ",(0,l.jsx)(r.code,{children:"eq"}),") are duplicated across ",(0,l.jsx)(r.code,{children:"Expr"})," and ",(0,l.jsx)(r.code,{children:"SimpleExpr"}),", but the list of methods is slightly different for each. And since ",(0,l.jsx)(r.code,{children:"Expr"})," and ",(0,l.jsx)(r.code,{children:"SimpleExpr"})," are distinct types, it makes writing generic code difficult."]}),"\n",(0,l.jsxs)(r.p,{children:["The ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/expr/trait.ExprTrait.html",children:(0,l.jsx)(r.code,{children:"ExprTrait"})})," looks like this:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:"pub trait ExprTrait: Sized {\n    // Required methods\n    fn as_enum<N>(self, type_name: N) -> SimpleExpr\n        where N: IntoIden;\n    fn binary<O, R>(self, op: O, right: R) -> SimpleExpr\n        where O: Into<BinOper>,\n    R: Into<SimpleExpr>;\n    fn cast_as<N>(self, type_name: N) -> SimpleExpr\n        where N: IntoIden;\n    fn unary(self, o: UnOper) -> SimpleExpr;\n\n    // Provided methods\n    fn add<R>(self, right: R) -> SimpleExpr where R: Into<SimpleExpr> { ... }\n    fn and<R>(self, right: R) -> SimpleExpr where R: Into<SimpleExpr> { ... }\n    fn between<A, B>(self, a: A, b: B) -> SimpleExpr\n        where A: Into<SimpleExpr>,\n              B: Into<SimpleExpr> { ... }\n    fn div<R>(self, right: R) -> SimpleExpr where R: Into<SimpleExpr> { ... }\n    fn eq<R>(self, right: R) -> SimpleExpr where R: Into<SimpleExpr> { ... }\n    fn equals<C>(self, col: C) -> SimpleExpr where C: IntoColumnRef { ... }\n\n    // omitting the where clause below to make it more concise ..\n\n    fn gt<R>(self, right: R) -> SimpleExpr;\n    fn gte<R>(self, right: R) -> SimpleExpr;\n    fn in_subquery(self, sel: SelectStatement) -> SimpleExpr;\n    fn in_tuples<V, I>(self, v: I) -> SimpleExpr;\n    fn is<R>(self, right: R) -> SimpleExpr;\n    fn is_in<V, I>(self, v: I) -> SimpleExpr;\n    fn is_not<R>(self, right: R) -> SimpleExpr;\n    fn is_not_in<V, I>(self, v: I) -> SimpleExpr;\n    fn is_not_null(self) -> SimpleExpr;\n    fn is_null(self) -> SimpleExpr;\n    fn left_shift<R>(self, right: R) -> SimpleExpr;\n    fn like<L>(self, like: L) -> SimpleExpr;\n    fn lt<R>(self, right: R) -> SimpleExpr;\n    fn lte<R>(self, right: R) -> SimpleExpr;\n    fn modulo<R>(self, right: R) -> SimpleExpr;\n    fn mul<R>(self, right: R) -> SimpleExpr;\n    fn ne<R>(self, right: R) -> SimpleExpr;\n    fn not(self) -> SimpleExpr;\n    fn not_between<A, B>(self, a: A, b: B) -> SimpleExpr;\n    fn not_equals<C>(self, col: C) -> SimpleExpr;\n    fn not_in_subquery(self, sel: SelectStatement) -> SimpleExpr;\n    fn not_like<L>(self, like: L) -> SimpleExpr;\n    fn or<R>(self, right: R) -> SimpleExpr;\n    fn right_shift<R>(self, right: R) -> SimpleExpr;\n    fn sub<R>(self, right: R) -> SimpleExpr;\n    fn bit_and<R>(self, right: R) -> SimpleExpr;\n    fn bit_or<R>(self, right: R) -> SimpleExpr;\n}\n"})}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.code,{children:"ExprTrait"})," to unify ",(0,l.jsx)(r.code,{children:"Expr"})," and ",(0,l.jsx)(r.code,{children:"SimpleExpr"})," methods"]}),"\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.code,{children:"impl<T> ExprTrait for T where T: Into<SimpleExpr>"})," to maintain backwards compatibility for all ",(0,l.jsx)(r.code,{children:"Into<SimpleExpr>"})," types, such as ",(0,l.jsx)(r.code,{children:"Value"})," and ",(0,l.jsx)(r.code,{children:"FunctionCall"})]}),"\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.code,{children:"trait PgExpr: ExprTrait"}),": database specific expression for Postgres and ",(0,l.jsx)(r.code,{children:"impl PgExpr"})," for ",(0,l.jsx)(r.code,{children:"FunctionCall"}),", ",(0,l.jsx)(r.code,{children:"ColumnRef"}),", ",(0,l.jsx)(r.code,{children:"Keyword"}),", ",(0,l.jsx)(r.code,{children:"LikeExpr"}),", ",(0,l.jsx)(r.code,{children:"Value"})]}),"\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.code,{children:"trait SqliteExpr: ExprTrait"}),": database specific expression for SQLite and ",(0,l.jsx)(r.code,{children:"impl SqliteExpr"})," for ",(0,l.jsx)(r.code,{children:"FunctionCall"}),", ",(0,l.jsx)(r.code,{children:"ColumnRef"}),", ",(0,l.jsx)(r.code,{children:"Keyword"}),", ",(0,l.jsx)(r.code,{children:"LikeExpr"}),", ",(0,l.jsx)(r.code,{children:"Value"})]}),"\n"]}),"\n",(0,l.jsxs)(r.h3,{id:"support-of-postgres-vector-774",children:["Support of Postgres Vector ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/774",children:"#774"})]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"Construct Postgres query with vector extension"}),"\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.code,{children:"postgres-vector"})," feature flag"]}),"\n",(0,l.jsxs)(r.li,{children:["Added ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/value/enum.Value.html#variant.Vector",children:(0,l.jsx)(r.code,{children:"Value::Vector"})}),", ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/table/enum.ColumnType.html#variant.Vector",children:(0,l.jsx)(r.code,{children:"ColumnType::Vector"})}),", ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/table/struct.ColumnDef.html#method.vector",children:(0,l.jsx)(r.code,{children:"ColumnDef::vector()"})}),", ",(0,l.jsx)(r.code,{children:"PgBinOper::EuclideanDistance"}),", ",(0,l.jsx)(r.code,{children:"PgBinOper::NegativeInnerProduct"})," and ",(0,l.jsx)(r.code,{children:"PgBinOper::CosineDistance"})]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"Example:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:'assert_eq!(\n    Query::select()\n        .columns([Char::Character])\n        .from(Char::Table)\n        .and_where(\n            Expr::col(Char::Character).eq(Expr::val(pgvector::Vector::from(vec![1.0, 2.0])))\n        )\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT "character" FROM "character" WHERE "character" = \'[1,2]\'"#\n);\n'})}),"\n",(0,l.jsxs)(r.h3,{id:"support-partial-index-478",children:["Support Partial Index ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/478",children:"#478"})]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["Support partial index ",(0,l.jsx)(r.code,{children:"CREATE INDEX .. WHERE .."})]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"Example (Postgres):"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:'assert_eq!(\n    Index::create()\n        .unique()\n        .nulls_not_distinct()\n        .name("partial-index-glyph-image-not-null")\n        .table(Glyph::Table)\n        .col(Glyph::Image)\n        .and_where(Expr::col(Glyph::Image).is_not_null())\n        .to_string(PostgresQueryBuilder),\n    r#"CREATE UNIQUE INDEX "partial-index-glyph-image-not-null" ON "glyph" ("image") NULLS NOT DISTINCT WHERE "image" IS NOT NULL"#\n);\n'})}),"\n",(0,l.jsx)(r.p,{children:"Example (Sqlite):"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:'assert_eq!(\n    Index::create()\n        .if_not_exists()\n        .unique()\n        .name("partial-index-glyph-image-not-null")\n        .table(Glyph::Table)\n        .col(Glyph::Image)\n        .and_where(Expr::col(Glyph::Image).is_not_null())\n        .to_string(SqliteQueryBuilder),\n    r#"CREATE UNIQUE INDEX IF NOT EXISTS "partial-index-glyph-image-not-null" ON "glyph" ("image") WHERE "image" IS NOT NULL"#\n);\n'})}),"\n",(0,l.jsx)(r.h3,{id:"get-null-value",children:"Get Null Value"}),"\n",(0,l.jsxs)(r.p,{children:["This one may seem a little bummer, but it is type system problem. In order to support the Postgres protocol, SeaQuery's ",(0,l.jsx)(r.code,{children:"Value"})," enum does not have a ",(0,l.jsx)(r.code,{children:"Null"})," variant. This new ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/value/enum.Value.html#method.as_null",children:(0,l.jsx)(r.code,{children:"Value::as_null"})})," method allows you to:"]}),"\n",(0,l.jsxs)(r.ol,{children:["\n",(0,l.jsx)(r.li,{children:"construct a typed null value"}),"\n",(0,l.jsx)(r.li,{children:"nullify a value"}),"\n",(0,l.jsxs)(r.li,{children:["define generic functions (",(0,l.jsx)(r.code,{children:"impl Into<Value>"}),")"]}),"\n"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:"let v = Value::Int(Some(2));\nlet n = v.as_null();\n\nassert_eq!(n, Value::Int(None));\n\n// one liner:\nassert_eq!(Into::<Value>::into(2.2).as_null(), Value::Double(None));\n"})}),"\n",(0,l.jsxs)(r.h3,{id:"bitwise-andor-operators-841",children:["Bitwise AND/OR Operators ",(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/841",children:"#841"})]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["Added bitwise and/or operators (",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/expr/trait.ExprTrait.html#method.bit_and",children:(0,l.jsx)(r.code,{children:"bit_and"})}),", ",(0,l.jsx)(r.a,{href:"https://docs.rs/sea-query/0.32.1/sea_query/expr/trait.ExprTrait.html#method.bit_or",children:(0,l.jsx)(r.code,{children:"bit_or"})}),")"]}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:"Examples:"}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:'let query = Query::select()\n    .expr(1.bit_and(2).eq(3))\n    .to_owned();\n\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT (1 & 2) = 3"#\n);\n'})}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{className:"language-rust",children:'let query = Query::select()\n    .expr(1.bit_or(2).eq(3))\n    .to_owned();\n\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT (1 | 2) = 3"#\n);\n'})}),"\n",(0,l.jsx)(r.h2,{id:"enhancements",children:"Enhancements"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/817",children:"#817"})," Replaced ",(0,l.jsx)(r.code,{children:"Educe"})," with manual implementations","\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"This is an effort to cut down compilation time"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/844",children:"#844"})," Added ",(0,l.jsx)(r.code,{children:"GREATEST"})," & ",(0,l.jsx)(r.code,{children:"LEAST"})," function"]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/836",children:"#836"})," Added ",(0,l.jsx)(r.code,{children:"ValueType::enum_type_name()"})]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/835",children:"#835"}),' Removed "one common table" restriction on recursive CTE']}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"sea-query-derive",children:(0,l.jsx)(r.code,{children:"sea-query-derive"})}),"\n",(0,l.jsxs)(r.p,{children:["We've finally done it! Removing the last bit of ",(0,l.jsx)(r.code,{children:"syn"})," v1 from our dependency tree:"]}),"\n",(0,l.jsx)(r.pre,{children:(0,l.jsx)(r.code,{children:"sea-query % cargo tree |grep 'syn '\n\u2502   \u2514\u2500\u2500 syn v2.0.39\n    \u2502   \u2502   \u2514\u2500\u2500 syn v2.0.39 (*)\n    \u2502       \u2514\u2500\u2500 syn v2.0.39 (*)\n    \u251c\u2500\u2500 syn v2.0.39 (*)\n            \u2514\u2500\u2500 syn v2.0.39 (*)\n\u2502   \u2502   \u2514\u2500\u2500 syn v2.0.39 (*)\n"})}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["Merged ",(0,l.jsx)(r.code,{children:"#[enum_def]"})," into ",(0,l.jsx)(r.code,{children:"sea-query-derive"})]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/769",children:"#769"})," ",(0,l.jsx)(r.code,{children:"#[enum_def]"})," now impl additional ",(0,l.jsx)(r.code,{children:"IdenStatic"})," and ",(0,l.jsx)(r.code,{children:"AsRef<str>"})]}),"\n"]}),"\n",(0,l.jsx)(r.h3,{id:"sea-query-attr",children:(0,l.jsx)(r.code,{children:"sea-query-attr"})}),"\n",(0,l.jsxs)(r.p,{children:["We've merged this crate into ",(0,l.jsx)(r.code,{children:"sea-query-derive"}),", and they will be maintained together from now on."]}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:["Updated ",(0,l.jsx)(r.code,{children:"syn"}),", ",(0,l.jsx)(r.code,{children:"heck"})," and ",(0,l.jsx)(r.code,{children:"darling"})]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.code,{children:"sea-query-attr"})," is now deprecated"]}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"upgrades",children:"Upgrades"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/798",children:"#798"})," Upgraded ",(0,l.jsx)(r.code,{children:"sqlx"})," to ",(0,l.jsx)(r.code,{children:"0.8"})]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/798",children:"#798"})," Upgraded ",(0,l.jsx)(r.code,{children:"bigdecimal"})," to ",(0,l.jsx)(r.code,{children:"0.4"})]}),"\n",(0,l.jsxs)(r.li,{children:[(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/802",children:"#802"})," Upgraded ",(0,l.jsx)(r.code,{children:"rusqlite"})," to ",(0,l.jsx)(r.code,{children:"0.32"})]}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,l.jsx)(r.p,{children:"SeaQuery plays well with the other crates in the rust ecosystem."}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/postgres",children:"Postgres Example"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/rusqlite",children:"Rusqlite Example"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_mysql",children:"SQLx MySql Example"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_postgres",children:"SQLx Postgres Example"})}),"\n",(0,l.jsx)(r.li,{children:(0,l.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_sqlite",children:"SQLx Sqlite Example"})}),"\n"]}),"\n",(0,l.jsx)(r.h2,{id:"community",children:"Community"}),"\n",(0,l.jsxs)(r.p,{children:["SeaQL.org is an independent open-source organization run by passionate \ufe0fdevelopers. If you like our projects, please star \u2b50 and share our repositories. If you feel generous, a small donation via ",(0,l.jsx)(r.a,{href:"https://github.com/sponsors/SeaQL",children:"GitHub Sponsor"})," will be greatly appreciated, and goes a long way towards sustaining the organization \ud83d\udea2."]}),"\n",(0,l.jsx)(r.p,{children:"SeaQuery is a community driven project. We welcome you to participate, contribute and together build for Rust's future \ud83e\udd80."}),"\n",(0,l.jsx)(r.h2,{id:"rustacean-sticker-pack-",children:"Rustacean Sticker Pack \ud83e\udd80"}),"\n",(0,l.jsx)(r.p,{children:"The Rustacean Sticker Pack is the perfect way to express your passion for Rust.\nOur stickers are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"}),"\n",(0,l.jsx)(r.p,{children:"Moreover, all proceeds contributes directly to the ongoing development of SeaQL projects."}),"\n",(0,l.jsx)(r.p,{children:"Sticker Pack Contents:"}),"\n",(0,l.jsxs)(r.ul,{children:["\n",(0,l.jsx)(r.li,{children:"Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG"}),"\n",(0,l.jsx)(r.li,{children:"Mascot of SeaQL: Terres the Hermit Crab"}),"\n",(0,l.jsx)(r.li,{children:"Mascot of Rust: Ferris the Crab"}),"\n",(0,l.jsx)(r.li,{children:"The Rustacean word"}),"\n"]}),"\n",(0,l.jsx)(r.p,{children:(0,l.jsx)(r.a,{href:"https://www.sea-ql.org/sticker-pack/",children:"Support SeaQL and get a Sticker Pack!"})}),"\n",(0,l.jsx)("a",{href:"https://www.sea-ql.org/sticker-pack/",children:(0,l.jsx)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,l.jsx)(r,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},7630:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var s=n(2374);const l={},i=s.createContext(l);function t(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(i.Provider,{value:r},e.children)}},9395:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-145/blog/2024-12-03-whats-new-in-seaquery-0.32.x","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-12-03-whats-new-in-seaquery-0.32.x.md","source":"@site/blog/2024-12-03-whats-new-in-seaquery-0.32.x.md","title":"What\'s new in SeaQuery 0.32.x","description":"\ud83c\udf89 We are pleased to release SeaQuery 0.32.0 / 0.32.1! Here are some feature highlights \ud83c\udf1f:","date":"2024-12-03T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-145/blog/tags/news"}],"readingTime":5.24,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/blog/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2024-12-03-whats-new-in-seaquery-0.32.x","title":"What\'s new in SeaQuery 0.32.x","author":"SeaQL Team","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/blog/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"SeaQL Community Survey 2024 Results","permalink":"/preview/pr-145/blog/2025-01-02-community-survey-2024"},"nextItem":{"title":"What\'s new in SeaStreamer 0.5","permalink":"/preview/pr-145/blog/2024-11-30-whats-new-in-sea-streamer-0.5"}}')}}]);