"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[4063],{5500:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-145/blog/2023-02-08-whats-new-in-seaorm-0.11.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2023-02-08-whats-new-in-seaorm-0.11.0.md","source":"@site/blog/2023-02-08-whats-new-in-seaorm-0.11.0.md","title":"What\'s new in SeaORM 0.11.0","description":"\ud83c\udf89 We are pleased to release SeaORM 0.11.0!","date":"2023-02-08T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-145/blog/tags/news"}],"readingTime":9.16,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Chris Tsang","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2023-02-08-whats-new-in-seaorm-0.11.0","title":"What\'s new in SeaORM 0.11.0","author":"SeaQL Team","author_title":"Chris Tsang","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Introducing SeaStreamer \ud83c\udf0a","permalink":"/preview/pr-145/blog/2023-04-03-intro-sea-streamer"},"nextItem":{"title":"SeaORM FAQ.02","permalink":"/preview/pr-145/blog/2023-02-05-faq-02"}}')},7283:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var t=n(5500),s=n(8790),r=n(7630);const i={slug:"2023-02-08-whats-new-in-seaorm-0.11.0",title:"What's new in SeaORM 0.11.0",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},l=void 0,o={authorsImageUrls:[void 0]},c=[{value:"Data Loader",id:"data-loader",level:2},{value:"Transaction Isolation Level and Access Mode",id:"transaction-isolation-level-and-access-mode",level:2},{value:"Cast Column Type on Select and Save",id:"cast-column-type-on-select-and-save",level:2},{value:"Changes to <code>ActiveModelBehavior</code>",id:"changes-to-activemodelbehavior",level:2},{value:"Execute Unprepared SQL Statement",id:"execute-unprepared-sql-statement",level:2},{value:"Select Into Tuple",id:"select-into-tuple",level:2},{value:"Atomic Migration",id:"atomic-migration",level:2},{value:"Types Support",id:"types-support",level:2},{value:"Opt-in Unstable Internal APIs",id:"opt-in-unstable-internal-apis",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"SeaORM Enhancements",id:"seaorm-enhancements",level:2},{value:"CLI Enhancements",id:"cli-enhancements",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Sponsor",id:"sponsor",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}];function d(e){const a={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["\ud83c\udf89 We are pleased to release SeaORM ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/releases/tag/0.11.0",children:(0,s.jsx)(a.code,{children:"0.11.0"})}),"!"]}),"\n",(0,s.jsx)(a.h2,{id:"data-loader",children:"Data Loader"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1443",children:"#1443"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1238",children:"#1238"}),"] The ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/query/trait.LoaderTrait.html",children:"LoaderTrait"})," provides an API to load related entities in batches."]}),"\n",(0,s.jsx)(a.p,{children:"Consider this one to many relation:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"let cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> = Cake::find()\n    .find_with_related(Fruit)\n    .all(db)\n    .await?;\n"})}),"\n",(0,s.jsx)(a.p,{children:"The generated SQL is:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-sql",children:'SELECT\n    "cake"."id" AS "A_id",\n    "cake"."name" AS "A_name",\n    "fruit"."id" AS "B_id",\n    "fruit"."name" AS "B_name",\n    "fruit"."cake_id" AS "B_cake_id"\nFROM "cake"\nLEFT JOIN "fruit" ON "cake"."id" = "fruit"."cake_id"\nORDER BY "cake"."id" ASC\n'})}),"\n",(0,s.jsx)(a.p,{children:"The 1 side's (Cake) data will be duplicated. If N is a large number, this would results in more data being transferred over the wire. Using the Loader would ensure each model is transferred only once."}),"\n",(0,s.jsx)(a.p,{children:"The following loads the same data as above, but with two queries:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"let cakes: Vec<cake::Model> = Cake::find().all(db).await?;\nlet fruits: Vec<Vec<fruit::Model>> = cakes.load_many(Fruit, db).await?;\n\nfor (cake, fruits) in cakes.into_iter().zip(fruits.into_iter()) { .. }\n"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-sql",children:'SELECT "cake"."id", "cake"."name" FROM "cake"\nSELECT "fruit"."id", "fruit"."name", "fruit"."cake_id" FROM "fruit" WHERE "fruit"."cake_id" IN (..)\n'})}),"\n",(0,s.jsx)(a.p,{children:"You can even apply filters on the related entity:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"let fruits_in_stock: Vec<Vec<fruit::Model>> = cakes.load_many(\n    fruit::Entity::find().filter(fruit::Column::Stock.gt(0i32))\n    db\n).await?;\n"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-sql",children:'SELECT "fruit"."id", "fruit"."name", "fruit"."cake_id" FROM "fruit"\nWHERE "fruit"."stock" > 0 AND "fruit"."cake_id" IN (..)\n'})}),"\n",(0,s.jsxs)(a.p,{children:["To learn more, read the ",(0,s.jsx)(a.a,{href:"https://www.sea-ql.org/SeaORM/docs/relation/data-loader/",children:"relation docs"}),"."]}),"\n",(0,s.jsx)(a.h2,{id:"transaction-isolation-level-and-access-mode",children:"Transaction Isolation Level and Access Mode"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1230",children:"#1230"}),"] The ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/trait.TransactionTrait.html#tymethod.transaction_with_config",children:(0,s.jsx)(a.code,{children:"transaction_with_config"})})," and ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/trait.TransactionTrait.html#tymethod.begin_with_config",children:(0,s.jsx)(a.code,{children:"begin_with_config"})})," allows you to specify the ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/enum.IsolationLevel.html",children:"IsolationLevel"})," and ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/enum.AccessMode.html",children:"AccessMode"}),"."]}),"\n",(0,s.jsxs)(a.p,{children:["For now, they are only implemented for MySQL and Postgres. In order to align their semantic difference, MySQL will execute ",(0,s.jsx)(a.code,{children:"SET TRANSACTION"})," commands before begin transaction, while Postgres will execute ",(0,s.jsx)(a.code,{children:"SET TRANSACTION"})," commands after begin transaction."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"db.transaction_with_config::<_, _, DbErr>(\n    |txn| { ... },\n    Some(IsolationLevel::ReadCommitted),\n    Some(AccessMode::ReadOnly),\n)\n.await?;\n\nlet transaction = db\n    .begin_with_config(IsolationLevel::ReadCommitted, AccessMode::ReadOnly)\n    .await?;\n"})}),"\n",(0,s.jsxs)(a.p,{children:["To learn more, read the ",(0,s.jsx)(a.a,{href:"https://www.sea-ql.org/SeaORM/docs/advanced-query/transaction/",children:"transaction docs"}),"."]}),"\n",(0,s.jsx)(a.h2,{id:"cast-column-type-on-select-and-save",children:"Cast Column Type on Select and Save"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1304",children:"#1304"}),"] If you need to select a column as one type but save it into the database as another, you can specify the ",(0,s.jsx)(a.code,{children:"select_as"})," and the ",(0,s.jsx)(a.code,{children:"save_as"})," attributes to perform the casting. A typical use case is selecting a column of type ",(0,s.jsx)(a.code,{children:"citext"})," (case-insensitive text) as ",(0,s.jsx)(a.code,{children:"String"})," in Rust and saving it into the database as ",(0,s.jsx)(a.code,{children:"citext"}),". One should define the model field as below:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "ci_table")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(select_as = "text", save_as = "citext")]\n    pub case_insensitive_text: String\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,s.jsxs)(a.h2,{id:"changes-to-activemodelbehavior",children:["Changes to ",(0,s.jsx)(a.code,{children:"ActiveModelBehavior"})]}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1328",children:"#1328"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1145",children:"#1145"}),"] The methods of ",(0,s.jsx)(a.code,{children:"ActiveModelBehavior"})," now have ",(0,s.jsx)(a.code,{children:"Connection"})," as an additional parameter. It enables you to perform database operations, for example, logging the changes made to the existing model or validating the data before inserting it."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'#[async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    /// Create a new ActiveModel with default values. Also used by `Default::default()`.\n    fn new() -> Self {\n        Self {\n            uuid: Set(Uuid::new_v4()),\n            ..ActiveModelTrait::default()\n        }\n    }\n\n    /// Will be triggered before insert / update\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        // Logging changes\n        edit_log::ActiveModel {\n            action: Set("before_save".into()),\n            values: Set(serde_json::json!(model)),\n            ..Default::default()\n        }\n        .insert(db)\n        .await?;\n\n        Ok(self)\n    }\n}\n'})}),"\n",(0,s.jsxs)(a.p,{children:["To learn more, read the ",(0,s.jsx)(a.a,{href:"https://www.sea-ql.org/SeaORM/docs/generate-entity/entity-structure/#active-model-behavior",children:"entity docs"}),"."]}),"\n",(0,s.jsx)(a.h2,{id:"execute-unprepared-sql-statement",children:"Execute Unprepared SQL Statement"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1327",children:"#1327"}),"] You can execute an unprepared SQL statement with ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/trait.ConnectionTrait.html#tymethod.execute_unprepared",children:(0,s.jsx)(a.code,{children:"ConnectionTrait::execute_unprepared"})}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'// Use `execute_unprepared` if the SQL statement doesn\'t have value bindings\ndb.execute_unprepared(\n    "CREATE TABLE `cake` (\n        `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,\n        `name` varchar(255) NOT NULL\n    )"\n)\n.await?;\n\n// Construct a `Statement` if the SQL contains value bindings\nlet stmt = Statement::from_sql_and_values(\n    manager.get_database_backend(),\n    r#"INSERT INTO `cake` (`name`) VALUES (?)"#,\n    ["Cheese Cake".into()]\n);\ndb.execute(stmt).await?;\n'})}),"\n",(0,s.jsx)(a.h2,{id:"select-into-tuple",children:"Select Into Tuple"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1311",children:"#1311"}),"] You can select a tuple (or single value) with the ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/struct.Selector.html#method.into_tuple",children:(0,s.jsx)(a.code,{children:"into_tuple"})})," method."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"let res: Vec<(String, i64)> = cake::Entity::find()\n    .select_only()\n    .column(cake::Column::Name)\n    .column(cake::Column::Id.count())\n    .group_by(cake::Column::Name)\n    .into_tuple()\n    .all(&db)\n    .await?;\n"})}),"\n",(0,s.jsx)(a.h2,{id:"atomic-migration",children:"Atomic Migration"}),"\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1379",children:"#1379"}),"] Migration will be executed in Postgres atomically that means migration scripts will be executed inside a transaction. Changes done to the database will be rolled back if the migration failed. However, atomic migration is not supported in MySQL and SQLite."]}),"\n",(0,s.jsxs)(a.p,{children:["You can start a transaction inside each migration to perform operations like ",(0,s.jsx)(a.a,{href:"https://www.sea-ql.org/SeaORM/docs/migration/seeding-data/#seeding-data-transactionally",children:"seeding sample data"})," for a newly created table."]}),"\n",(0,s.jsx)(a.h2,{id:"types-support",children:"Types Support"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1325",children:"#1325"}),"] Support various UUID formats that are available in ",(0,s.jsx)(a.code,{children:"uuid::fmt"})," module"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "uuid_fmt")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub uuid: Uuid,\n    pub uuid_braced: uuid::fmt::Braced,\n    pub uuid_hyphenated: uuid::fmt::Hyphenated,\n    pub uuid_simple: uuid::fmt::Simple,\n    pub uuid_urn: uuid::fmt::Urn,\n}\n'})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1210",children:"#1210"}),"] Support vector of enum for Postgres"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "enum_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub teas: Vec<Tea>,\n    pub teas_opt: Option<Vec<Tea>>,\n}\n'})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1414",children:"#1414"}),"] Support ",(0,s.jsx)(a.code,{children:"ActiveEnum"})," field as primary key"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "enum_primary_key")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub id: Tea,\n    pub category: Option<Category>,\n    pub color: Option<Color>,\n}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"opt-in-unstable-internal-apis",children:"Opt-in Unstable Internal APIs"}),"\n",(0,s.jsxs)(a.p,{children:["By enabling ",(0,s.jsx)(a.code,{children:"sea-orm-internal"})," feature you opt-in unstable internal APIs including:"]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Accessing the inner connection pool of SQLx with ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/enum.DatabaseConnection.html#impl-DatabaseConnection-2",children:(0,s.jsx)(a.code,{children:"get_*_connection_pool"})})," method"]}),"\n",(0,s.jsxs)(a.li,{children:["Re-exporting ",(0,s.jsx)(a.a,{href:"https://docs.rs/sea-orm/*/sea_orm/error/index.html",children:"SQLx errors types"}),": ",(0,s.jsx)(a.code,{children:"SqlxError"}),", ",(0,s.jsx)(a.code,{children:"SqlxMySqlError"}),", ",(0,s.jsx)(a.code,{children:"SqlxPostgresError"})," and ",(0,s.jsx)(a.code,{children:"SqlxSqliteError"})]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1366",children:"#1366"}),"] ",(0,s.jsx)(a.code,{children:"sea-query"})," has been upgraded to ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.28.0",children:(0,s.jsx)(a.code,{children:"0.28.x"})}),", which comes with some improvements and breaking changes. Please follow the release notes for more details"]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1420",children:"#1420"}),"] sea-orm-cli: ",(0,s.jsx)(a.code,{children:"generate entity"})," command enable ",(0,s.jsx)(a.code,{children:"--universal-time"})," flag by default"]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1425",children:"#1425"}),"] Added ",(0,s.jsx)(a.code,{children:"RecordNotInserted"})," and ",(0,s.jsx)(a.code,{children:"RecordNotUpdated"})," to ",(0,s.jsx)(a.code,{children:"DbErr"})]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1327",children:"#1327"}),"] Added ",(0,s.jsx)(a.code,{children:"ConnectionTrait::execute_unprepared"})," method"]}),"\n"]}),"\n",(0,s.jsxs)(a.li,{children:["\n",(0,s.jsxs)(a.p,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1311",children:"#1311"}),"] The required method of ",(0,s.jsx)(a.code,{children:"TryGetable"})," changed:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"// then\nfn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError>;\n// now; ColIdx can be `&str` or `usize`\nfn try_get_by<I: ColIdx>(res: &QueryResult, index: I) -> Result<Self, TryGetError>;\n"})}),"\n",(0,s.jsx)(a.p,{children:"So if you implemented it yourself:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-diff",children:"impl TryGetable for XXX {\n-   fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {\n+   fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, TryGetError> {\n-       let value: YYY = res.try_get(pre, col).map_err(TryGetError::DbErr)?;\n+       let value: YYY = res.try_get_by(idx).map_err(TryGetError::DbErr)?;\n        ..\n    }\n}\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1328",children:"#1328"}),"] The ",(0,s.jsx)(a.code,{children:"ActiveModelBehavior"})," trait becomes async trait.\nIf you overridden the default ",(0,s.jsx)(a.code,{children:"ActiveModelBehavior"})," implementation:"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:"#[async_trait::async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        // ...\n    }\n\n    // ...\n}\n"})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1425",children:"#1425"}),"] ",(0,s.jsx)(a.code,{children:'DbErr::RecordNotFound("None of the database rows are affected")'})," is moved to a dedicated error variant ",(0,s.jsx)(a.code,{children:"DbErr::RecordNotUpdated"})]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-rust",children:'let res = Update::one(cake::ActiveModel {\n        name: Set("Cheese Cake".to_owned()),\n        ..model.into_active_model()\n    })\n    .exec(&db)\n    .await;\n\n// then\nassert_eq!(\n    res,\n    Err(DbErr::RecordNotFound(\n        "None of the database rows are affected".to_owned()\n    ))\n);\n\n// now\nassert_eq!(res, Err(DbErr::RecordNotUpdated));\n'})}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1395",children:"#1395"}),"] ",(0,s.jsx)(a.code,{children:"sea_orm::ColumnType"})," was replaced by ",(0,s.jsx)(a.code,{children:"sea_query::ColumnType"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["Method ",(0,s.jsx)(a.code,{children:"ColumnType::def"})," was moved to ",(0,s.jsx)(a.code,{children:"ColumnTypeTrait"})]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"ColumnType::Binary"})," becomes a tuple variant which takes in additional option ",(0,s.jsx)(a.code,{children:"sea_query::BlobSize"})]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"ColumnType::Custom"})," takes a ",(0,s.jsx)(a.code,{children:"sea_query::DynIden"})," instead of ",(0,s.jsx)(a.code,{children:"String"})," and thus a new method ",(0,s.jsx)(a.code,{children:"custom"})," is added (note the lowercase)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-diff",children:'// Compact Entity\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "fruit")]\npub struct Model {\n-   #[sea_orm(column_type = r#"Custom("citext".to_owned())"#)]\n+   #[sea_orm(column_type = r#"custom("citext")"#)]\n    pub column: String,\n}\n'})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-diff",children:'// Expanded Entity\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n\n    fn def(&self) -> ColumnDef {\n        match self {\n-           Self::Column => ColumnType::Custom("citext".to_owned()).def(),\n+           Self::Column => ColumnType::custom("citext").def(),\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(a.h2,{id:"seaorm-enhancements",children:"SeaORM Enhancements"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1256",children:"#1256"}),"] Refactor schema module to expose functions for database alteration"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1346",children:"#1346"}),"] Generate compact entity with ",(0,s.jsx)(a.code,{children:'#[sea_orm(column_type = "JsonBinary")]'})," macro attribute"]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.code,{children:"MockDatabase::append_exec_results()"}),", ",(0,s.jsx)(a.code,{children:"MockDatabase::append_query_results()"}),", ",(0,s.jsx)(a.code,{children:"MockDatabase::append_exec_errors()"})," and ",(0,s.jsx)(a.code,{children:"MockDatabase::append_query_errors()"})," [",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1367",children:"#1367"}),"] take any types implemented ",(0,s.jsx)(a.code,{children:"IntoIterator"})," trait"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1362",children:"#1362"}),"] ",(0,s.jsx)(a.code,{children:"find_by_id"})," and ",(0,s.jsx)(a.code,{children:"delete_by_id"})," take any ",(0,s.jsx)(a.code,{children:"Into"})," primary key value"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1410",children:"#1410"}),"] ",(0,s.jsx)(a.code,{children:"QuerySelect::offset"})," and ",(0,s.jsx)(a.code,{children:"QuerySelect::limit"})," takes in ",(0,s.jsx)(a.code,{children:"Into<Option<u64>>"})," where ",(0,s.jsx)(a.code,{children:"None"})," would reset them"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1236",children:"#1236"}),"] Added ",(0,s.jsx)(a.code,{children:"DatabaseConnection::close"})]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1381",children:"#1381"}),"] Added ",(0,s.jsx)(a.code,{children:"is_null"})," getter for ",(0,s.jsx)(a.code,{children:"ColumnDef"})]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1177",children:"#1177"}),"] Added ",(0,s.jsx)(a.code,{children:"ActiveValue::reset"})," to convert ",(0,s.jsx)(a.code,{children:"Unchanged"})," into ",(0,s.jsx)(a.code,{children:"Set"})]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1415",children:"#1415"}),"] Added ",(0,s.jsx)(a.code,{children:"QueryTrait::apply_if"})," to optionally apply a filter"]}),"\n",(0,s.jsxs)(a.li,{children:["Added the ",(0,s.jsx)(a.code,{children:"sea-orm-internal"})," feature flag to expose some SQLx types","\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1297",children:"#1297"}),"] Added ",(0,s.jsx)(a.code,{children:"DatabaseConnection::get_*_connection_pool()"})," for accessing the inner SQLx connection pool"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1434",children:"#1434"}),"] Re-exporting SQLx errors"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"cli-enhancements",children:"CLI Enhancements"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/846",children:"#846"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1186",children:"#1186"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1318",children:"#1318"}),"] Generate ",(0,s.jsx)(a.code,{children:"#[serde(skip_deserializing)]"})," for primary key columns"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1171",children:"#1171"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1320",children:"#1320"}),"] Generate ",(0,s.jsx)(a.code,{children:"#[serde(skip)]"})," for hidden columns"]}),"\n",(0,s.jsxs)(a.li,{children:["[",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1124",children:"#1124"}),", ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/pull/1321",children:"#1321"}),"] Generate entity with extra derives and attributes for model struct"]}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,s.jsxs)(a.p,{children:["SeaORM plays well with the other crates in the async ecosystem. We maintain an array of example projects for building REST, GraphQL and gRPC services. More examples ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/issues/269",children:"wanted"}),"!"]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/actix_example",children:"Actix v4 Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example",children:"Axum Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/graphql_example",children:"GraphQL Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/jsonrpsee_example",children:"jsonrpsee Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/poem_example",children:"Poem Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/rocket_example",children:"Rocket Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/salvo_example",children:"Salvo Example"})}),"\n",(0,s.jsx)(a.li,{children:(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/tonic_example",children:"Tonic Example"})}),"\n"]}),"\n",(0,s.jsx)(a.h2,{id:"sponsor",children:"Sponsor"}),"\n",(0,s.jsxs)(a.p,{children:["Our ",(0,s.jsx)(a.a,{href:"https://github.com/sponsors/SeaQL",children:"GitHub Sponsor"})," profile is up! SeaQL.org is an independent open-source organization run by passionate developers. If you enjoy using SeaORM, please star and share our repositories. If you feel generous, a small donation will be greatly appreciated, and goes a long way towards sustaining the project."]}),"\n",(0,s.jsx)(a.p,{children:"A big shout out to our sponsors \ud83d\ude07:"}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tugascript",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/64930104?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Afonso Barracha"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/Sytten",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/2366731?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"\xc9mile Fugulin"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/deansheather",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/11241812?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Dean Sheather"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/shanesveller",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/831?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Shane Sveller"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/sakti",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/196178?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Sakti Dwi Cahyono"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/DominoTree",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/5438118?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Nick Price"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/rgoracz",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/6758092?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Roland Gor\xe1cz"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/hgiesel",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/7188844?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Henrik Giesel"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/trueb2",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/8592049?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Jacob Trueb"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/siketyan",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/12772118?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Naoki Ikeguchi"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/manfredcml",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/27536502?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Manfred Lee"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/marcusbuffett",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1834328?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"Marcus Buffett"})})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/efrain2007",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/65697999?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:(0,s.jsx)(a.p,{children:"efrain2007"})})})]})})]}),"\n",(0,s.jsx)(a.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,s.jsx)(a.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and build together for Rust's future."}),"\n",(0,s.jsxs)(a.p,{children:["Here is the roadmap for SeaORM ",(0,s.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm/milestone/12",children:(0,s.jsx)(a.code,{children:"0.12.x"})}),"."]})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7630:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>l});var t=n(2374);const s={},r=t.createContext(s);function i(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);