"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[4143],{4952:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"streamer/producer","title":"Producer","description":"The Producer trait defines the common interface of stream producers. Producer implements Clone, so you can use it like an mpsc::Sender.","source":"@site/versioned_docs/version-0.1.x/03-streamer/02-producer.md","sourceDirName":"03-streamer","slug":"/streamer/producer","permalink":"/preview/pr-145/SeaStreamer/docs/0.1.x/streamer/producer","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/versioned_docs/version-0.1.x/03-streamer/02-producer.md","tags":[],"version":"0.1.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1747536252000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Streamer","permalink":"/preview/pr-145/SeaStreamer/docs/0.1.x/streamer/streamer"},"next":{"title":"Consumer","permalink":"/preview/pr-145/SeaStreamer/docs/0.1.x/streamer/consumer"}}');var n=t(8790),o=t(6484);const d={},c="Producer",a={},i=[{value:"<code>ProducerOptions</code>",id:"produceroptions",level:2},{value:"<code>send</code>",id:"send",level:2},{value:"<code>Receipt</code>",id:"receipt",level:3},{value:"<code>send_to</code>",id:"send_to",level:2},{value:"<code>anchor</code>",id:"anchor",level:2},{value:"<code>anchored</code>",id:"anchored",level:2}];function h(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"producer",children:"Producer"})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.a,{href:"https://docs.rs/sea-streamer/*/sea_streamer/trait.Producer.html",children:(0,n.jsx)(r.code,{children:"Producer"})})," trait defines the common interface of stream producers. ",(0,n.jsx)(r.code,{children:"Producer"})," implements ",(0,n.jsx)(r.code,{children:"Clone"}),", so you can use it like an ",(0,n.jsx)(r.code,{children:"mpsc::Sender"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.a,{href:"https://docs.rs/sea-streamer-kafka/*/sea_streamer_kafka/struct.KafkaProducer.html",children:(0,n.jsx)(r.code,{children:"KafkaProducer"})})," and ",(0,n.jsx)(r.a,{href:"https://docs.rs/sea-streamer-stdio/latest/sea_streamer_stdio/struct.StdioProducer.html",children:(0,n.jsx)(r.code,{children:"StdioProducer"})})," have more functions for transaction and flushing."]}),"\n",(0,n.jsx)(r.h2,{id:"produceroptions",children:(0,n.jsx)(r.code,{children:"ProducerOptions"})}),"\n",(0,n.jsx)(r.p,{children:"There is nothing interesting as of now. We may add some in the future."}),"\n",(0,n.jsx)(r.h2,{id:"send",children:(0,n.jsx)(r.code,{children:"send"})}),"\n",(0,n.jsxs)(r.p,{children:["Send a message to the already anchored stream. This function is non-blocking. You don\u2019t have to ",(0,n.jsx)(r.code,{children:"await"})," the future if you are not interested in the ",(0,n.jsx)(r.code,{children:"Receipt"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["If the producer is not anchored, this will return ",(0,n.jsx)(r.code,{children:"StreamErr::NotAnchored"})," error."]}),"\n",(0,n.jsx)(r.h3,{id:"receipt",children:(0,n.jsx)(r.code,{children:"Receipt"})}),"\n",(0,n.jsxs)(r.p,{children:["If you await the future, you will get a receipt composed of (StreamKey, ShardId, SeqNo, Timestamp). This usually means that the message has been ",(0,n.jsx)(r.em,{children:"received by"})," the broker, but may not guarantee that the message is already ",(0,n.jsx)(r.em,{children:"persisted"}),"."]}),"\n",(0,n.jsx)(r.h2,{id:"send_to",children:(0,n.jsx)(r.code,{children:"send_to"})}),"\n",(0,n.jsxs)(r.p,{children:["Like ",(0,n.jsx)(r.code,{children:"send"}),", but to the specified stream key."]}),"\n",(0,n.jsx)(r.h2,{id:"anchor",children:(0,n.jsx)(r.code,{children:"anchor"})}),"\n",(0,n.jsxs)(r.p,{children:["Lock this producer to a particular stream. This function can only be called once. Subsequent calls should return ",(0,n.jsx)(r.code,{children:"StreamErr::AlreadyAnchored"})," error."]}),"\n",(0,n.jsx)(r.h2,{id:"anchored",children:(0,n.jsx)(r.code,{children:"anchored"})}),"\n",(0,n.jsxs)(r.p,{children:["If the producer is already anchored, return a reference to the StreamKey. If the producer is not anchored, this will return ",(0,n.jsx)(r.code,{children:"StreamErr::NotAnchored"})," error."]})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},6484:(e,r,t)=>{t.d(r,{R:()=>d,x:()=>c});var s=t(2374);const n={},o=s.createContext(n);function d(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);