"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[88696],{42115:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>m,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"generate-sea-query-statement/create-enum","title":"Create Enum","description":"You can generate SQL statement to create database tables with enum columns via the Schema helper struct.","source":"@site/versioned_docs/version-0.9.x/09-generate-sea-query-statement/02-create-enum.md","sourceDirName":"09-generate-sea-query-statement","slug":"/generate-sea-query-statement/create-enum","permalink":"/preview/pr-148/SeaORM/docs/0.9.x/generate-sea-query-statement/create-enum","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.9.x/09-generate-sea-query-statement/02-create-enum.md","tags":[],"version":"0.9.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1749655774000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Create Table","permalink":"/preview/pr-148/SeaORM/docs/0.9.x/generate-sea-query-statement/create-table"},"next":{"title":"Create Index","permalink":"/preview/pr-148/SeaORM/docs/0.9.x/generate-sea-query-statement/create-index"}}');var r=t(88790),s=t(77162);const i={},m="Create Enum",c={},o=[{value:"String &amp; Integer Enum",id:"string--integer-enum",level:2},{value:"Native Database Enum",id:"native-database-enum",level:2},{value:"PostgreSQL",id:"postgresql",level:3},{value:"MySQL",id:"mysql",level:3},{value:"SQLite",id:"sqlite",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"create-enum",children:"Create Enum"})}),"\n",(0,r.jsxs)(n.p,{children:["You can generate SQL statement to create database tables with enum columns via the ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.9/sea_orm/schema/struct.Schema.html",children:(0,r.jsx)(n.code,{children:"Schema"})})," helper struct."]}),"\n",(0,r.jsx)(n.h2,{id:"string--integer-enum",children:"String & Integer Enum"}),"\n",(0,r.jsx)(n.p,{children:"This is just an ordinary string / integer column that maps to a Rust enum. Example entity definition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="active_enum.rs"',children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub category: Option<Category>,\n    pub color: Option<Color>,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    #[sea_orm(num_value = 0)]\n    Black,\n    #[sea_orm(num_value = 1)]\n    White,\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"As an illustration, the enums are just ordinary database columns."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use sea_orm::{sea_query, Schema};\n\nlet builder = db.get_database_backend();\nlet schema = Schema::new(builder);\n\nassert_eq!(\n    builder.build(&schema.create_table_from_entity(active_enum::Entity)),\n    builder.build(\n        &sea_query::Table::create()\n            .table(active_enum::Entity.table_ref())\n            .col(\n                sea_query::ColumnDef::new(active_enum::Column::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(sea_query::ColumnDef::new(active_enum::Column::Category).string_len(1))\n            .col(sea_query::ColumnDef::new(active_enum::Column::Color).integer())\n            .to_owned()\n    )\n);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"native-database-enum",children:"Native Database Enum"}),"\n",(0,r.jsx)(n.p,{children:"Enum support is different across databases. Let's go through them one-by-one."}),"\n",(0,r.jsx)(n.p,{children:"Consider the following entity:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="active_enum.rs"',children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub tea: Option<Tea>,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Note the ",(0,r.jsx)(n.code,{children:"db_type"})," and extra ",(0,r.jsx)(n.code,{children:"enum_name"})," attributes."]}),"\n",(0,r.jsx)(n.h3,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,r.jsxs)(n.p,{children:["Enums in PostgreSQL are defined by ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-query/0.9/sea_query/extension/postgres/struct.TypeCreateStatement.html",children:(0,r.jsx)(n.code,{children:"TypeCreateStatement"})}),", which can be created from an ",(0,r.jsx)(n.code,{children:"Entity"})," with the ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.9/sea_orm/schema/struct.Schema.html#method.create_enum_from_entity",children:(0,r.jsx)(n.code,{children:"Schema::create_enum_from_entity"})})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["You can also create it from ",(0,r.jsx)(n.code,{children:"ActiveEnum"})," with the ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.9/sea_orm/schema/struct.Schema.html#method.create_enum_from_active_enum",children:(0,r.jsx)(n.code,{children:"Schema::create_enum_from_active_enum"})})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{Schema, Statement};\n\nlet db_postgres = DbBackend::Postgres;\nlet schema = Schema::new(db_postgres);\n\nassert_eq!(\n    schema\n        .create_enum_from_entity(active_enum::Entity)\n        .iter()\n        .map(|stmt| db_postgres.build(stmt))\n        .collect::<Vec<_>>(),\n    vec![Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#.to_owned()\n    ),]\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_enum_from_active_enum::<Tea>()),\n    Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#.to_owned()\n    )\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_postgres,\n        vec![\n            r#"CREATE TABLE "public"."active_enum" ("#,\n            r#""id" serial NOT NULL PRIMARY KEY,"#,\n            r#""tea" tea"#,\n            r#")"#,\n        ]\n        .join(" ")\n    ),\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"mysql",children:"MySQL"}),"\n",(0,r.jsxs)(n.p,{children:["In MySQL, enum is defined on table creation so you only need to call ",(0,r.jsx)(n.a,{href:"https://docs.rs/sea-orm/0.9/sea_orm/schema/struct.Schema.html#method.create_table_from_entity",children:(0,r.jsx)(n.code,{children:"Schema::create_table_from_entity"})})," once."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{Schema, Statement};\n\nlet db_mysql = DbBackend::MySql;\nlet schema = Schema::new(db_mysql);\n\nassert_eq!(\n    db_mysql.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_mysql,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,",\n            "`tea` ENUM(\'EverydayTea\', \'BreakfastTea\')",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"sqlite",children:"SQLite"}),"\n",(0,r.jsxs)(n.p,{children:["Enum is not supported in SQLite so it will be stored as ",(0,r.jsx)(n.code,{children:"TEXT"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{Schema, Statement};\n\nlet db_sqlite = DbBackend::Sqlite;\nlet schema = Schema::new(db_sqlite);\n\nassert_eq!(\n    db_sqlite.build(&schema.create_enum_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_sqlite,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,",\n            "`tea` text",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},77162:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>m});var a=t(22374);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);