"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[9219],{15105:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"migration/seeding-data","title":"Seeding Data","description":"You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.","source":"@site/versioned_docs/version-0.10.x/03-migration/04-seeding-data.md","sourceDirName":"03-migration","slug":"/migration/seeding-data","permalink":"/preview/pr-148/SeaORM/docs/0.10.x/migration/seeding-data","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/03-migration/04-seeding-data.md","tags":[],"version":"0.10.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1749655774000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Running Migration","permalink":"/preview/pr-148/SeaORM/docs/0.10.x/migration/running-migration"},"next":{"title":"Using sea-orm-cli","permalink":"/preview/pr-148/SeaORM/docs/0.10.x/generate-entity/sea-orm-cli"}}');var r=a(88790),i=a(77162);const s={},o="Seeding Data",d={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"seeding-data",children:"Seeding Data"})}),"\n",(0,r.jsxs)(n.p,{children:["You can retrieve a ",(0,r.jsx)(n.code,{children:"DbConn"})," from ",(0,r.jsx)(n.code,{children:"SchemaManager"})," and perform data operations as needed, for example, to seed data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        cake::ActiveModel {\n            name: Set("Cheesecake".to_owned()),\n            ..Default::default()\n        }\n        .insert(db)\n        .await?;\n\n        Ok(())\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"You could also write SeaQuery statement to seed the table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let insert = Query::insert()\n            .into_table(Cake::Table)\n            .columns([Cake::Name])\n            .values_panic(["Tiramisu".into()])\n            .to_owned();\n\n        manager.exec_stmt(insert).await?;\n\n        Ok(())\n    }\n}\n\n/// Learn more at https://docs.rs/sea-query#iden\n#[derive(Iden)]\npub enum Cake {\n    Table,\n    Id,\n    Name,\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},77162:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(22374);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);