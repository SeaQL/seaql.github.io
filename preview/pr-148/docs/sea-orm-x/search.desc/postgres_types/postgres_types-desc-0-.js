searchState.loadedDescShard("postgres_types", 0, "Conversions to and from Postgres types.\nACLITEM - access control list\nACLITEM[]\nANY - pseudo-type representing any type\nANYARRAY - pseudo-type representing a polymorphic array …\nANYCOMPATIBLE - pseudo-type representing a polymorphic …\nANYCOMPATIBLEARRAY - pseudo-type representing an array of …\nANYCOMPATIBLEMULTIRANGE - pseudo-type representing a …\nANYCOMPATIBLENONARRAY - pseudo-type representing a …\nANYCOMPATIBLERANGE - pseudo-type representing a range over …\nANYELEMENT - pseudo-type representing a polymorphic base …\nANYENUM - pseudo-type representing a polymorphic base type …\nANYMULTIRANGE - pseudo-type representing a polymorphic …\nANYNONARRAY - pseudo-type representing a polymorphic base …\nANYRANGE - pseudo-type representing a range over a …\nAn array type along with the type of its elements.\nBIT - fixed-length bit string\nBIT[]\nBOOL - boolean, &#39;true&#39;/&#39;false&#39;\nBOOL[]\nBOX - geometric box &#39;(lower left,upper right)&#39;\nBOX[]\nBPCHAR - char(length), blank-padded string, fixed storage …\nBPCHAR[]\nBYTEA - variable-length string, binary values escaped\nBYTEA[]\nCompact, typed binary format\nA trait used by clients to abstract over <code>&amp;dyn ToSql</code> and …\nCHAR - single character\nCHAR[]\nCID - command identifier type, sequence in transaction id\nCIDR - network IP address/netmask, network address\nCIDR[]\nCID[]\nCIRCLE - geometric circle &#39;(center,radius)&#39;\nCIRCLE[]\nCSTRING - C-style string\nCSTRING[]\nA composite type along with information about its fields.\nDATE - date\nDATEMULTIRANGE - multirange of dates\nDATEMULTIRANGE[]\nDATE[]\nDATERANGE - range of dates\nDATERANGE[]\nA wrapper that can be used to represent infinity with …\nA domain type along with its underlying type.\nEVENT_TRIGGER - pseudo-type for the result of an event …\nAn enumerated type along with its variants.\nFDW_HANDLER - pseudo-type for the result of an FDW handler …\nFLOAT4 - single-precision floating point number, 4-byte …\nFLOAT4[]\nFLOAT8 - double-precision floating point number, 8-byte …\nFLOAT8[]\nInformation about a field of a composite type.\nSupported Postgres message format types\nA trait for types that can be created from a Postgres …\nA trait for types which can be created from a Postgres …\nGTSVECTOR - GiST index internal text representation for …\nGTSVECTOR[]\nINDEX_AM_HANDLER - pseudo-type for the result of an index …\nINET - IP address/netmask, host address, netmask optional\nINET[]\nINT2 - -32 thousand to 32 thousand, 2-byte storage\nINT2[]\nINT2VECTOR - array of int2, used in system tables\nINT2VECTOR[]\nINT4 - -2 billion to 2 billion integer, 4-byte storage\nINT4MULTIRANGE - multirange of integers\nINT4MULTIRANGE[]\nINT4[]\nINT4RANGE - range of integers\nINT4RANGE[]\nINT8 - ~18 digit integer, 8-byte storage\nINT8MULTIRANGE - multirange of bigints\nINT8MULTIRANGE[]\nINT8[]\nINT8RANGE - range of bigints\nINT8RANGE[]\nINTERNAL - pseudo-type representing an internal data …\nINTERVAL - @ &lt;number&gt; &lt;units&gt;, time interval\nINTERVAL[]\nAn enum representing the nullability of a Postgres value.\nJSON - JSON stored as text\nJSONB - Binary JSON\nJSONB[]\nJSONPATH - JSON path\nJSONPATH[]\nJSON[]\nRepresents the kind of a Postgres type.\nLANGUAGE_HANDLER - pseudo-type for the result of a …\nLINE - geometric line\nLINE[]\nLSEG - geometric line segment &#39;(pt1,pt2)&#39;\nLSEG[]\nMACADDR - XX:XX:XX:XX:XX:XX, MAC address\nMACADDR8 - XX:XX:XX:XX:XX:XX:XX:XX, MAC address\nMACADDR8[]\nMACADDR[]\nMONEY - monetary amounts, $d,ddd.cc\nMONEY[]\nA multirange type along with the type of its elements.\nNAME - 63-byte type for storing system identifiers\nNAME[]\nNUMERIC - numeric(precision, decimal), arbitrary precision …\nNUMERIC[]\nNUMMULTIRANGE - multirange of numerics\nNUMMULTIRANGE[]\nNUMRANGE - range of numerics\nNUMRANGE[]\nRepresents <code>-infinity</code>, a date that is earlier than all …\nRepresents <code>-infinity</code>, a timestamp that is earlier than all …\nThe value is not NULL.\nOID - object identifier(oid), maximum 4 billion\nOID[]\nOIDVECTOR - array of oids, used in system tables\nOIDVECTOR[]\nA Postgres OID.\nPATH - geometric path &#39;(pt1,…)&#39;\nPATH[]\nPG_BRIN_BLOOM_SUMMARY - BRIN bloom summary\nPG_BRIN_MINMAX_MULTI_SUMMARY - BRIN minmax-multi summary\nPG_DDL_COMMAND - internal type for passing CollectedCommand\nPG_DEPENDENCIES - multivariate dependencies\nPG_LSN - PostgreSQL LSN datatype\nPG_LSN[]\nPG_MCV_LIST - multivariate MCV list\nPG_NDISTINCT - multivariate ndistinct coefficients\nPG_NODE_TREE - string representing an internal node tree\nPG_SNAPSHOT - snapshot\nPG_SNAPSHOT[]\nPOINT - geometric point &#39;(x, y)&#39;\nPOINT[]\nPOLYGON - geometric polygon &#39;(pt1,…)&#39;\nPOLYGON[]\nPostgres <code>PG_LSN</code> type.\nRepresents <code>infinity</code>, a date that is later than all other …\nRepresents <code>infinity</code>, a timestamp that is later than all …\nA pseudo-type.\nRECORD - pseudo-type representing any composite type\nRECORD[]\nREFCURSOR - reference to cursor (portal name)\nREFCURSOR[]\nREGCLASS - registered class\nREGCLASS[]\nREGCOLLATION - registered collation\nREGCOLLATION[]\nREGCONFIG - registered text search configuration\nREGCONFIG[]\nREGDICTIONARY - registered text search dictionary\nREGDICTIONARY[]\nREGNAMESPACE - registered namespace\nREGNAMESPACE[]\nREGOPER - registered operator\nREGOPERATOR - registered operator (with args)\nREGOPERATOR[]\nREGOPER[]\nREGPROC - registered procedure\nREGPROCEDURE - registered procedure (with args)\nREGPROCEDURE[]\nREGPROC[]\nREGROLE - registered role\nREGROLE[]\nREGTYPE - registered type\nREGTYPE[]\nA range type along with the type of its elements.\nA simple type like <code>VARCHAR</code> or <code>INTEGER</code>.\nTABLE_AM_HANDLER\nTEXT - variable-length string, no limit specified\nTEXT[]\nTID - (block, offset), physical location of tuple\nTID[]\nTIME - time of day\nTIMESTAMP - date and time\nTIMESTAMPTZ - date and time with time zone\nTIMESTAMPTZ[]\nTIMESTAMP[]\nTIMETZ - time of day with time zone\nTIMETZ[]\nTIME[]\nTRIGGER - pseudo-type for the result of a trigger function\nTSMULTIRANGE - multirange of timestamps without time zone\nTSMULTIRANGE[]\nTSM_HANDLER - pseudo-type for the result of a tablesample …\nTSQUERY - query representation for text search\nTSQUERY[]\nTSTZMULTIRANGE - multirange of timestamps with time zone\nTSTZMULTIRANGE[]\nTSTZRANGE - range of timestamps with time zone\nTSTZRANGE[]\nTSRANGE - range of timestamps without time zone\nTSRANGE[]\nTSVECTOR - text representation for text search\nTSVECTOR[]\nTXID_SNAPSHOT - txid snapshot\nTXID_SNAPSHOT[]\nText format (UTF-8)\nA wrapper that can be used to represent infinity with …\nA trait for types that can be converted into Postgres …\nA Postgres type.\nUNKNOWN - pseudo-type representing an undetermined type\nUUID - UUID datatype\nUUID[]\nVARBIT - variable-length bit string\nVARBIT[]\nVARCHAR - varchar(length), non-blank-padded string, …\nVARCHAR[]\nVOID - pseudo-type for the result of a function with no …\nThe wrapped date.\nThe wrapped timestamp.\nAn error indicating that a <code>NULL</code> Postgres value was passed …\nAn error indicating that a conversion was attempted …\nXID - transaction id\nXID8 - full transaction id\nXID8[]\nXID[]\nXML - XML content\nXML[]\nThe value is NULL.\nDetermines if a value of this type can be created from the …\nDetermines if a value of this type can be converted to the …\nGenerates a simple implementation of <code>ToSql::accepts</code> which …\nReturns a reference to <code>self</code> as a <code>ToSql</code> trait object.\nSpecify the encode format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>Type</code> corresponding to the provided <code>Oid</code> if it …\nCreates a new value of this type from a buffer of data of …\nCreates a new value of this type from a <code>NULL</code> SQL value.\nA convenience function that delegates to <code>from_sql</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the kind of this type.\nReturns the name of this type.\nReturns the name of the field.\nCreates a new <code>Type</code>.\nCreates a new <code>Field</code>.\nCreates a new <code>WrongType</code> error.\nReturns the OID of the <code>Type</code>.\nReturns the schema of this type.\nConverts the value of <code>self</code> into the binary format of the …\nAn adaptor method used internally by Rust-Postgres.\nGenerates an implementation of <code>ToSql::to_sql_checked</code>.\nReturns the type of the field.")