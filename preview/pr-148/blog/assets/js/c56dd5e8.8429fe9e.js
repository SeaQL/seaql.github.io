"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[6323],{4936:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var t=n(6867),r=n(8790),s=n(7630);const o={slug:"2022-09-27-getting-started-with-seaography",title:"Getting Started with Seaography",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Extending a SeaORM project",id:"extending-a-seaorm-project",level:2},{value:"Generating a project from database",id:"generating-a-project-from-database",level:2},{value:"Checkout the example projects",id:"checkout-the-example-projects",level:2},{value:"Starting the GraphQL Server",id:"starting-the-graphql-server",level:2},{value:"Query Data via GraphQL",id:"query-data-via-graphql",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"People",id:"people",level:2}];function h(e){const a={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/seaography",children:"Seaography"})," is a GraphQL framework for building GraphQL resolvers using ",(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/sea-orm",children:"SeaORM"}),". It ships with a CLI tool that can generate ready-to-compile Rust projects from existing MySQL, Postgres and SQLite databases."]}),"\n",(0,r.jsxs)(a.p,{children:["The design and implementation of Seaography can be found on our ",(0,r.jsx)(a.a,{href:"https://www.sea-ql.org/blog/2022-09-17-introducing-seaography/",children:"release blog post"})," and ",(0,r.jsx)(a.a,{href:"https://www.sea-ql.org/Seaography/",children:"documentation"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"extending-a-seaorm-project",children:"Extending a SeaORM project"}),"\n",(0,r.jsx)(a.p,{children:"Since Seaography is built on top of SeaORM, you can easily build a GraphQL server from a SeaORM project."}),"\n",(0,r.jsxs)(a.p,{children:["Start by adding Seaography and GraphQL dependencies to your ",(0,r.jsx)(a.code,{children:"Cargo.toml"}),"."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-diff",metastring:"title=Cargo.toml",children:'[dependencies]\nsea-orm = { version = "^0.9", features = [ ... ] }\n+ seaography = { version = "^0.1", features = [ "with-decimal", "with-chrono" ] }\n+ async-graphql = { version = "4.0.10", features = ["decimal", "chrono", "dataloader"] }\n+ async-graphql-poem = { version = "4.0.10" }\n'})}),"\n",(0,r.jsx)(a.p,{children:"Then, derive a few macros on the SeaORM entities."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-diff",metastring:"title=src/entities/film_actor.rs",children:'use sea_orm::entity::prelude::*;\n\n#[derive(\n    Clone,\n    Debug,\n    PartialEq,\n    DeriveEntityModel,\n+   async_graphql::SimpleObject,\n+   seaography::macros::Filter,\n)]\n+ #[graphql(complex)]\n+ #[graphql(name = "FilmActor")]\n#[sea_orm(table_name = "film_actor")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub actor_id: i32,\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub film_id: i32,\n    pub last_update: DateTimeUtc,\n}\n\n#[derive(\n    Copy,\n    Clone,\n    Debug,\n    EnumIter,\n    DeriveRelation,\n+   seaography::macros::RelationsCompact,\n)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::film::Entity",\n        from = "Column::FilmId",\n        to = "super::film::Column::FilmId",\n        on_update = "Cascade",\n        on_delete = "NoAction"\n    )]\n    Film,\n    #[sea_orm(\n        belongs_to = "super::actor::Entity",\n        from = "Column::ActorId",\n        to = "super::actor::Column::ActorId",\n        on_update = "Cascade",\n        on_delete = "NoAction"\n    )]\n    Actor,\n}\n'})}),"\n",(0,r.jsxs)(a.p,{children:["We also need to define ",(0,r.jsx)(a.code,{children:"QueryRoot"})," for the GraphQL server. This define the GraphQL schema."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-rust",metastring:"title=src/query_root.rs",children:'#[derive(Debug, seaography::macros::QueryRoot)]\n#[seaography(entity = "crate::entities::actor")]\n#[seaography(entity = "crate::entities::film")]\n#[seaography(entity = "crate::entities::film_actor")]\npub struct QueryRoot;\n'})}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-rust",metastring:"title=src/lib.rs",children:"use sea_orm::prelude::*;\n\npub mod entities;\npub mod query_root;\n\npub use query_root::QueryRoot;\n\npub struct OrmDataloader {\n    pub db: DatabaseConnection,\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:"Finally, create an executable to drive the GraphQL server."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-rust",metastring:"title=src/main.rs",children:'use async_graphql::{\n    dataloader::DataLoader,\n    http::{playground_source, GraphQLPlaygroundConfig},\n    EmptyMutation, EmptySubscription, Schema,\n};\nuse async_graphql_poem::GraphQL;\nuse poem::{handler, listener::TcpListener, web::Html, IntoResponse, Route, Server};\nuse sea_orm::Database;\nuse seaography_example_project::*;\n// ...\n\n#[handler]\nasync fn graphql_playground() -> impl IntoResponse {\n    Html(playground_source(GraphQLPlaygroundConfig::new("/")))\n}\n\n#[tokio::main]\nasync fn main() {\n    // ...\n\n    let database = Database::connect(db_url).await.unwrap();\n    let orm_dataloader: DataLoader<OrmDataloader> = DataLoader::new(\n        OrmDataloader { db: database.clone() },\n        tokio::spawn,\n    );\n\n    let schema = Schema::build(QueryRoot, EmptyMutation, EmptySubscription)\n        .data(database)\n        .data(orm_dataloader)\n        .finish();\n\n    let app = Route::new()\n        .at("/", get(graphql_playground)\n        .post(GraphQL::new(schema)));\n\n    Server::new(TcpListener::bind("0.0.0.0:8000"))\n        .run(app)\n        .await\n        .unwrap();\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"generating-a-project-from-database",children:"Generating a project from database"}),"\n",(0,r.jsx)(a.p,{children:"If all you have is a database schema, good news! You can setup a GraphQL server without writing a single line of code."}),"\n",(0,r.jsxs)(a.p,{children:["Install ",(0,r.jsx)(a.code,{children:"seaography-cli"}),", it helps you generate SeaORM entities along with a full Rust project based on a database schema."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"cargo install seaography-cli\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Run ",(0,r.jsx)(a.code,{children:"seaography-cli"})," to generate code for the GraphQL server."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"# The command take three arguments\nseaography-cli <DATABASE_URL> <CRATE_NAME> <DESTINATION>\n\n# MySQL\nseaography-cli mysql://root:root@localhost/sakila seaography-mysql-example examples/mysql\n# PostgreSQL\nseaography-cli postgres://root:root@localhost/sakila seaography-postgres-example examples/postgres\n# SQLite\nseaography-cli sqlite://examples/sqlite/sakila.db seaography-sqlite-example examples/sqliteql\n"})}),"\n",(0,r.jsx)(a.h2,{id:"checkout-the-example-projects",children:"Checkout the example projects"}),"\n",(0,r.jsx)(a.p,{children:"We have the following examples for you, alongside with the SQL scripts to initialize the database."}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/mysql",children:"MySQL"})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/postgres",children:"PostgreSQL"})}),"\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.a,{href:"https://github.com/SeaQL/seaography/tree/main/examples/sqlite",children:"SQLite"})}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["All examples provide a web-based GraphQL playground when running, so you can inspect the GraphQL schema and make queries. We also hosted a ",(0,r.jsx)(a.a,{href:"https://playground.sea-ql.org/seaography",children:"demo GraphQL playground"})," in case you can't wait to play with it."]}),"\n",(0,r.jsx)(a.h2,{id:"starting-the-graphql-server",children:"Starting the GraphQL Server"}),"\n",(0,r.jsxs)(a.p,{children:["Your GraphQL server is ready to launch! Go to the Rust project root then execute ",(0,r.jsx)(a.code,{children:"cargo run"})," to spin it up."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-shell",children:"$ cargo run\n\nPlayground: http://localhost:8000\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Visit the GraphQL playground at ",(0,r.jsx)(a.a,{href:"http://localhost:8000",children:"http://localhost:8000"})]}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{src:"https://www.sea-ql.org/Seaography/img/playground_example_database.png",alt:"GraphQL Playground"})}),"\n",(0,r.jsx)(a.h2,{id:"query-data-via-graphql",children:"Query Data via GraphQL"}),"\n",(0,r.jsx)(a.p,{children:"Let say we want to get the first 3 films released on or after year 2006 sorted in ascending order of its title."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-graphql",children:'{\n  film(\n    pagination: { limit: 3, page: 0 }\n    filters: { releaseYear: { gte: "2006" } }\n    orderBy: { title: ASC }\n  ) {\n    data {\n      filmId\n      title\n      description\n      releaseYear\n      filmActor {\n        actor {\n          actorId\n          firstName\n          lastName\n        }\n      }\n    }\n    pages\n    current\n  }\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"We got the following JSON result after running the GraphQL query."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-json",children:'{\n  "data": {\n    "film": {\n      "data": [\n        {\n          "filmId": 1,\n          "title": "ACADEMY DINOSAUR",\n          "description": "An Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies",\n          "releaseYear": "2006",\n          "filmActor": [\n            {\n              "actor": {\n                "actorId": 1,\n                "firstName": "PENELOPE",\n                "lastName": "GUINESS"\n              }\n            },\n            {\n              "actor": {\n                "actorId": 10,\n                "firstName": "CHRISTIAN",\n                "lastName": "GABLE"\n              }\n            },\n            // ...\n          ]\n        },\n        {\n          "filmId": 2,\n          "title": "ACE GOLDFINGER",\n          "description": "A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China",\n          "releaseYear": "2006",\n          "filmActor": [\n            // ...\n          ]\n        },\n        // ...\n      ],\n      "pages": 334,\n      "current": 0\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"Behind the scene, the following SQL were queried:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:'SELECT "film"."film_id",\n       "film"."title",\n       "film"."description",\n       "film"."release_year",\n       "film"."language_id",\n       "film"."original_language_id",\n       "film"."rental_duration",\n       "film"."rental_rate",\n       "film"."length",\n       "film"."replacement_cost",\n       "film"."rating",\n       "film"."special_features",\n       "film"."last_update"\nFROM "film"\nWHERE "film"."release_year" >= \'2006\'\nORDER BY "film"."title" ASC\nLIMIT 3 OFFSET 0\n\nSELECT "film_actor"."actor_id", "film_actor"."film_id", "film_actor"."last_update"\nFROM "film_actor"\nWHERE "film_actor"."film_id" IN (1, 3, 2)\n\nSELECT "actor"."actor_id", "actor"."first_name", "actor"."last_name", "actor"."last_update"\nFROM "actor"\nWHERE "actor"."actor_id" IN (24, 162, 20, 160, 1, 188, 123, 30, 53, 40, 2, 64, 85, 198, 10, 19, 108, 90)\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Under the hood, Seaography uses ",(0,r.jsx)(a.a,{href:"https://docs.rs/async-graphql/latest/async_graphql/dataloader/index.html",children:"async_graphql::dataloader"})," in querying nested objects to tackle the N+1 problem."]}),"\n",(0,r.jsxs)(a.p,{children:["To learn more, checkout the ",(0,r.jsx)(a.a,{href:"https://www.sea-ql.org/Seaography/docs/data-loader/",children:"Seaography Documentation"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(a.p,{children:"Seaography is an ergonomic library that turns SeaORM entities into GraphQL nodes. It provides a set of utilities and combined with a code generator makes GraphQL API building a breeze."}),"\n",(0,r.jsx)(a.p,{children:"However, Seaography is still a new-born. Like all other open-source projects developed by passionate Rust developers, you can contribute to it if you also find the concept interesting. With its addition to the SeaQL ecosystem, we are one step closer to the vision of Rust being the best tool for data engineering."}),"\n",(0,r.jsx)(a.h2,{id:"people",children:"People"}),"\n",(0,r.jsx)(a.p,{children:"Seaography is created by:"}),"\n",(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"row",children:[(0,r.jsx)("div",{className:"col col--12 margin-bottom--md",children:(0,r.jsxs)("div",{className:"avatar",children:[(0,r.jsx)("a",{className:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/karatakis",children:(0,r.jsx)("img",{src:"https://avatars.githubusercontent.com/u/7329022?v=4"})}),(0,r.jsxs)("div",{className:"avatar__intro",children:[(0,r.jsx)("div",{className:"avatar__name",children:(0,r.jsx)(a.p,{children:"Panagiotis Karatakis"})}),(0,r.jsx)(a.p,{children:"Summer of Code Contributor; developer of Seaography"})]})]})}),(0,r.jsx)("div",{className:"col col--12 margin-bottom--md",children:(0,r.jsxs)("div",{className:"avatar",children:[(0,r.jsx)("a",{className:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tyt2y3",children:(0,r.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1782664?v=4"})}),(0,r.jsxs)("div",{className:"avatar__intro",children:[(0,r.jsx)("div",{className:"avatar__name",children:(0,r.jsx)(a.p,{children:"Chris Tsang"})}),(0,r.jsx)(a.p,{children:"Summer of Code Mentor; lead developer of SeaQL"})]})]})}),(0,r.jsx)("div",{className:"col col--12 margin-bottom--md",children:(0,r.jsxs)("div",{className:"avatar",children:[(0,r.jsx)("a",{className:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/billy1624",children:(0,r.jsx)("img",{src:"https://avatars.githubusercontent.com/u/30400950?v=4"})}),(0,r.jsxs)("div",{className:"avatar__intro",children:[(0,r.jsx)("div",{className:"avatar__name",children:(0,r.jsx)(a.p,{children:"Billy Chan"})}),(0,r.jsx)(a.p,{children:"Summer of Code Mentor; core member of SeaQL"})]})]})})]})})]})}function d(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},6867:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-148/blog/2022-09-27-getting-started-with-seaography","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-09-27-getting-started-with-seaography.md","source":"@site/blog/2022-09-27-getting-started-with-seaography.md","title":"Getting Started with Seaography","description":"Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM. It ships with a CLI tool that can generate ready-to-compile Rust projects from existing MySQL, Postgres and SQLite databases.","date":"2022-09-27T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-148/blog/tags/news"}],"readingTime":5.315,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Chris Tsang","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2022-09-27-getting-started-with-seaography","title":"Getting Started with Seaography","author":"SeaQL Team","author_title":"Chris Tsang","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"What\'s new in SeaQuery 0.27.0","permalink":"/preview/pr-148/blog/2022-10-31-whats-new-in-seaquery-0.27.0"},"nextItem":{"title":"Introducing Seaography \ud83e\udded","permalink":"/preview/pr-148/blog/2022-09-17-introducing-seaography"}}')},7630:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var t=n(2374);const r={},s=t.createContext(r);function o(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);