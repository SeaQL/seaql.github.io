"use strict";(self.webpackChunksea_orm_x=self.webpackChunksea_orm_x||[]).push([[208],{2204:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>c});var d=i(2374);const r={},n=d.createContext(r);function s(e){const t=d.useContext(n);return d.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),d.createElement(n.Provider,{value:t},e.children)}},8162:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>h});const d=JSON.parse('{"id":"generate-entity/entity-structure","title":"Entity Structure","description":"Column","source":"@site/docs/04-generate-entity/02-entity-structure.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/entity-structure","permalink":"/preview/pr-150/SeaORM-X/docs/generate-entity/entity-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM-X/docs/04-generate-entity/02-entity-structure.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756074242000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using sea-orm-cli","permalink":"/preview/pr-150/SeaORM-X/docs/generate-entity/sea-orm-cli"},"next":{"title":"Insert","permalink":"/preview/pr-150/SeaORM-X/docs/basic-crud/insert"}}');var r=i(8790),n=i(2204);const s={},c="Entity Structure",l={},h=[{value:"Column",id:"column",level:2},{value:"Column Type",id:"column-type",level:3}];function x(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"entity-structure",children:"Entity Structure"})}),"\n",(0,r.jsx)(t.h2,{id:"column",children:"Column"}),"\n",(0,r.jsx)(t.h3,{id:"column-type",children:"Column Type"}),"\n",(0,r.jsx)(t.p,{children:"The column type will be derived automatically with the following mapping:"}),"\n",(0,r.jsx)(t.p,{children:"For the mappings of Rust primitive data types."}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Rust type"}),(0,r.jsxs)(t.th,{children:["Database Type ",(0,r.jsx)("br",{})," (",(0,r.jsx)(t.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/enum.ColumnType.html",children:(0,r.jsx)(t.code,{children:"ColumnType"})}),")"]}),(0,r.jsxs)(t.th,{children:["MSSQL ",(0,r.jsx)("br",{})," datatype"]})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"String"})}),(0,r.jsx)(t.td,{children:"Char"}),(0,r.jsx)(t.td,{children:"nchar"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"String"})}),(0,r.jsx)(t.td,{children:"String"}),(0,r.jsx)(t.td,{children:"nvarchar"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"i8"})}),(0,r.jsx)(t.td,{children:"TinyInteger"}),(0,r.jsx)(t.td,{children:"tinyint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"u8"})}),(0,r.jsx)(t.td,{children:"TinyUnsigned"}),(0,r.jsx)(t.td,{children:"tinyint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"i16"})}),(0,r.jsx)(t.td,{children:"SmallInteger"}),(0,r.jsx)(t.td,{children:"smallint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"u16"})}),(0,r.jsx)(t.td,{children:"SmallUnsigned"}),(0,r.jsx)(t.td,{children:"smallint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"i32"})}),(0,r.jsx)(t.td,{children:"Integer"}),(0,r.jsx)(t.td,{children:"int"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"u32"})}),(0,r.jsx)(t.td,{children:"Unsigned"}),(0,r.jsx)(t.td,{children:"int"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"i64"})}),(0,r.jsx)(t.td,{children:"BigInteger"}),(0,r.jsx)(t.td,{children:"bigint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"u64"})}),(0,r.jsx)(t.td,{children:"BigUnsigned"}),(0,r.jsx)(t.td,{children:"bigint"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"f32"})}),(0,r.jsx)(t.td,{children:"Float"}),(0,r.jsx)(t.td,{children:"real"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"f64"})}),(0,r.jsx)(t.td,{children:"Double"}),(0,r.jsx)(t.td,{children:"float"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bool"})}),(0,r.jsx)(t.td,{children:"Boolean"}),(0,r.jsx)(t.td,{children:"bit"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Vec<u8>"})}),(0,r.jsx)(t.td,{children:"Binary"}),(0,r.jsx)(t.td,{children:"binary"})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:["For the mappings of Rust non-primitive data types. You can check ",(0,r.jsx)(t.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/entity/prelude.rs",children:(0,r.jsx)(t.code,{children:"entity/prelude.rs"})})," for all of the reexported types."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Rust type"}),(0,r.jsxs)(t.th,{children:["Database Type ",(0,r.jsx)("br",{})," (",(0,r.jsx)(t.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/enum.ColumnType.html",children:(0,r.jsx)(t.code,{children:"ColumnType"})}),")"]}),(0,r.jsxs)(t.th,{children:["MSSQL ",(0,r.jsx)("br",{})," datatype"]})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"Date"}),": chrono::NaiveDate ",(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"TimeDate"}),": time::Date"]}),(0,r.jsx)(t.td,{children:"Date"}),(0,r.jsx)(t.td,{children:"date"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"Time"}),": chrono::NaiveTime ",(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"TimeTime"}),": time::Time"]}),(0,r.jsx)(t.td,{children:"Time"}),(0,r.jsx)(t.td,{children:"time"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"DateTime"}),": chrono::NaiveDateTime ",(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"TimeDateTime"}),": time::PrimitiveDateTime"]}),(0,r.jsx)(t.td,{children:"DateTime"}),(0,r.jsx)(t.td,{children:"datetime"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"DateTimeLocal"}),": chrono::DateTime<Local> ",(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"DateTimeUtc"}),": chrono::DateTime<Utc>"]}),(0,r.jsx)(t.td,{children:"Timestamp"}),(0,r.jsx)(t.td,{children:"datetime2"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"DateTimeWithTimeZone"}),": chrono::DateTime<FixedOffset> ",(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"TimeDateTimeWithTimeZone"}),": time::OffsetDateTime"]}),(0,r.jsx)(t.td,{children:"TimestampWithTimeZone"}),(0,r.jsx)(t.td,{children:"datetimeoffset"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"Uuid"}),": uuid::Uuid, uuid::fmt::Braced, uuid::fmt::Hyphenated, uuid::fmt::Simple, uuid::fmt::Urn"]}),(0,r.jsx)(t.td,{children:"Uuid"}),(0,r.jsx)(t.td,{children:"uniqueidentifier"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"Json"}),": serde_json::Value"]}),(0,r.jsx)(t.td,{children:"Json"}),(0,r.jsx)(t.td,{children:"nvarchar(max)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"Decimal"}),": rust_decimal::Decimal"]}),(0,r.jsx)(t.td,{children:"Decimal"}),(0,r.jsx)(t.td,{children:"decimal"})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}}}]);