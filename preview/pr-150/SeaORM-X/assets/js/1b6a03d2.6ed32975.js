"use strict";(self.webpackChunksea_orm_x=self.webpackChunksea_orm_x||[]).push([[944],{2204:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(2374);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}},6738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"basic-crud/insert","title":"Insert","description":"Identity Insert","source":"@site/docs/05-basic-crud/01-insert.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/insert","permalink":"/preview/pr-150/SeaORM-X/docs/basic-crud/insert","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM-X/docs/05-basic-crud/01-insert.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756133696000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Entity Structure","permalink":"/preview/pr-150/SeaORM-X/docs/generate-entity/entity-structure"}}');var i=n(8790),s=n(2204);const a={},c="Insert",d={},o=[{value:"Identity Insert",id:"identity-insert",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"insert",children:"Insert"})}),"\n",(0,i.jsx)(t.h2,{id:"identity-insert",children:"Identity Insert"}),"\n",(0,i.jsxs)(t.p,{children:["Insert an active model with a specific primary key value. For MSSQL, SeaORM X will automatically enable ",(0,i.jsx)(t.code,{children:"IDENTITY INSERT"})," when inserting a row with primary key value and disable the ",(0,i.jsx)(t.code,{children:"IDENTITY INSERT"})," once the insert finished."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'let pear = fruit::ActiveModel {\n    id: Set(1),\n    name: Set("Pear".to_owned()),\n    cake_id: NotSet,\n};\n\n// `IDENTITY INSERT` behind the hood\nlet pear: fruit::Model = pear.insert(db).await?;\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);