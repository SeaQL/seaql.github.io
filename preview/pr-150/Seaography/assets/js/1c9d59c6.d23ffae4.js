"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[573],{558:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"generated-project-structure","title":"Generated project structure","description":"On this article we will describe the generated project structure.","source":"@site/versioned_docs/version-0.3.0/03-generated-project-structure.md","sourceDirName":".","slug":"/generated-project-structure","permalink":"/preview/pr-150/Seaography/docs/generated-project-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/versioned_docs/version-0.3.0/03-generated-project-structure.md","tags":[],"version":"0.3.0","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756076173000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Running the example","permalink":"/preview/pr-150/Seaography/docs/running-example"},"next":{"title":"Extending generated code","permalink":"/preview/pr-150/Seaography/docs/extending-code"}}');var a=t(8790),i=t(8032);const s={},o="Generated project structure",l={},c=[{value:"Entities",id:"entities",level:3},{value:"Example content:",id:"example-content",level:4},{value:"<code>sea_orm_active_enums.rs</code>",id:"sea_orm_active_enumsrs",level:3},{value:"Example content:",id:"example-content-1",level:4},{value:"<code>query_root.rs</code>",id:"query_rootrs",level:3},{value:"Example content:",id:"example-content-2",level:4},{value:"<code>lib.rs</code>",id:"librs",level:3},{value:"Example content:",id:"example-content-3",level:4},{value:"<code>main.rs</code>",id:"mainrs",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"generated-project-structure",children:"Generated project structure"})}),"\n",(0,a.jsx)(n.p,{children:"On this article we will describe the generated project structure."}),"\n",(0,a.jsxs)(n.p,{children:["All examples are based on ",(0,a.jsx)(n.a,{href:"https://dev.mysql.com/doc/sakila/en/",children:"https://dev.mysql.com/doc/sakila/en/"})," database."]}),"\n",(0,a.jsx)(n.h3,{id:"entities",children:"Entities"}),"\n",(0,a.jsx)(n.p,{children:"This folder contains all SeaORM entities."}),"\n",(0,a.jsx)(n.h4,{id:"example-content",children:"Example content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#![doc = "SeaORM Entity. Generated by sea-orm-codegen 0.9.1"]\nuse sea_orm::entity::prelude::*;\n#[derive(Copy, Clone, Default, Debug, DeriveEntity)]\npub struct Entity;\nimpl EntityName for Entity {\n    fn table_name(&self) -> &str {\n        "actor"\n    }\n}\n#[derive(\n    Clone,\n    Debug,\n    PartialEq,\n    DeriveModel,\n    DeriveActiveModel,\n    async_graphql::SimpleObject,\n    seaography::macros::Filter,\n)]\n#[sea_orm(table_name = "actor")]\n#[graphql(complex)]\n#[graphql(name = "Actor")]\npub struct Model {\n    pub actor_id: u16,\n    pub first_name: String,\n    pub last_name: String,\n    pub last_update: DateTimeUtc,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]\npub enum Column {\n    ActorId,\n    FirstName,\n    LastName,\n    LastUpdate,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]\npub enum PrimaryKey {\n    ActorId,\n}\nimpl PrimaryKeyTrait for PrimaryKey {\n    type ValueType = u16;\n    fn auto_increment() -> bool {\n        true\n    }\n}\n#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    FilmActor,\n}\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n    fn def(&self) -> ColumnDef {\n        match self {\n            Self::ActorId => ColumnType::SmallUnsigned.def(),\n            Self::FirstName => ColumnType::String(Some(45u32)).def(),\n            Self::LastName => ColumnType::String(Some(45u32)).def(),\n            Self::LastUpdate => ColumnType::Timestamp.def(),\n        }\n    }\n}\n#[seaography::macros::relation]\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::FilmActor => Entity::has_many(super::film_actor::Entity).into(),\n        }\n    }\n}\nimpl Related<super::film_actor::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::FilmActor.def()\n    }\n}\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"sea_orm_active_enumsrs",children:(0,a.jsx)(n.code,{children:"sea_orm_active_enums.rs"})}),"\n",(0,a.jsx)(n.p,{children:"This file contains all database enumerations."}),"\n",(0,a.jsx)(n.h4,{id:"example-content-1",children:"Example content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#![doc = "SeaORM Entity. Generated by sea-orm-codegen 0.9.1"]\nuse sea_orm::entity::prelude::*;\n#[derive(\n    Debug,\n    Clone,\n    PartialEq,\n    EnumIter,\n    DeriveActiveEnum,\n    Eq,\n    Copy,\n    async_graphql::Enum,\n    seaography::macros::EnumFilter,\n)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rating")]\npub enum Rating {\n    #[sea_orm(string_value = "G")]\n    G,\n    #[sea_orm(string_value = "PG")]\n    Pg,\n    #[sea_orm(string_value = "PG-13")]\n    Pg13,\n    #[sea_orm(string_value = "R")]\n    R,\n    #[sea_orm(string_value = "NC-17")]\n    Nc17,\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"query_rootrs",children:(0,a.jsx)(n.code,{children:"query_root.rs"})}),"\n",(0,a.jsx)(n.p,{children:"Contains the QueryRoot for the GraphQL entities queries."}),"\n",(0,a.jsx)(n.h4,{id:"example-content-2",children:"Example content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, seaography::macros::QueryRoot)]\n#[seaography(entity = "crate::entities::category")]\n#[seaography(entity = "crate::entities::film_actor")]\n#[seaography(entity = "crate::entities::staff")]\n#[seaography(entity = "crate::entities::store")]\n#[seaography(entity = "crate::entities::film_text")]\n#[seaography(entity = "crate::entities::film_category")]\n#[seaography(entity = "crate::entities::customer")]\n#[seaography(entity = "crate::entities::address")]\n#[seaography(entity = "crate::entities::language")]\n#[seaography(entity = "crate::entities::city")]\n#[seaography(entity = "crate::entities::payment")]\n#[seaography(entity = "crate::entities::rental")]\n#[seaography(entity = "crate::entities::country")]\n#[seaography(entity = "crate::entities::actor")]\n#[seaography(entity = "crate::entities::film")]\n#[seaography(entity = "crate::entities::inventory")]\npub struct QueryRoot;\n'})}),"\n",(0,a.jsx)(n.h3,{id:"librs",children:(0,a.jsx)(n.code,{children:"lib.rs"})}),"\n",(0,a.jsx)(n.p,{children:"Contains the OrmDataLoader that we extend to provide entities relations loaders."}),"\n",(0,a.jsx)(n.h4,{id:"example-content-3",children:"Example content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"use sea_orm::prelude::*;\npub mod entities;\npub mod query_root;\npub use query_root::QueryRoot;\npub struct OrmDataloader {\n    pub db: DatabaseConnection,\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"mainrs",children:(0,a.jsx)(n.code,{children:"main.rs"})}),"\n",(0,a.jsx)(n.p,{children:"Establish the database connection, constructs the GraphQL context and serves the API."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8032:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(2374);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);