"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[6576],{3443:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"configuration/architecture","title":"SeaStreamer Architecture","description":"The architecture of sea-streamer is constructed by a number of sub-crates:","source":"@site/versioned_docs/version-0.1.x/02-configuration/02-architecture.md","sourceDirName":"02-configuration","slug":"/configuration/architecture","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/configuration/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/versioned_docs/version-0.1.x/02-configuration/02-architecture.md","tags":[],"version":"0.1.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755602621000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Configuring Features","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/configuration/configuration"},"next":{"title":"Streamer","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/streamer/streamer"}}');var a=s(8790),n=s(6484);const i={},c="SeaStreamer Architecture",o={},d=[{value:"<code>sea-streamer-types</code>: Traits &amp; Types",id:"sea-streamer-types-traits--types",level:3},{value:"<code>sea-streamer-socket</code>: Backend-agnostic Socket API",id:"sea-streamer-socket-backend-agnostic-socket-api",level:3},{value:"<code>sea-streamer-kafka</code>: Kafka / Redpanda Backend",id:"sea-streamer-kafka-kafka--redpanda-backend",level:3},{value:"<code>sea-streamer-stdio</code>: Standard I/O Backend",id:"sea-streamer-stdio-standard-io-backend",level:3},{value:"<code>sea-streamer-runtime</code>: Async runtime abstraction",id:"sea-streamer-runtime-async-runtime-abstraction",level:3}];function l(e){const r={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"seastreamer-architecture",children:"SeaStreamer Architecture"})}),"\n",(0,a.jsxs)(r.p,{children:["The architecture of ",(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer",children:(0,a.jsx)(r.code,{children:"sea-streamer"})})," is constructed by a number of sub-crates:"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer-types",children:(0,a.jsx)(r.code,{children:"sea-streamer-types"})})}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer-socket",children:(0,a.jsx)(r.code,{children:"sea-streamer-socket"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer-kafka",children:(0,a.jsx)(r.code,{children:"sea-streamer-kafka"})})}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer-stdio",children:(0,a.jsx)(r.code,{children:"sea-streamer-stdio"})})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.li,{children:(0,a.jsx)(r.a,{href:"https://docs.rs/sea-streamer-runtime",children:(0,a.jsx)(r.code,{children:"sea-streamer-runtime"})})}),"\n"]}),"\n",(0,a.jsxs)(r.h3,{id:"sea-streamer-types-traits--types",children:[(0,a.jsx)(r.code,{children:"sea-streamer-types"}),": Traits & Types"]}),"\n",(0,a.jsx)(r.p,{children:"This crate defines all the traits and types for the SeaStreamer API, but does not provide any implementation."}),"\n",(0,a.jsxs)(r.h3,{id:"sea-streamer-socket-backend-agnostic-socket-api",children:[(0,a.jsx)(r.code,{children:"sea-streamer-socket"}),": Backend-agnostic Socket API"]}),"\n",(0,a.jsx)(r.p,{children:"Akin to how SeaORM allows you to build applications for different databases, SeaStreamer allows you to build\nstream processors for different streaming servers."}),"\n",(0,a.jsxs)(r.p,{children:["While the ",(0,a.jsx)(r.code,{children:"sea-streamer-types"})," crate provides a nice trait-based abstraction, this crates provides a concrete-type API,\nso that your program can stream from/to any SeaStreamer backend selected by the user ",(0,a.jsx)(r.em,{children:"on runtime"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["This allows you to do neat things, like generating data locally and then stream them to Kafka. Or in the other\nway, sink data from Kafka to work on them locally. All ",(0,a.jsx)(r.em,{children:"without recompiling"})," the stream processor."]}),"\n",(0,a.jsxs)(r.h3,{id:"sea-streamer-kafka-kafka--redpanda-backend",children:[(0,a.jsx)(r.code,{children:"sea-streamer-kafka"}),": Kafka / Redpanda Backend"]}),"\n",(0,a.jsx)(r.p,{children:"This is the Kafka / Redpanda backend implementation for SeaStreamer.\nThis crate provides a comprehensive type system that makes working with Kafka easier and safer."}),"\n",(0,a.jsxs)(r.p,{children:["This crate depends on ",(0,a.jsx)(r.a,{href:"https://docs.rs/rdkafka",children:(0,a.jsx)(r.code,{children:"rdkafka"})}),",\nwhich in turn depends on ",(0,a.jsx)(r.a,{href:"https://docs.rs/librdkafka-sys",children:"librdkafka-sys"}),", which itself is a wrapper of\n",(0,a.jsx)(r.a,{href:"https://docs.confluent.io/platform/current/clients/librdkafka/html/index.html",children:"librdkafka"}),"."]}),"\n",(0,a.jsxs)(r.h3,{id:"sea-streamer-stdio-standard-io-backend",children:[(0,a.jsx)(r.code,{children:"sea-streamer-stdio"}),": Standard I/O Backend"]}),"\n",(0,a.jsxs)(r.p,{children:["This is the ",(0,a.jsx)(r.code,{children:"stdio"})," backend implementation for SeaStreamer. It is designed to be connected together with unix pipes,\nenabling great flexibility when developing stream processors or processing data locally."]}),"\n",(0,a.jsxs)(r.p,{children:["You can connect processors together with pipes: ",(0,a.jsx)(r.code,{children:"processor_a | processor_b"}),"."]}),"\n",(0,a.jsxs)(r.h3,{id:"sea-streamer-runtime-async-runtime-abstraction",children:[(0,a.jsx)(r.code,{children:"sea-streamer-runtime"}),": Async runtime abstraction"]}),"\n",(0,a.jsxs)(r.p,{children:["This crate provides a small set of functions aligning the type signatures between ",(0,a.jsx)(r.code,{children:"async-std"})," and ",(0,a.jsx)(r.code,{children:"tokio"}),",\nso that you can build applications generic to both runtimes."]})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},6484:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>c});var t=s(2374);const a={},n=t.createContext(a);function i(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);