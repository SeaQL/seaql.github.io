"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[4932],{4804:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"processors/inter-process","title":"Inter Process","description":"SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options.","source":"@site/versioned_docs/version-0.3.x/04-processors/01-inter-process.md","sourceDirName":"04-processors","slug":"/processors/inter-process","permalink":"/preview/pr-150/SeaStreamer/docs/processors/inter-process","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/versioned_docs/version-0.3.x/04-processors/01-inter-process.md","tags":[],"version":"0.3.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755628065000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Consumer","permalink":"/preview/pr-150/SeaStreamer/docs/streamer/consumer"},"next":{"title":"Intra Process","permalink":"/preview/pr-150/SeaStreamer/docs/processors/intra-process"}}');var n=a(8790),t=a(6484);const o={},i="Inter Process",c={},l=[{value:"Trying out",id:"trying-out",level:2},{value:"Stdio message format",id:"stdio-message-format",level:2}];function d(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"inter-process",children:"Inter Process"})}),"\n",(0,n.jsx)(s.p,{children:"SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options."}),"\n",(0,n.jsx)(s.p,{children:"The unix pipe is a great invention, which makes anyone a text processing wizard by assembling programs in the shell!"}),"\n",(0,n.jsx)(s.p,{children:"What if we can also work with event streams in the same way?"}),"\n",(0,n.jsx)(s.p,{children:"With SeaStreamer, you can connect processors together with pipes:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"processor_a | processor_b\n"})}),"\n",(0,n.jsx)(s.p,{children:"You can also connect them asynchronously with files:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"touch stream # set up an empty file\ntail -f stream | processor_b # program b can be spawned anytime\nprocessor_a >> stream # append to the file\n"})}),"\n",(0,n.jsx)(s.p,{children:"Or with the File backend:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"file=/tmp/sea-streamer-$(date +%s)\ntouch $file\nprocessor_a --output file://$file\nprocessor_b --input  file://$file\n"})}),"\n",(0,n.jsx)(s.h2,{id:"trying-out",children:"Trying out"}),"\n",(0,n.jsx)(s.p,{children:"A small number of cli programs are provided for demonstration. Let's set them up first:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"# The `clock` program generate messages in the form of `{ \"tick\": N }`\nalias clock='cargo run --package sea-streamer-stdio  --features=executables --bin clock'\n# The `relay` program redirect messages from `input` to `output`\nalias relay='cargo run --package sea-streamer-socket --features=executables,backend-kafka,backend-redis --bin relay'\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Here is how to stream from Stdio \u27a1\ufe0f Redis / Kafka. We generate messages using ",(0,n.jsx)(s.code,{children:"clock"})," and then pipe it to ",(0,n.jsx)(s.code,{children:"relay"}),",\nwhich then streams to Redis / Kafka:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"# Stdio -> Redis\nclock -- --stream clock --interval 1s | \\\nrelay -- --input stdio:///clock --output redis://localhost:6379/clock\n# Stdio -> Kafka\nclock -- --stream clock --interval 1s | \\\nrelay -- --input stdio:///clock --output kafka://localhost:9092/clock\n"})}),"\n",(0,n.jsx)(s.p,{children:"Here is how to stream between Redis \u2194\ufe0f Kafka:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"# Redis -> Kafka\nrelay -- --input redis://localhost:6379/clock --output kafka://localhost:9092/clock\n# Kafka -> Redis\nrelay -- --input kafka://localhost:9092/clock --output redis://localhost:6379/clock\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Here is how to ",(0,n.jsx)(s.em,{children:"replay"})," the stream from Kafka / Redis:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-shell",children:"relay -- --input redis://localhost:6379/clock --output stdio:///clock --offset start\nrelay -- --input kafka://localhost:9092/clock --output stdio:///clock --offset start\n"})}),"\n",(0,n.jsx)(s.h2,{id:"stdio-message-format",children:"Stdio message format"}),"\n",(0,n.jsx)(s.p,{children:"You can write any valid UTF-8 string to stdin and each line will be considered a message. In addition, you can write some message meta in a simple format:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-log",children:"[timestamp | stream_key | sequence | shard_id] payload\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Note: the square brackets are literal ",(0,n.jsx)(s.code,{children:"["})," ",(0,n.jsx)(s.code,{children:"]"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"The following are all valid:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-log",children:'a plain, raw message\n[2022-01-01T00:00:00] { "payload": "anything" }\n[2022-01-01T00:00:00.123 | my_topic] "a string payload"\n[2022-01-01T00:00:00 | my-topic-2 | 123] ["array", "of", "values"]\n[2022-01-01T00:00:00 | my-topic-2 | 123 | 4] { "payload": "anything" }\n[my_topic] a string payload\n[my_topic | 123] { "payload": "anything" }\n[my_topic | 123 | 4] { "payload": "anything" }\n'})}),"\n",(0,n.jsx)(s.p,{children:"The following are all invalid:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-log",children:'[Jan 1, 2022] { "payload": "anything" }\n[2022-01-01T00:00:00] 12345\n'})}),"\n",(0,n.jsxs)(s.p,{children:["If no stream key is given, it will be assigned the name ",(0,n.jsx)(s.code,{children:"broadcast"})," and sent to all consumers."]})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},6484:(e,s,a)=>{a.d(s,{R:()=>o,x:()=>i});var r=a(2374);const n={},t=r.createContext(n);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);