"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[6829],{4037:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting-started/examples","title":"Example Processors","description":"We maintain a set of examples which you can use as a starting point for you to develop your stream processors.","source":"@site/versioned_docs/version-0.3.x/02-getting-started/03-examples.md","sourceDirName":"02-getting-started","slug":"/getting-started/examples","permalink":"/preview/pr-150/SeaStreamer/docs/getting-started/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/versioned_docs/version-0.3.x/02-getting-started/03-examples.md","tags":[],"version":"0.3.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756120076000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SeaStreamer Architecture","permalink":"/preview/pr-150/SeaStreamer/docs/getting-started/architecture"},"next":{"title":"Streamer","permalink":"/preview/pr-150/SeaStreamer/docs/streamer/streamer"}}');var o=r(8790),n=r(6484);const a={},c="Example Processors",i={},l=[{value:"Running the basic processor example",id:"running-the-basic-processor-example",level:2},{value:"Running the resumable processor example",id:"running-the-resumable-processor-example",level:2},{value:"Running the buffered processor example",id:"running-the-buffered-processor-example",level:2},{value:"Running the blocking processor example",id:"running-the-blocking-processor-example",level:2}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components},{Details:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.header,{children:(0,o.jsx)(s.h1,{id:"example-processors",children:"Example Processors"})}),"\n",(0,o.jsxs)(s.p,{children:["We maintain a ",(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/tree/main/examples",children:"set of examples"})," which you can use as a starting point for you to develop your stream processors."]}),"\n",(0,o.jsxs)(s.p,{children:["The examples work for both ",(0,o.jsx)(s.code,{children:"tokio"})," and ",(0,o.jsx)(s.code,{children:"async-std"})," and uses the ",(0,o.jsx)(s.code,{children:"sea-streamer-socket"})," API:"]}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/consumer.rs",children:(0,o.jsx)(s.code,{children:"consumer"})}),": A basic consumer"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/producer.rs",children:(0,o.jsx)(s.code,{children:"producer"})}),": A basic producer"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/processor.rs",children:(0,o.jsx)(s.code,{children:"processor"})}),": A basic stream processor"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/resumable.rs",children:(0,o.jsx)(s.code,{children:"resumable"})}),": A resumable stream processor that continues from where it left off"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs",children:(0,o.jsx)(s.code,{children:"buffered"})}),": An advanced stream processor with internal buffering and batch processing"]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/blocking.rs",children:(0,o.jsx)(s.code,{children:"blocking"})}),": An advanced stream processor for handling blocking / CPU-bound tasks"]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"running-the-basic-processor-example",children:"Running the basic processor example"}),"\n",(0,o.jsx)(s.p,{children:"With Kafka:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"# Produce some input\ncargo run --bin producer -- --stream kafka://localhost:9092/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input kafka://localhost:9092/hello1 --output kafka://localhost:9092/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream kafka://localhost:9092/hello2\n# Remember to stop the processes\nkill %1 %2\n"})}),"\n",(0,o.jsx)(s.p,{children:"With Redis:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"# Produce some input\ncargo run --bin producer -- --stream redis://localhost:6379/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input redis://localhost:6379/hello1 --output redis://localhost:6379/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream redis://localhost:6379/hello2\n# Remember to stop the processes\nkill %1 %2\n"})}),"\n",(0,o.jsx)(s.p,{children:"With File:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:'# Create the file\nfile=/tmp/sea-streamer-$(date +%s)\ntouch $file && echo "File created at $file"\n# Produce some input\ncargo run --bin producer -- --stream file://$file/hello &\n# Replay the input\ncargo run --bin consumer -- --stream file://$file/hello\n# Start the processor, producing some output\ncargo run --bin processor -- --input file://$file/hello --output stdio:///hello\n'})}),"\n",(0,o.jsx)(s.p,{children:"With Stdio:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"# Pipe the producer to the processor\ncargo run --bin producer -- --stream stdio:///hello1 | \\\ncargo run --bin processor -- --input stdio:///hello1 --output stdio:///hello2\n"})}),"\n",(0,o.jsx)(s.h2,{id:"running-the-resumable-processor-example",children:"Running the resumable processor example"}),"\n",(0,o.jsx)(s.p,{children:'The resumable processor can be killed anytime, and will continue from where it left off.\nThis is typically called "at least once" processing, meaning no messages should be skipped,\nbut it\'s possible for the same message to be processed twice.'}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:'STREAMER_URI="kafka://localhost:9092"\nSTREAMER_URI="redis://localhost:6379"\n# Produce lots of input\ncargo run --bin producer -- --stream $STREAMER_URI/hello1\n# Run the processor, but kill it before it can process the entire stream\ncargo run --bin resumable -- --input $STREAMER_URI/hello1 --output stdio:///hello2 | head -n 10\ncargo run --bin resumable -- --input $STREAMER_URI/hello1 --output stdio:///hello2 | head -n 10\ncargo run --bin resumable -- --input $STREAMER_URI/hello1 --output stdio:///hello2 | head -n 10\n'})}),"\n",(0,o.jsx)(s.p,{children:"Output:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-log",children:'[2023-02-28T10:13:59 | hello2 | 0] "tick 0" processed\n[2023-02-28T10:13:59 | hello2 | 1] "tick 1" processed\n[2023-02-28T10:13:59 | hello2 | 2] "tick 2" processed\n...\n[2023-02-28T10:13:59 | hello2 | 9] "tick 9" processed\nthread \'sea-streamer-stdio-stdout\' panicked at \'failed printing to stdout: Broken pipe (os error 32)\', library/std/src/io/stdio.rs:1009:9\n\n[2023-02-28T10:14:08 | hello2 | 0] "tick 10" processed\n...\n[2023-02-28T10:14:08 | hello2 | 9] "tick 19" processed\nthread \'sea-streamer-stdio-stdout\' panicked at \'failed printing to stdout: Broken pipe (os error 32)\', library/std/src/io/stdio.rs:1009:9\n\n...\n'})}),"\n",(0,o.jsx)(s.h2,{id:"running-the-buffered-processor-example",children:"Running the buffered processor example"}),"\n",(0,o.jsx)(s.p,{children:"The clock runs 10x faster than the processor, so we expect each batch consist of more or less 10 messages."}),"\n",(0,o.jsx)(s.p,{children:"This pattern is useful when an input stream has a high frequency, but the processor has a high impedance."}),"\n",(0,o.jsxs)(r,{children:[(0,o.jsxs)(s.p,{children:[(0,o.jsx)("summary",{children:"A more throughout technical discussion:"}),"\nFor example, to insert records into a database, it's more efficient to insert in batches. But you can't naively fix the batch size at 10 or 100, because it might have buffered 9 messages and waiting for the 10th, and you can't handle a sudden burst of messages."]}),(0,o.jsx)(s.p,{children:"So, how to minimize the overall task execution time? You decouple the two busy loops and use a queue to connect them loosely: now both loops can spin at their optimal frequency, maximizing the overall throughput of the processor."})]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"alias clock='cargo run --package sea-streamer-stdio --features=executables --bin clock'\nclock -- --stream clock --interval 100ms | \\\ncargo run --bin buffered -- --input stdio:///clock --output stdio:///output\n"})}),"\n",(0,o.jsx)(s.p,{children:"Output:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-log",children:'[2023-02-27T10:43:58 | output | 0] [batch 0] { "tick": 0 } processed\n[2023-02-27T10:43:59 | output | 1] [batch 1] { "tick": 1 } processed\n[2023-02-27T10:43:59 | output | 2] [batch 1] { "tick": 2 } processed\n[2023-02-27T10:43:59 | output | 3] [batch 1] { "tick": 3 } processed\n[2023-02-27T10:43:59 | output | 4] [batch 1] { "tick": 4 } processed\n[2023-02-27T10:43:59 | output | 5] [batch 1] { "tick": 5 } processed\n[2023-02-27T10:43:59 | output | 6] [batch 1] { "tick": 6 } processed\n[2023-02-27T10:43:59 | output | 7] [batch 1] { "tick": 7 } processed\n[2023-02-27T10:43:59 | output | 8] [batch 1] { "tick": 8 } processed\n...\n'})}),"\n",(0,o.jsx)(s.h2,{id:"running-the-blocking-processor-example",children:"Running the blocking processor example"}),"\n",(0,o.jsx)(s.p,{children:'The clock runs 3x faster than the processor, but we have 4 threads, so we expect it to be able to catch up in real-time. Tasks are randomly assigned to threads, aka. a "fan out" pattern.'}),"\n",(0,o.jsx)(s.p,{children:"This pattern is useful when you have to perform blocking IO or CPU-heavy computation."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"alias clock='cargo run --package sea-streamer-stdio --features=executables --bin clock'\nclock -- --stream clock --interval 333ms | \\\ncargo run --bin blocking -- --input stdio:///clock --output stdio:///output\n"})}),"\n",(0,o.jsx)(s.p,{children:"Output:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-log",children:'[2023-03-07T06:00:52 | output | 0] [thread 0] { "tick": 0 } processed\n[2023-03-07T06:00:53 | output | 1] [thread 1] { "tick": 1 } processed\n[2023-03-07T06:00:53 | output | 2] [thread 2] { "tick": 2 } processed\n[2023-03-07T06:00:53 | output | 3] [thread 3] { "tick": 3 } processed\n[2023-03-07T06:00:54 | output | 4] [thread 0] { "tick": 4 } processed\n[2023-03-07T06:00:54 | output | 5] [thread 1] { "tick": 5 } processed\n[2023-03-07T06:00:54 | output | 6] [thread 2] { "tick": 6 } processed\n'})})]})}function u(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},6484:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>c});var t=r(2374);const o={},n=t.createContext(o);function a(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);