"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[7872],{628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"introduction/intro-to-streams","title":"Intro to Stream Processing","description":"\\"Turning the database inside out\\" is an influential article in the data engineering space, leading to the founding of Kafka. Since then, implementations like Redpanda and Redis Streams emerged, spurring a real-time data processing ecosystem.","source":"@site/versioned_docs/version-0.1.x/01-introduction/01-intro-to-streams.md","sourceDirName":"01-introduction","slug":"/introduction/intro-to-streams","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/introduction/intro-to-streams","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/versioned_docs/version-0.1.x/01-introduction/01-intro-to-streams.md","tags":[],"version":"0.1.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756133696000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Index","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/index"},"next":{"title":"Async Programming in Rust","permalink":"/preview/pr-150/SeaStreamer/docs/0.1.x/introduction/async-programming"}}');var s=n(8790),i=n(6484);const r={},o="Intro to Stream Processing",l={},c=[{value:"Vs event-based programming",id:"vs-event-based-programming",level:2},{value:"Vs analytic processing",id:"vs-analytic-processing",level:2},{value:"Why Rust?",id:"why-rust",level:2},{value:"Multi-threaded async",id:"multi-threaded-async",level:3},{value:"Predictable latency",id:"predictable-latency",level:3},{value:"Self-contained",id:"self-contained",level:3},{value:"Low resource usage",id:"low-resource-usage",level:3},{value:"Long-running safe",id:"long-running-safe",level:3},{value:"Ecosystem",id:"ecosystem",level:3}];function d(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"intro-to-stream-processing",children:"Intro to Stream Processing"})}),"\n",(0,s.jsxs)(t.p,{children:['"',(0,s.jsx)(t.a,{href:"https://www.confluent.io/blog/turning-the-database-inside-out-with-apache-samza/",children:"Turning the database inside out"}),'" is an influential article in the data engineering space, leading to the founding of ',(0,s.jsx)(t.a,{href:"https://kafka.apache.org/",children:"Kafka"}),". Since then, implementations like ",(0,s.jsx)(t.a,{href:"https://redpanda.com/",children:"Redpanda"})," and ",(0,s.jsx)(t.a,{href:"https://redis.io/docs/manual/data-types/streams/",children:"Redis Streams"})," emerged, spurring a real-time data processing ecosystem."]}),"\n",(0,s.jsx)(t.h2,{id:"vs-event-based-programming",children:"Vs event-based programming"}),"\n",(0,s.jsx)(t.p,{children:"Similar to event-based programming, stream processing is a programming paradigm that aims to handle events in near real-time or as soon as events happen. One way to classify between the two might be frequency. Streams are continuous sequence of events with a high throughput: instead of many short-lived connections, you simply keep one connection open."}),"\n",(0,s.jsx)(t.h2,{id:"vs-analytic-processing",children:"Vs analytic processing"}),"\n",(0,s.jsx)(t.p,{children:"Say we want to compute the average of a certain attribute over a specific period of time. OLAP databases allow us to efficiently compute that over a very large table with millions of rows. To achieve the same in stream processing, we can replay the stream and feed it through a stream processor, which probably deemed to be slower. Once the processor is steadily running, the output can be updated in real-time with minimal latency."}),"\n",(0,s.jsx)(t.h2,{id:"why-rust",children:"Why Rust?"}),"\n",(0,s.jsx)(t.p,{children:"We want to construct the best stream processing platform where Rust's unique characteristics truly shine:"}),"\n",(0,s.jsx)(t.h3,{id:"multi-threaded-async",children:"Multi-threaded async"}),"\n",(0,s.jsx)(t.p,{children:"Unlike other languages, Rust's async execution is multi-threaded. It allows you to scale up a process with as many threads as needed to fully utilize the CPU for maximum concurrency."}),"\n",(0,s.jsx)(t.h3,{id:"predictable-latency",children:"Predictable latency"}),"\n",(0,s.jsx)(t.p,{children:"As a language with no garbage collection, there is no random point in time where the garbage collector kicks in and causes jitter. When you have a long pipeline, these jitters tend to propagate and amplify downstream. Rust is not automatically low-latency though - you still need to spend considerable effort in optimization. But you will have a good starting point."}),"\n",(0,s.jsx)(t.h3,{id:"self-contained",children:"Self-contained"}),"\n",(0,s.jsx)(t.p,{children:"Unlike other languages, the recommended way of packaging Rust programs is to static-link everything into one executable - often only sized a few megabytes. And there is no installation or warm-up needed - it spins up immediately, which is a bonus for stream processing."}),"\n",(0,s.jsx)(t.h3,{id:"low-resource-usage",children:"Low resource usage"}),"\n",(0,s.jsx)(t.p,{children:"Like other compiled languages, Rust uses considerably less memory than a VM based language. And without the need of JIT, Rust also has less CPU overhead."}),"\n",(0,s.jsx)(t.h3,{id:"long-running-safe",children:"Long-running safe"}),"\n",(0,s.jsx)(t.p,{children:'Again, without GC, Rust programs are less susceptible to "slow memory bloat over a period of days" (technically, it\'s not a leak). There is less risk of out-of-memory crashes, so you don\'t have to "restart the process every week". Albeit, you still have to be careful about heap allocations.'}),"\n",(0,s.jsx)(t.h3,{id:"ecosystem",children:"Ecosystem"}),"\n",(0,s.jsx)(t.p,{children:"Finally, Rust has a great ecosystem of async programming libraries: networking libraries built on async IO, lock-free channels and other data structures to make async programming ergonomic and fun."}),"\n",(0,s.jsx)(t.p,{children:"Without further ado, let's get started!"})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6484:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(2374);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);