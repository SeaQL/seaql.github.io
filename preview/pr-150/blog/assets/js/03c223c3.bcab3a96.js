"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[2160],{1075:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-150/blog/2024-05-05-redis-kafka-data-sink","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-05-05-redis-kafka-data-sink.md","source":"@site/blog/2024-05-05-redis-kafka-data-sink.md","title":"Building a Redis / Kafka Data Sink","description":"This tutorial shows you how to use Rust to build a system that:","date":"2024-05-05T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-150/blog/tags/news"}],"readingTime":5.66,"hasTruncateMarker":false,"authors":[{"name":"Chris Tsang","title":"SeaQL Team","url":"https://github.com/tyt2y3","imageURL":"https://avatars.githubusercontent.com/u/1782664?v=4","key":null,"page":null}],"frontMatter":{"slug":"2024-05-05-redis-kafka-data-sink","title":"Building a Redis / Kafka Data Sink","author":"Chris Tsang","author_title":"SeaQL Team","author_url":"https://github.com/tyt2y3","author_image_url":"https://avatars.githubusercontent.com/u/1782664?v=4","image":"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"The rainbow bridge between sync and async Rust","permalink":"/preview/pr-150/blog/2024-05-20-async-rainbow-bridge"},"nextItem":{"title":"What\'s new in SeaORM 1.0-rc.x","permalink":"/preview/pr-150/blog/2024-04-08-whats-new-in-seaorm-1.0-rc.x"}}')},1366:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});var t=a(1075),n=a(8790),r=a(7630);const i={slug:"2024-05-05-redis-kafka-data-sink",title:"Building a Redis / Kafka Data Sink",author:"Chris Tsang",author_title:"SeaQL Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png",tags:["news"]},c=void 0,o={authorsImageUrls:[void 0]},l=[{value:"1. Websocket subscription",id:"1-websocket-subscription",level:2},{value:"2. Redis / Kafka Stream Producer",id:"2-redis--kafka-stream-producer",level:2},{value:"3. SQL Data Sink",id:"3-sql-data-sink",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Rustacean Sticker Pack \ud83e\udd80",id:"rustacean-sticker-pack-",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("img",{src:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png"}),"\n",(0,n.jsx)(s.p,{children:"This tutorial shows you how to use Rust to build a system that:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Subscribe to a real-time websocket data feed"}),"\n",(0,n.jsx)(s.li,{children:"Stream the data to Kafka / Redis"}),"\n",(0,n.jsx)(s.li,{children:"Save the data into a SQL database"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Here, we'll employ a micro-services architecture, and split the functionality into two apps:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Websocket Data Feed \u2502 ---\x3e   Redis / Kafka   ---\x3e \u2502 SQL Data Sink \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,n.jsx)(s.p,{children:'In stream processing, we often use the terms "source" / "sink", but a data sink is simply a stream consumer that persists the data into a store.'}),"\n",(0,n.jsxs)(s.p,{children:["On the source side, we'd use ",(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer",children:"SeaStreamer"}),". On the sink side, we'd be using ",(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-orm",children:"SeaORM"}),". Below are the supported technologies; for the rest of this article, we'll be using ",(0,n.jsx)(s.code,{children:"Redis"})," and ",(0,n.jsx)(s.code,{children:"SQLite"})," because they're easy to setup."]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.th,{children:"SeaStreamer"}),(0,n.jsx)(s.th,{children:"SeaORM"})]})}),(0,n.jsx)(s.tbody,{children:(0,n.jsxs)(s.tr,{children:[(0,n.jsx)(s.td,{children:"Kafka, Redis"}),(0,n.jsxs)(s.td,{children:["MySQL, Postgres, SQLite, SQL Server",(0,n.jsx)(s.sup,{children:(0,n.jsx)(s.a,{href:"#user-content-fn-1-870cc4",id:"user-content-fnref-1-870cc4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})]})]})})]}),"\n",(0,n.jsx)(s.p,{children:"To get started, you can quickly start a Redis instance via Docker:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-sh",children:"docker run -d --rm --name redis -p 6379:6379 redis\n"})}),"\n",(0,n.jsx)(s.h2,{id:"1-websocket-subscription",children:"1. Websocket subscription"}),"\n",(0,n.jsxs)(s.p,{children:["Let's write a websocket subscriber in Rust. Here we'd use the awesome ",(0,n.jsx)(s.a,{href:"https://crates.io/crates/async-tungstenite",children:"async-tungstenite"})," library."]}),"\n",(0,n.jsxs)(s.p,{children:["We'd subscribe to the ",(0,n.jsx)(s.code,{children:"GBP/USD"})," price feed from Kraken, API documentation can be found ",(0,n.jsx)(s.a,{href:"https://docs.kraken.com/websockets/#message-spread",children:"here"}),". NB: they're not real FX data, but should be good enough for demo."]}),"\n",(0,n.jsx)(s.p,{children:"Step 1, create a websocket connection:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'let (mut ws, _) = async_tungstenite::tokio::connect_async("wss://ws.kraken.com/").await?;\n'})}),"\n",(0,n.jsx)(s.p,{children:"Step 2, send a subscription request:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'ws.send(Message::Text(\n    r#"{ "event": "subscribe", "pair": ["GBP/USD"], "subscription": { "name": "spread" } }"#.to_owned(),\n)).await?;\n'})}),"\n",(0,n.jsx)(s.p,{children:"Step 3, stream the messages:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            if data == r#"{"event":"heartbeat"}"# {\n                continue;\n            }\n            println!("{data}");\n        }\n        Some(Err(e)) => bail!("Socket error: {e}"),\n        None => bail!("Stream ended"),\n        e => bail!("Unexpected message {e:?}"),\n    }\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"2-redis--kafka-stream-producer",children:"2. Redis / Kafka Stream Producer"}),"\n",(0,n.jsxs)(s.p,{children:["Step 1, create a ",(0,n.jsx)(s.code,{children:"SeaStreamer"})," instance connecting to Redis / Kafka:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'let streamer = SeaStreamer::connect(\n        "redis://localhost", SeaConnectOptions::default()\n    ).await?;\n'})}),"\n",(0,n.jsxs)(s.p,{children:["There are a bunch of different options for ",(0,n.jsx)(s.a,{href:"https://docs.rs/sea-streamer-redis/latest/sea_streamer_redis/struct.RedisConnectOptions.html",children:"Redis"})," & ",(0,n.jsx)(s.a,{href:"https://docs.rs/sea-streamer-kafka/0.5.0/sea_streamer_kafka/struct.KafkaConnectOptions.html",children:"Kafka"})," respectively, you can refer to SeaStreamer's ",(0,n.jsx)(s.a,{href:"https://www.sea-ql.org/SeaStreamer/",children:"documentation"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Step 2, create a producer:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'let producer: SeaProducer = streamer\n    .create_producer(\n        "GBP_USD".parse()?, // Stream Key\n        Default::default(), // Producer Options\n    )\n    .await?;\n'})}),"\n",(0,n.jsx)(s.p,{children:"There aren't any specific options for Producer."}),"\n",(0,n.jsx)(s.p,{children:"Step 3, decode the messages:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:"let spread: SpreadMessage = serde_json::from_str(&data)?;\nlet message = serde_json::to_string(&spread)?;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Here, we use the awesome ",(0,n.jsx)(s.a,{href:"https://crates.io/crates/serde",children:(0,n.jsx)(s.code,{children:"serde"})})," library to perform message parsing and conversion:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'// The raw message looks like: [80478222,["1.25475","1.25489","1714946803.030088","949.74917071","223.36195920"],"spread","GBP/USD"]\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct SpreadMessage {\n    #[allow(dead_code)]\n    #[serde(skip_serializing)]\n    channel_id: u32, // placeholder; not needed\n    spread: Spread, // nested object\n    channel_name: String,\n    pair: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Spread {\n    bid: Decimal,\n    ask: Decimal,\n    #[serde(with = "timestamp_serde")] // custom serde\n    timestamp: Timestamp,\n    bid_vol: Decimal,\n    ask_vol: Decimal,\n}\n'})}),"\n",(0,n.jsx)(s.p,{children:"Step 4, send the messages:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:"loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            let spread: SpreadMessage = serde_json::from_str(&data)?;\n            let message = serde_json::to_string(&spread)?;\n            producer.send(message)?; // <--\n        }\n    }\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Note that the ",(0,n.jsx)(s.a,{href:"https://docs.rs/sea-streamer/latest/sea_streamer/trait.Producer.html#method.send",children:(0,n.jsx)(s.code,{children:"producer.send"})})," call is not ",(0,n.jsx)(s.code,{children:"async/await"}),", and this is a crucial detail! This removes the stream processing bottleneck. Behind the scene, messages will be buffered and handled on a different thread, so that your input stream can run as close to real-time as possible."]}),"\n",(0,n.jsxs)(s.p,{children:["Here is the complete ",(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/price-feed",children:(0,n.jsx)(s.code,{children:"price-feed"})})," app which you can checkout from the SeaStreamer repository:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-log",children:'$ cd examples/price-feed\n$ cargo run\n\nConnecting ..\nConnected.\nSubscribed.\n{"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n..\n'})}),"\n",(0,n.jsx)(s.h2,{id:"3-sql-data-sink",children:"3. SQL Data Sink"}),"\n",(0,n.jsx)(s.p,{children:"Step 1, create a stream consumer:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:"let streamer = SeaStreamer::connect(streamer_uri, Default::default()).await?;\n\nlet consumer = streamer\n    .create_consumer(&[stream_key], SeaConsumerOptions::default())\n    .await?;\n"})}),"\n",(0,n.jsxs)(s.p,{children:["There are a bunch of different options for ",(0,n.jsx)(s.a,{href:"https://docs.rs/sea-streamer-redis/latest/sea_streamer_redis/struct.RedisConsumerOptions.html",children:"Redis"})," & ",(0,n.jsx)(s.a,{href:"https://docs.rs/sea-streamer-kafka/0.5.0/sea_streamer_kafka/struct.KafkaConsumerOptions.html",children:"Kafka"})," respectively, you can refer to SeaStreamer's ",(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/",children:"examples"}),". Here we use the default, which is a real-time state-less stream consumer."]}),"\n",(0,n.jsx)(s.p,{children:"Step 2, create a database:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'let mut opt = ConnectOptions::new("sqlite://my_db.sqlite?mode=rwc"));\nopt.max_connections(1).sqlx_logging(false);\nlet db = Database::connect(opt).await?;\n'})}),"\n",(0,n.jsxs)(s.p,{children:["We set ",(0,n.jsx)(s.code,{children:"max_connections"})," to ",(0,n.jsx)(s.code,{children:"1"}),", because our data sink will not do concurrent inserts anyway."]}),"\n",(0,n.jsxs)(s.p,{children:["Here is the ",(0,n.jsx)(s.code,{children:"Entity"}),":"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'#[derive(Debug, Clone, PartialEq, Eq, DeriveEntityModel, Deserialize)]\n#[sea_orm(table_name = "event")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(default)]\n    pub id: i32,\n    pub timestamp: String,\n    pub bid: String,\n    pub ask: String,\n    pub bid_vol: String,\n    pub ask_vol: String,\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["The table shall be named ",(0,n.jsx)(s.code,{children:"event"})," and we derive ",(0,n.jsx)(s.code,{children:"Deserialize"})," on the Model."]}),"\n",(0,n.jsx)(s.p,{children:"We will use the following helper method to create the database table, where the schema is derived from the Entity:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:'async fn create_tables(db: &DbConn) -> Result<(), DbErr> {\n    let builder = db.get_database_backend();\n    let schema = Schema::new(builder);\n\n    let stmt = builder.build(\n        schema.create_table_from_entity(Entity).if_not_exists(),\n    );\n    log::info!("{stmt}");\n    db.execute(stmt).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["This is especially handy for SQLite, where the app owns the database schema. For other databases, you'd probably use the ",(0,n.jsx)(s.a,{href:"https://www.sea-ql.org/SeaORM/docs/next/migration/setting-up-migration/",children:"SeaORM migration system"}),"."]}),"\n",(0,n.jsx)(s.p,{children:"Step 3, insert the data into database:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-rust",children:"loop {\n    let message = consumer.next().await?;\n    let payload = message.message();\n    let json = payload.as_str()?;\n    let item: Item = serde_json::from_str(json)?;\n    let mut spread = item.spread.into_active_model();\n    spread.id = NotSet; // let the db assign primary key\n    spread.save(&db).await?;\n}\n"})}),"\n",(0,n.jsx)(s.p,{children:"In a few lines of code, we:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"receive the message from Redis"}),"\n",(0,n.jsx)(s.li,{children:"decode the message as JSON"}),"\n",(0,n.jsx)(s.li,{children:"convert the message into a SeaORM Model"}),"\n",(0,n.jsx)(s.li,{children:"insert the Model into database"}),"\n"]}),"\n",(0,n.jsxs)(s.p,{children:["Run the ",(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/sea-orm-sink",children:(0,n.jsx)(s.code,{children:"sea-orm-sink"})})," app in another terminal:"]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-log",children:'$ cd examples/sea-orm-sink\n$ RUST_LOG=info cargo run\n\n[INFO  sea_streamer_sea_orm_sink] CREATE TABLE IF NOT EXISTS "event" ( "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "timestamp" varchar NOT NULL, "bid" varchar NOT NULL, "ask" varchar NOT NULL, "bid_vol" varchar NOT NULL, "ask_vol" varchar NOT NULL )\n[INFO  sea_streamer_sea_orm_sink] {"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n'})}),"\n",(0,n.jsx)(s.p,{children:"That's it! Now you can inspect the data with your favourite database GUI and write some SQL queries:"}),"\n",(0,n.jsx)("img",{alt:"screenshot of SQLite database",src:"/blog/img/2024-05-05-redis-kafka-data-sink-sqlite.png"}),"\n",(0,n.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,n.jsx)(s.p,{children:"In this article, we covered:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:"Micro-services architecture in stream processing"}),"\n",(0,n.jsx)(s.li,{children:"Async real-time programming in Rust"}),"\n",(0,n.jsxs)(s.li,{children:["The awesomeness of the SeaQL and Rust ecosystem",(0,n.jsx)(s.sup,{children:(0,n.jsx)(s.a,{href:"#user-content-fn-2-870cc4",id:"user-content-fnref-2-870cc4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Here are a few suggestions how you can take it from here:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsx)(s.li,{children:'Stream the data to a "big database" like MySQL or Postgres'}),"\n",(0,n.jsx)(s.li,{children:"Subscribe to more streams and sink to more tables"}),"\n",(0,n.jsxs)(s.li,{children:["Buffer the events and insert the data in batches to achieve higher throughput, further reads:","\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs",children:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs"})}),"\n",(0,n.jsx)(s.li,{children:(0,n.jsx)(s.a,{href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs",children:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"rustacean-sticker-pack-",children:"Rustacean Sticker Pack \ud83e\udd80"}),"\n",(0,n.jsx)(s.p,{children:"The Rustacean Sticker Pack is the perfect way to express your passion for Rust.\nOur stickers are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"}),"\n",(0,n.jsx)(s.p,{children:"Moreover, all proceeds contributes directly to the ongoing development of SeaQL projects."}),"\n",(0,n.jsx)(s.p,{children:"Sticker Pack Contents:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsx)(s.li,{children:"Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG"}),"\n",(0,n.jsx)(s.li,{children:"Mascot of SeaQL: Terres the Hermit Crab"}),"\n",(0,n.jsx)(s.li,{children:"Mascot of Rust: Ferris the Crab"}),"\n",(0,n.jsx)(s.li,{children:"The Rustacean word"}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:(0,n.jsx)(s.a,{href:"https://www.sea-ql.org/sticker-pack/",children:"Support SeaQL and get a Sticker Pack!"})}),"\n",(0,n.jsx)("a",{href:"https://www.sea-ql.org/sticker-pack/",children:(0,n.jsx)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})}),"\n","\n",(0,n.jsxs)(s.section,{"data-footnotes":!0,className:"footnotes",children:[(0,n.jsx)(s.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{id:"user-content-fn-1-870cc4",children:["\n",(0,n.jsxs)(s.p,{children:["via ",(0,n.jsx)(s.a,{href:"https://www.sea-ql.org/SeaORM-X/",children:"SeaORM X"})," ",(0,n.jsx)(s.a,{href:"#user-content-fnref-1-870cc4","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{id:"user-content-fn-2-870cc4",children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.a,{href:"https://www.sea-ql.org/SeaStreamer/docs/introduction/intro-to-streams/#why-rust",children:"Why Rust?"})," ",(0,n.jsx)(s.a,{href:"#user-content-fnref-2-870cc4","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},7630:(e,s,a)=>{a.d(s,{R:()=>i,x:()=>c});var t=a(2374);const n={},r=t.createContext(n);function i(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);