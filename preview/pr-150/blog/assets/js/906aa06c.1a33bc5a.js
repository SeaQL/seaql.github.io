"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[1125],{7630:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var s=n(2374);const t={},a=s.createContext(t);function l(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(a.Provider,{value:r},e.children)}},8609:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var s=n(9737),t=n(8790),a=n(7630);const l={slug:"2022-08-05-whats-new-in-seaquery-0.26.0",title:"What's new in SeaQuery 0.26.0",author:"SeaQL Team",author_title:"Ivan Krivosheev",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},i=void 0,h={authorsImageUrls:[void 0]},c=[{value:"Dependency Upgrades",id:"dependency-upgrades",level:2},{value:"VALUES lists",id:"values-lists",level:2},{value:"Introduce sea-query-binder",id:"introduce-sea-query-binder",level:2},{value:"CASE WHEN statement support",id:"case-when-statement-support",level:2},{value:"Add support for Ip(4,6)Network and MacAddress",id:"add-support-for-ip46network-and-macaddress",level:2},{value:"Introduce sea-query-attr",id:"introduce-sea-query-attr",level:2},{value:"Add ability to alter foreign keys",id:"add-ability-to-alter-foreign-keys",level:2},{value:"Select DISTINCT ON",id:"select-distinct-on",level:2},{value:"Miscellaneous Enhancements",id:"miscellaneous-enhancements",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Community",id:"community",level:2}];function d(e){const r={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.p,{children:["\ud83c\udf89 We are pleased to release SeaQuery ",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.26.0",children:(0,t.jsx)(r.code,{children:"0.26.0"})}),"! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,t.jsx)(r.h2,{id:"dependency-upgrades",children:"Dependency Upgrades"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/issues/356",children:"#356"}),"] We have upgraded a few major dependencies:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Upgrade ",(0,t.jsx)(r.a,{href:"https://github.com/launchbadge/sqlx",children:(0,t.jsx)(r.code,{children:"sqlx"})})," to 0.6"]}),"\n",(0,t.jsxs)(r.li,{children:["Upgrade ",(0,t.jsx)(r.a,{href:"https://github.com/time-rs/time",children:(0,t.jsx)(r.code,{children:"time"})})," to 0.3"]}),"\n",(0,t.jsxs)(r.li,{children:["Upgrade ",(0,t.jsx)(r.a,{href:"https://github.com/uuid-rs/uuid",children:(0,t.jsx)(r.code,{children:"uuid"})})," to 1.0"]}),"\n",(0,t.jsxs)(r.li,{children:["Upgrade ",(0,t.jsx)(r.a,{href:"https://github.com/akubera/bigdecimal-rs",children:(0,t.jsx)(r.code,{children:"bigdecimal"})})," to 0.3"]}),"\n",(0,t.jsxs)(r.li,{children:["Upgrade ",(0,t.jsx)(r.a,{href:"https://github.com/achanda/ipnetwork",children:(0,t.jsx)(r.code,{children:"ipnetwork"})})," to 0.19"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Note that you might need to upgrade the corresponding dependency on your application as well."}),"\n",(0,t.jsx)(r.h2,{id:"values-lists",children:"VALUES lists"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/issues/350",children:"#351"}),"] Add support for VALUES lists"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'// SELECT * FROM (VALUES (1, \'hello\'), (2, \'world\')) AS "x"\nlet query = SelectStatement::new()\n    .expr(Expr::asterisk())\n    .from_values(vec![(1i32, "hello"), (2, "world")], Alias::new("x"))\n    .to_owned();\n\n assert_eq!(\n     query.to_string(PostgresQueryBuilder), \n     r#"SELECT * FROM (VALUES (1, \'hello\'), (2, \'world\')) AS "x""#\n );\n'})}),"\n",(0,t.jsx)(r.h2,{id:"introduce-sea-query-binder",children:"Introduce sea-query-binder"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/issues/273",children:"#273"}),"] Native support SQLx without marcos"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use sea_query_binder::SqlxBinder;\n\n// Create SeaQuery query with prepare SQLx\nlet (sql, values) = Query::select()\n    .columns([\n        Character::Id,\n        Character::Uuid,\n        Character::Character,\n        Character::FontSize,\n        Character::Meta,\n        Character::Decimal,\n        Character::BigDecimal,\n        Character::Created,\n        Character::Inet,\n        Character::MacAddress,\n    ])\n    .from(Character::Table)\n    .order_by(Character::Id, Order::Desc)\n    .build_sqlx(PostgresQueryBuilder);\n\n// Execute query\nlet rows = sqlx::query_as_with::<_, CharacterStructChrono, _>(&sql, values)\n    .fetch_all(&mut pool)\n    .await?;\n\n// Print rows\nfor row in rows.iter() {\n    println!("{:?}", row);\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"case-when-statement-support",children:"CASE WHEN statement support"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/304",children:"#304"}),"] Add support for ",(0,t.jsx)(r.code,{children:"CASE WHEN"})," statement"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'let query = Query::select()\n    .expr_as(\n        CaseStatement::new()\n            .case(Expr::tbl(Glyph::Table, Glyph::Aspect).is_in(vec![2, 4]), Expr::val(true))\n            .finally(Expr::val(false)),\n        Alias::new("is_even")\n    )\n    .from(Glyph::Table)\n    .to_owned();\n    \nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT (CASE WHEN ("glyph"."aspect" IN (2, 4)) THEN TRUE ELSE FALSE END) AS "is_even" FROM "glyph""#\n);\n'})}),"\n",(0,t.jsx)(r.h2,{id:"add-support-for-ip46network-and-macaddress",children:"Add support for Ip(4,6)Network and MacAddress"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/309",children:"#309"}),"] Add support for Network types in PostgreSQL backend"]}),"\n",(0,t.jsx)(r.h2,{id:"introduce-sea-query-attr",children:"Introduce sea-query-attr"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/issues/296",children:"#296"}),"] Proc-macro for deriving Iden enum from struct"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'use sea_query::gen_type_def;\n\n#[gen_type_def]\npub struct Hello {\n    pub name: String\n}\n\nprintln!("{:?}", HelloTypeDef::Name);\n'})}),"\n",(0,t.jsx)(r.h2,{id:"add-ability-to-alter-foreign-keys",children:"Add ability to alter foreign keys"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/299",children:"#299"}),"] Add support for ",(0,t.jsx)(r.code,{children:"ALTER"})," foreign Keys"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'let foreign_key_char = TableForeignKey::new()\n    .name("FK_character_glyph")\n    .from_tbl(Char::Table)\n    .from_col(Char::FontId)\n    .from_col(Char::Id)\n    .to_tbl(Glyph::Table)\n    .to_col(Char::FontId)\n    .to_col(Char::Id)\n    .to_owned();\n\nlet table = Table::alter()\n    .table(Character::Table)\n    .add_foreign_key(&foreign_key_char)\n    .to_owned();\n\nassert_eq!(\n    table.to_string(PostgresQueryBuilder),\n    vec![\n        r#"ALTER TABLE "character""#,\n        r#"ADD CONSTRAINT "FK_character_glyph""#,\n        r#"FOREIGN KEY ("font_id", "id") REFERENCES "glyph" ("font_id", "id")"#,\n        r#"ON DELETE CASCADE ON UPDATE CASCADE,"#,\n    ]\n    .join(" ")\n);\n'})}),"\n",(0,t.jsx)(r.h2,{id:"select-distinct-on",children:"Select DISTINCT ON"}),"\n",(0,t.jsxs)(r.p,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/issues/250",children:"#250"}),"]"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-rust",children:'let query = Query::select()\n    .from(Char::Table)\n    .distinct_on(vec![Char::Character])\n    .column(Char::Character)\n    .column(Char::SizeW)\n    .column(Char::SizeH)\n    .to_owned();\n    \n assert_eq!(\n     query.to_string(PostgresQueryBuilder),\n     r#"SELECT DISTINCT ON ("character") "character", "size_w", "size_h" FROM "character""#\n );\n'})}),"\n",(0,t.jsx)(r.h2,{id:"miscellaneous-enhancements",children:"Miscellaneous Enhancements"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/353",children:"#353"}),"] Support ",(0,t.jsx)(r.code,{children:"LIKE ... ESCAPE ..."}),"  expression"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/306",children:"#306"}),"] Move ",(0,t.jsx)(r.code,{children:"escape"})," and ",(0,t.jsx)(r.code,{children:"unescape"})," string to backend"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/365",children:"#365"}),"] Add method to make a column nullable"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/348",children:"#348"}),"] Add ",(0,t.jsx)(r.code,{children:"is"})," & ",(0,t.jsx)(r.code,{children:"is_not"})," to Expr"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/349",children:"#349"}),"] Add ",(0,t.jsx)(r.code,{children:"CURRENT_TIMESTAMP"})," function"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/345",children:"#345"}),"] Add ",(0,t.jsx)(r.code,{children:"in_tuple"})," method to Expr"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/266",children:"#266"}),"] Insert Default"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/324",children:"#324"}),"] Make ",(0,t.jsx)(r.code,{children:"sea-query-driver"})," an optional dependency"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/334",children:"#334"}),"] Add ",(0,t.jsx)(r.code,{children:"ABS"})," function"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/332",children:"#332"}),"] Support ",(0,t.jsx)(r.code,{children:"IF NOT EXISTS"})," when create index"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/314",children:"#314"}),"] Support different ",(0,t.jsx)(r.code,{children:"blob"})," types in MySQL"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/331",children:"#331"}),"] Add ",(0,t.jsx)(r.code,{children:"VarBinary"})," column type"]}),"\n",(0,t.jsxs)(r.li,{children:["[",(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/pull/335",children:"#335"}),"] ",(0,t.jsx)(r.code,{children:"RETURNING"})," expression supporting ",(0,t.jsx)(r.code,{children:"SimpleExpr"})]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(r.p,{children:"SeaQuery plays well with the other crates in the rust ecosystem."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/postgres",children:"Postgres Example"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/rusqlite",children:"Rusqlite Example"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_any",children:"SQLx Any Example"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_postgres",children:"SQLx Postgres Example"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_mysql",children:"SQLx MySql Example"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_sqlite",children:"SQLx Sqlite Example"})}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"community",children:"Community"}),"\n",(0,t.jsx)(r.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and together build for Rust's future."})]})}function o(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},9737:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-150/blog/2022-08-05-whats-new-in-seaquery-0.26.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-08-05-whats-new-in-seaquery-0.26.0.md","source":"@site/blog/2022-08-05-whats-new-in-seaquery-0.26.0.md","title":"What\'s new in SeaQuery 0.26.0","description":"\ud83c\udf89 We are pleased to release SeaQuery 0.26.0! Here are some feature highlights \ud83c\udf1f:","date":"2022-08-05T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-150/blog/tags/news"}],"readingTime":2.535,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Ivan Krivosheev","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2022-08-05-whats-new-in-seaquery-0.26.0","title":"What\'s new in SeaQuery 0.26.0","author":"SeaQL Team","author_title":"Ivan Krivosheev","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Celebrating 3,000+ GitHub Stars \ud83c\udf89","permalink":"/preview/pr-150/blog/2022-08-12-3k-github-stars"},"nextItem":{"title":"Engineering at SeaQL.org","permalink":"/preview/pr-150/blog/2022-07-30-engineering"}}')}}]);