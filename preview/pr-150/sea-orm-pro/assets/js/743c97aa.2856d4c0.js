"use strict";(self.webpackChunksea_orm_pro=self.webpackChunksea_orm_pro||[]).push([[674],{1109:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-06-composite-tables-ff6be35e165115ef1d089aa52814ef1d.png"},1414:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-01-login-9ee376c3b4e89721603c668969345f58.png"},1862:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-02-dashboard-8878cbbac6b28996a44ad5fb60f1d4f1.png"},1984:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-05-raw-tables-notes-details-feb0821172dbe62126504883e80fac00.png"},2301:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"install-and-config/getting-started-loco","title":"Getting Started with Loco","description":"We use the locostarter example as the base, it contains basic REST API to handle basic user management such as user registration, login and user info of current session. Final source code is here.","source":"@site/docs/02-install-and-config/01-getting-started-loco.md","sourceDirName":"02-install-and-config","slug":"/install-and-config/getting-started-loco","permalink":"/preview/pr-150/sea-orm-pro/docs/install-and-config/getting-started-loco","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/sea-orm-pro/docs/02-install-and-config/01-getting-started-loco.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756133696000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SeaORM Pro Plus","permalink":"/preview/pr-150/sea-orm-pro/docs/introduction/sea-orm-pro-plus"},"next":{"title":"Getting Started with Axum","permalink":"/preview/pr-150/sea-orm-pro/docs/install-and-config/getting-started-axum"}}');var o=t(8790),a=t(6059);const s={},i="Getting Started with Loco",l={},d=[{value:"1. Setup Admin Endpoint",id:"1-setup-admin-endpoint",level:2},{value:"1.1 Download frontend assets",id:"11-download-frontend-assets",level:3},{value:"1.2 Serve frontend via <code>static</code> middleware",id:"12-serve-frontend-via-static-middleware",level:3},{value:"1.3 Setup admin API endpoint",id:"13-setup-admin-api-endpoint",level:3},{value:"2. Setup GraphQL Endpoint",id:"2-setup-graphql-endpoint",level:2},{value:"2.1 Define GraphQL schema",id:"21-define-graphql-schema",level:3},{value:"2.2 Setup GraphQL playground and query root",id:"22-setup-graphql-playground-and-query-root",level:3},{value:"3. Launch!",id:"3-launch",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"getting-started-with-loco",children:"Getting Started with Loco"})}),"\n",(0,o.jsxs)(n.p,{children:["We use the ",(0,o.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/loco_starter",children:(0,o.jsx)(n.code,{children:"loco_starter"})})," example as the base, it contains basic REST API to handle basic user management such as user registration, login and user info of current session. Final source code is ",(0,o.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm-pro/tree/main/examples/loco_example",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"1-setup-admin-endpoint",children:"1. Setup Admin Endpoint"}),"\n",(0,o.jsx)(n.p,{children:"We will extends the SeaORM entities in the example to define a GraphQL schema, handle GraphQL request and serve SeaORM Pro admin panel."}),"\n",(0,o.jsx)(n.h3,{id:"11-download-frontend-assets",children:"1.1 Download frontend assets"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'# Go to the root of `loco_starter` example\ncd sea-orm/examples/loco_starter\n\n# Create a directory for the static assets\nmkdir assets\n\n# Use the `download_frontend.sh` to download SeaORM Pro admin panel to `assets/admin` directory\ncurl "https://raw.githubusercontent.com/SeaQL/sea-orm-pro/refs/heads/main/build_tools/download_frontend.sh" -sSf | sh\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"12-serve-frontend-via-static-middleware",children:["1.2 Serve frontend via ",(0,o.jsx)(n.code,{children:"static"})," middleware"]}),"\n",(0,o.jsxs)(n.p,{children:["Open Loco.rs config file, add ",(0,o.jsx)(n.code,{children:"static"})," middlewares. The admin panel frontend is located in ",(0,o.jsx)(n.code,{children:"/assets/admin"})," and we want to serve it under ",(0,o.jsx)(n.code,{children:"http://localhost:3000/admin"}),", so we set the path as ",(0,o.jsx)(n.code,{children:"assets"}),". Also, the admin panel frontend is a single page application, so we set a fallback route to the index file, ",(0,o.jsx)(n.code,{children:"./assets/admin/index.html"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/config/development.yaml",children:"server:\n  middlewares:\n+   static:\n+     enable: true\n+     must_exist: true\n+     precompressed: true\n+     folder:\n+       uri: /\n+       path: assets\n+     fallback: ./assets/admin/index.html\n"})}),"\n",(0,o.jsx)(n.h3,{id:"13-setup-admin-api-endpoint",children:"1.3 Setup admin API endpoint"}),"\n",(0,o.jsxs)(n.p,{children:["The admin panel frontend is customizable and it read the configuration from the ",(0,o.jsx)(n.code,{children:"api/admin/config"})," endpoint."]}),"\n",(0,o.jsx)(n.p,{children:"Add the dependencies for parsing SeaORM Pro config."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/Cargo.toml",children:'[dependencies]\n+ sea-orm-pro = { version = "0.1" }\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:"title=loco_starter/src/controllers/admin.rs",children:'use loco_rs::prelude::*;\nuse sea_orm_pro::ConfigParser;\n\npub async fn config(State(_ctx): State<AppContext>) -> Result<Response> {\n    let config = ConfigParser::new()\n        .load_config("pro_admin")\n        .expect("Invalid TOML Config");\n    format::json(config)\n}\n\npub fn routes() -> Routes {\n    Routes::new().prefix("admin").add("/config", get(config))\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use the admin controller and register the ",(0,o.jsx)(n.code,{children:"/api/admin"})," route."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/controllers/mod.rs",children:"+ pub mod admin;\npub mod auth;\npub mod files;\npub mod notes;\npub mod user;\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/app.rs",children:'pub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(_ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .prefix("/api")\n            .add_route(controllers::notes::routes())\n            .add_route(controllers::auth::routes())\n            .add_route(controllers::user::routes())\n            .add_route(controllers::files::routes())\n+           .add_route(controllers::admin::routes())\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"2-setup-graphql-endpoint",children:"2. Setup GraphQL Endpoint"}),"\n",(0,o.jsx)(n.h3,{id:"21-define-graphql-schema",children:"2.1 Define GraphQL schema"}),"\n",(0,o.jsx)(n.p,{children:"Add the dependencies for defining GraphQL schema."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/Cargo.toml",children:'[dependencies]\nsea-orm-pro = { version = "0.1" }\n+ seaography = { version = "1.1", features = ["with-decimal", "with-chrono", "with-uuid", "field-snake-case"] }\n'})}),"\n",(0,o.jsxs)(n.p,{children:["We need to define an ",(0,o.jsx)(n.code,{children:"RelatedEntity"})," enum for each of the SeaORM entity to help ",(0,o.jsx)(n.code,{children:"seaography"})," figure out the parent-child relation between entities."]}),"\n",(0,o.jsxs)(n.p,{children:["These can either be added by hand or by re-generating entities with ",(0,o.jsx)(n.code,{children:"sea-orm-cli generate entity"})," using the ",(0,o.jsx)(n.code,{children:"--seaography"})," flag."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/models/_entities/files.rs",children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]\n#[sea_orm(table_name = "files")]\npub struct Model {\n    pub created_at: DateTime,\n    pub updated_at: DateTime,\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub notes_id: i32,\n    pub file_path: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::notes::Entity",\n        from = "Column::NotesId",\n        to = "super::notes::Column::Id"\n    )]\n    Notes,\n}\n\nimpl Related<super::notes::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Notes.def()\n    }\n}\n\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {\n+     #[sea_orm(entity = "super::notes::Entity")]\n+     Notes,\n+ }\n'})}),"\n",(0,o.jsxs)(n.p,{children:["We leave ",(0,o.jsx)(n.code,{children:"RelatedEntity"})," enum empty for entity without any parent-child relation."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/models/_entities/notes.rs",children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]\n#[sea_orm(table_name = "notes")]\npub struct Model {\n    pub created_at: DateTime,\n    pub updated_at: DateTime,\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub title: Option<String>,\n    pub content: Option<String>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {}\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/models/_entities/users.rs",children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]\n#[sea_orm(table_name = "users")]\npub struct Model {\n    pub created_at: DateTime,\n    pub updated_at: DateTime,\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(unique)]\n    pub pid: Uuid,\n    #[sea_orm(unique)]\n    pub email: String,\n    pub password: String,\n    #[sea_orm(unique)]\n    pub api_key: String,\n    pub name: String,\n    pub reset_token: Option<String>,\n    pub reset_sent_at: Option<DateTime>,\n    pub email_verification_token: Option<String>,\n    pub email_verification_sent_at: Option<DateTime>,\n    pub email_verified_at: Option<DateTime>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"seaography::register_entity_modules!"})," macros to define ",(0,o.jsx)(n.code,{children:"register_entity_modules"})," boilerplate function."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/models/_entities/mod.rs",children:"pub mod prelude;\n\npub mod files;\npub mod notes;\npub mod users;\n\n+ seaography::register_entity_modules!([\n+     files,\n+     notes,\n+     users,\n+ ]);\n"})}),"\n",(0,o.jsx)(n.p,{children:"Defining the GraphQL schema."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:"title=loco_starter/src/graphql/query_root.rs",children:"use async_graphql::dynamic::*;\nuse sea_orm::DatabaseConnection;\nuse seaography::{async_graphql, lazy_static, Builder, BuilderContext};\n\nlazy_static::lazy_static! {\n    static ref CONTEXT: BuilderContext = BuilderContext::default();\n}\n\npub fn schema(\n    database: DatabaseConnection,\n    depth: Option<usize>,\n    complexity: Option<usize>,\n) -> Result<Schema, SchemaError> {\n    // Construct GraphQL schema\n    let builder = Builder::new(&CONTEXT, database.clone());\n    let builder = crate::models::_entities::register_entity_modules(builder);\n    builder\n        // Maximum depth of the constructed query\n        .set_depth_limit(depth)\n        // Maximum complexity of the constructed query\n        .set_complexity_limit(complexity)\n        .schema_builder()\n        // GraphQL schema with database connection\n        .data(database)\n        .finish()\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use the GraphQL schema module."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:"title=loco_starter/src/graphql/mod.rs",children:"pub mod query_root;\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/lib.rs",children:"pub mod app;\npub mod controllers;\npub mod mailers;\npub mod models;\npub mod tasks;\npub mod views;\npub mod workers;\n+ pub mod graphql;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"22-setup-graphql-playground-and-query-root",children:"2.2 Setup GraphQL playground and query root"}),"\n",(0,o.jsx)(n.p,{children:"Add dependencies for serving GraphQL playground and handling GraphQL request."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/Cargo.toml",children:'[dependencies]\nsea-orm-pro = { version = "0.1" }\n+ async-graphql-axum = { version = "7.0" }\n+ tower-service = { version = "0.3" }\nseaography = { version = "1.1", features = ["with-decimal", "with-chrono", "with-uuid", "field-snake-case"] }\n'})}),"\n",(0,o.jsx)(n.p,{children:"The GraphQL controller."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:"title=loco_starter/src/controllers/graphql.rs",children:'use async_graphql::http::{playground_source, GraphQLPlaygroundConfig};\nuse axum::{body::Body, extract::Request};\nuse loco_rs::prelude::*;\nuse seaography::async_graphql;\nuse tower_service::Service;\n\nuse crate::graphql::query_root;\n\nasync fn graphql_playground() -> Result<Response> {\n    // Setup GraphQL playground web and specify the endpoint for GraphQL resolver\n    let config = GraphQLPlaygroundConfig::new("/api/graphql").with_header("Authorization", "");\n\n    let res = playground_source(config).replace(\n        r#""Authorization":"""#,\n        r#""Authorization":`Bearer ${localStorage.getItem(\'auth_token\')}`"#,\n    );\n\n    Ok(Response::new(res.into()))\n}\n\nasync fn graphql_handler(\n    _auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    // Maximum depth of the constructed query\n    const DEPTH: Option<usize> = None;\n    // Maximum complexity of the constructed query\n    const COMPLEXITY: Option<usize> = None;\n    // GraphQL schema\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        // GraphQL route prefix\n        .prefix("graphql")\n        // Serving the GraphQL playground web\n        .add("/", get(graphql_playground))\n        // Handling GraphQL request\n        .add("/", post(graphql_handler))\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use the GraphQL controller and register the ",(0,o.jsx)(n.code,{children:"/api/graphql"})," route."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/controllers/mod.rs",children:"pub mod admin;\npub mod auth;\npub mod files;\n+ pub mod graphql;\npub mod notes;\npub mod user;\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",metastring:"title=loco_starter/src/app.rs",children:'pub struct App;\n\n#[async_trait]\nimpl Hooks for App {\n    fn routes(_ctx: &AppContext) -> AppRoutes {\n        AppRoutes::with_default_routes()\n            .prefix("/api")\n            .add_route(controllers::notes::routes())\n            .add_route(controllers::auth::routes())\n            .add_route(controllers::user::routes())\n            .add_route(controllers::files::routes())\n            .add_route(controllers::admin::routes())\n+           .add_route(controllers::graphql::routes())\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"3-launch",children:"3. Launch!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'$ cargo run start\n\n   Compiling loco_starter v0.1.0 (sea-orm/examples/loco_starter)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 9.75s\n     Running `target/debug/loco_starter-cli start`\n2025-01-03T08:48:32.340545Z  INFO app: loco_rs::config: loading environment from selected_path="config/development.yaml" environment=development\n2025-01-03T08:48:32.434077Z  INFO app: loco_rs::db: auto migrating environment=development\n2025-01-03T08:48:32.437428Z  INFO app: sea_orm_migration::migrator: Applying all pending migrations environment=development\n2025-01-03T08:48:32.443216Z  INFO app: sea_orm_migration::migrator: No pending migrations environment=development\n2025-01-03T08:48:32.470297Z  INFO app: loco_rs::controller::app_routes: [GET] /api/_ping environment=development\n2025-01-03T08:48:32.470403Z  INFO app: loco_rs::controller::app_routes: [GET] /api/_health environment=development\n2025-01-03T08:48:32.470470Z  INFO app: loco_rs::controller::app_routes: [GET] /api/notes environment=development\n2025-01-03T08:48:32.470520Z  INFO app: loco_rs::controller::app_routes: [POST] /api/notes environment=development\n2025-01-03T08:48:32.470586Z  INFO app: loco_rs::controller::app_routes: [GET] /api/notes/:id environment=development\n2025-01-03T08:48:32.470644Z  INFO app: loco_rs::controller::app_routes: [DELETE] /api/notes/:id environment=development\n2025-01-03T08:48:32.470691Z  INFO app: loco_rs::controller::app_routes: [POST] /api/notes/:id environment=development\n2025-01-03T08:48:32.470734Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/register environment=development\n2025-01-03T08:48:32.470778Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/verify environment=development\n2025-01-03T08:48:32.470824Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/login environment=development\n2025-01-03T08:48:32.470880Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/forgot environment=development\n2025-01-03T08:48:32.470946Z  INFO app: loco_rs::controller::app_routes: [POST] /api/auth/reset environment=development\n2025-01-03T08:48:32.470996Z  INFO app: loco_rs::controller::app_routes: [GET] /api/user/current environment=development\n2025-01-03T08:48:32.471041Z  INFO app: loco_rs::controller::app_routes: [POST] /api/files/upload/:notes_id environment=development\n2025-01-03T08:48:32.471090Z  INFO app: loco_rs::controller::app_routes: [GET] /api/files/list/:notes_id environment=development\n2025-01-03T08:48:32.471144Z  INFO app: loco_rs::controller::app_routes: [GET] /api/files/view/:files_id environment=development\n2025-01-03T08:48:32.471195Z  INFO app: loco_rs::controller::app_routes: [GET] /api/admin/config environment=development\n2025-01-03T08:48:32.471239Z  INFO app: loco_rs::controller::app_routes: [GET] /api/graphql environment=development\n2025-01-03T08:48:32.471319Z  INFO app: loco_rs::controller::app_routes: [POST] /api/graphql environment=development\n2025-01-03T08:48:32.472125Z  INFO app: loco_rs::controller::app_routes: [Middleware] Adding static environment=development\n2025-01-03T08:48:32.472208Z  INFO app: loco_rs::controller::app_routes: [Middleware] Enable precompressed static assets environment=development\n\n                      \u2584     \u2580\n                                 \u2580  \u2584\n                  \u2584       \u2580     \u2584  \u2584 \u2584\u2580\n                                    \u2584 \u2580\u2584\u2584\n                        \u2584     \u2580    \u2580  \u2580\u2584\u2580\u2588\u2584\n                                          \u2580\u2588\u2584\n\u2584\u2584\u2584\u2584\u2584\u2584\u2584  \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584   \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584 \u2580\u2580\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2580\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2580\u2580\u2580 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2584\u2588\u2584\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2584\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2584\u2584\u2584 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\n \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588  \u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2580\n   \u2580\u2580\u2580\u2588\u2588\u2584 \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580  \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580  \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580 \u2588\u2588\u2580\n       \u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\ncompilation: debug\n      modes: server\n\nlistening on localhost:3000\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Visit ",(0,o.jsx)(n.a,{href:"http://localhost:3000/admin",children:"http://localhost:3000/admin"})," and login with your registered user."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Username: demo@sea-ql.org\nPassword: demo@sea-ql.org\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(1414).A+""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(1862).A+""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(5631).A+""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(7906).A+""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(1984).A+""})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:t(1109).A+""})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},5631:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-03-raw-tables-aed329da34d92aa4a2da517bb35e2b05.png"},6059:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(2374);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},7906:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/getting-started-loco-04-raw-tables-notes-ae9aaae813cb7e5c547647fc5b747c9a.png"}}]);