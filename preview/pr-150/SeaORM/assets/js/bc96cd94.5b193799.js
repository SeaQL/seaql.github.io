"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[17165],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var l=i(96540);const t={},a=l.createContext(t);function r(e){const n=l.useContext(a);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),l.createElement(a.Provider,{value:n},e.children)}},35791:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"relation/chained-relations","title":"Chained Relations","description":"The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:","source":"@site/versioned_docs/version-1.1.x/06-relation/04-chained-relations.md","sourceDirName":"06-relation","slug":"/relation/chained-relations","permalink":"/preview/pr-150/SeaORM/docs/relation/chained-relations","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.1.x/06-relation/04-chained-relations.md","tags":[],"version":"1.1.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756074242000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Many to Many","permalink":"/preview/pr-150/SeaORM/docs/relation/many-to-many"},"next":{"title":"Self Referencing","permalink":"/preview/pr-150/SeaORM/docs/relation/self-referencing"}}');var t=i(74848),a=i(28453);const r={},s="Chained Relations",d={},o=[{value:"Defining the Link",id:"defining-the-link",level:2},{value:"Lazy Loading",id:"lazy-loading",level:2},{value:"Eager Loading",id:"eager-loading",level:2},{value:"Self Referencing",id:"self-referencing",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"chained-relations",children:"Chained Relations"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Related"})," trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.Linked.html",children:(0,t.jsx)(n.code,{children:"Linked"})})," is composed of a chain of relations, and is useful when:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["there exist multiple join paths between a pair of entities, making it impossible to impl ",(0,t.jsx)(n.code,{children:"Related"})]}),"\n",(0,t.jsx)(n.li,{children:"joining across multiple entities in a relational query"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Implementing ",(0,t.jsx)(n.code,{children:"Linked"})," trait is completely optional, as there are other ways of doing relational queries in SeaORM, which will be explained in later chapters.\nWith ",(0,t.jsx)(n.code,{children:"Linked"})," implemented, several ",(0,t.jsx)(n.code,{children:"find_*_linked"})," helper methods become available, and relationships can be defined in a single place."]}),"\n",(0,t.jsx)(n.h2,{id:"defining-the-link",children:"Defining the Link"}),"\n",(0,t.jsxs)(n.p,{children:["Take ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/1.1.x/src/tests_cfg/entity_linked.rs",children:"this"})," as an example, where we join cake and filling via an intermediate ",(0,t.jsx)(n.code,{children:"cake_filling"})," table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",metastring:'title="entity/links.rs"',children:"pub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Relation::Filling.def(),\n        ]\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, the ",(0,t.jsx)(n.code,{children:"RelationDef"})," can be defined on the fly, where the following is equivalent to the above:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"pub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Entity::belongs_to(filling::Entity)\n                .from(cake_filling::Column::FillingId)\n                .to(filling::Column::Id)\n                .into(),\n        ]\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"lazy-loading",children:"Lazy Loading"}),"\n",(0,t.jsxs)(n.p,{children:["Find fillings that can be filled into a cake with the ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/trait.ModelTrait.html#method.find_linked",children:(0,t.jsx)(n.code,{children:"find_linked"})})," method."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'let cake_model = cake::Model {\n    id: 12,\n    name: "".to_owned(),\n};\n\nassert_eq!(\n    cake_model\n        .find_linked(cake::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `filling`.`id`, `filling`.`name`, `filling`.`vendor_id`",\n        "FROM `filling`",\n        "INNER JOIN `cake_filling` AS `r0` ON `r0`.`filling_id` = `filling`.`id`",\n        "INNER JOIN `cake` AS `r1` ON `r1`.`id` = `r0`.`cake_id`",\n        "WHERE `r1`.`id` = 12",\n    ]\n    .join(" ")\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"eager-loading",children:"Eager Loading"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/struct.Select.html#method.find_also_linked",children:(0,t.jsx)(n.code,{children:"find_also_linked"})})," is a dual of ",(0,t.jsx)(n.code,{children:"find_also_related"}),"; ",(0,t.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/struct.Select.html#method.find_with_linked",children:(0,t.jsx)(n.code,{children:"find_with_linked"})})," is a dual of ",(0,t.jsx)(n.code,{children:"find_with_related"}),"; :"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .find_also_linked(links::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        r#"SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`,"#,\n        r#"`r1`.`id` AS `B_id`, `r1`.`name` AS `B_name`, `r1`.`vendor_id` AS `B_vendor_id`"#,\n        r#"FROM `cake`"#,\n        r#"LEFT JOIN `cake_filling` AS `r0` ON `cake`.`id` = `r0`.`cake_id`"#,\n        r#"LEFT JOIN `filling` AS `r1` ON `r0`.`filling_id` = `r1`.`id`"#,\n    ]\n    .join(" ")\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"self-referencing",children:"Self Referencing"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Link"})," trait can also define self referencing relations."]}),"\n",(0,t.jsx)(n.p,{children:"The following example defines an Entity that references itself."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "self_join")]\npub struct Model {\n    #[sea_orm(primary_key, auto_increment = false)]\n    pub uuid: Uuid,\n    pub uuid_ref: Option<Uuid>,\n    pub time: Option<Time>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(belongs_to = "Entity", from = "Column::UuidRef", to = "Column::Uuid")]\n    SelfReferencing,\n}\n\npub struct SelfReferencingLink;\n\nimpl Linked for SelfReferencingLink {\n    type FromEntity = Entity;\n\n    type ToEntity = Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![Relation::SelfReferencing.def()]\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);