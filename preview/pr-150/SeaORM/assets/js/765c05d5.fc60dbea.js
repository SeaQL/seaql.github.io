"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[38392],{28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>d});var n=a(96540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},65987:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"basic-crud/save","title":"Save","description":"This is a helper method to save (insert / update) ActiveModel into the database.","source":"@site/docs/05-basic-crud/06-save.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/save","permalink":"/preview/pr-150/SeaORM/docs/next/basic-crud/save","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-basic-crud/06-save.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756136705000,"sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Update","permalink":"/preview/pr-150/SeaORM/docs/next/basic-crud/update"},"next":{"title":"Delete","permalink":"/preview/pr-150/SeaORM/docs/next/basic-crud/delete"}}');var s=a(74848),i=a(28453);const r={},d="Save",o={},c=[{value:"Save Behaviour",id:"save-behaviour",level:2},{value:"Usage",id:"usage",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"save",children:"Save"})}),"\n",(0,s.jsxs)(t.p,{children:["This is a helper method to save (insert / update) ",(0,s.jsx)(t.code,{children:"ActiveModel"})," into the database."]}),"\n",(0,s.jsx)(t.h2,{id:"save-behaviour",children:"Save Behaviour"}),"\n",(0,s.jsxs)(t.p,{children:["When saving an ",(0,s.jsx)(t.code,{children:"ActiveModel"}),", it will perform either insert or update depending on the primary key attribute:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Insert if primary key is ",(0,s.jsx)(t.code,{children:"NotSet"})]}),"\n",(0,s.jsxs)(t.li,{children:["Update if primary key is ",(0,s.jsx)(t.code,{children:"Set"})," or ",(0,s.jsx)(t.code,{children:"Unchanged"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["Calling ",(0,s.jsx)(t.code,{children:"save"})," to insert or update an ",(0,s.jsx)(t.code,{children:"ActiveModel"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'use sea_orm::ActiveValue::NotSet;\n\nlet banana = fruit::ActiveModel {\n    id: NotSet, // primary key is NotSet\n    name: Set("Banana".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\n// Insert, because primary key `id` is `NotSet`\nlet banana: fruit::ActiveModel = banana.save(db).await?;\n\nbanana.name = Set("Banana Mongo".to_owned());\n\n// Update, because primary key `id` is `Unchanged`\nlet banana: fruit::ActiveModel = banana.save(db).await?;\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);