"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[33473],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},67624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"relation/one-to-one","title":"One to One","description":"Our stickers are made with a premium water-resistant vinyl with a unique matte finish.","source":"@site/docs/06-relation/01-one-to-one.md","sourceDirName":"06-relation","slug":"/relation/one-to-one","permalink":"/preview/pr-150/SeaORM/docs/next/relation/one-to-one","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/06-relation/01-one-to-one.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755594254000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Raw SQL","permalink":"/preview/pr-150/SeaORM/docs/next/basic-crud/raw-sql"},"next":{"title":"One to Many","permalink":"/preview/pr-150/SeaORM/docs/next/relation/one-to-many"}}');var o=t(74848),r=t(28453);const a={},s="One to One",l={},d=[{value:"Defining the Relation",id:"defining-the-relation",level:2},{value:"Defining the Inverse Relation",id:"defining-the-inverse-relation",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"one-to-one",children:"One to One"})}),"\n",(0,o.jsx)(n.admonition,{title:"Rustacean Sticker Pack \ud83e\udd80",type:"tip",children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://www.sea-ql.org/sticker-pack/",children:"Our stickers"})," are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"]})}),"\n",(0,o.jsxs)(n.p,{children:["A one-to-one relation is the most basic type of database relation. Let say a ",(0,o.jsx)(n.code,{children:"Cake"})," entity has at most one ",(0,o.jsx)(n.code,{children:"Fruit"})," topping."]}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-relation",children:"Defining the Relation"}),"\n",(0,o.jsxs)(n.p,{children:["On the ",(0,o.jsx)(n.code,{children:"Cake"})," entity, to define the relation:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add a new variant ",(0,o.jsx)(n.code,{children:"Fruit"})," to the ",(0,o.jsx)(n.code,{children:"Relation"})," enum."]}),"\n",(0,o.jsxs)(n.li,{children:["Define it with ",(0,o.jsx)(n.code,{children:"has_one"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Implement the ",(0,o.jsx)(n.code,{children:"Related<Entity>"})," trait."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="entity/cake.rs"',children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_one = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"It's expanded to:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'{3,9,16} title="entity/cake.rs"',children:"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Fruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_one(super::fruit::Entity).into(),\n        }\n    }\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Alternatively, the definition can be shortened by the ",(0,o.jsx)(n.code,{children:"DeriveRelation"})," macro,\nwhere the following eliminates the need for the ",(0,o.jsx)(n.code,{children:"RelationTrait"})," implementation above:"]}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-inverse-relation",children:"Defining the Inverse Relation"}),"\n",(0,o.jsxs)(n.p,{children:["On the ",(0,o.jsx)(n.code,{children:"Fruit"})," entity, its ",(0,o.jsx)(n.code,{children:"cake_id"})," attribute is referencing the primary key of ",(0,o.jsx)(n.code,{children:"Cake"})," entity."]}),"\n",(0,o.jsx)(n.p,{children:"To define the inverse relation:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add a new enum variant ",(0,o.jsx)(n.code,{children:"Relation::Cake"})," to the ",(0,o.jsx)(n.code,{children:"Fruit"})," entity."]}),"\n",(0,o.jsxs)(n.li,{children:["Write the definition of it with the ",(0,o.jsx)(n.code,{children:"Entity::belongs_to()"})," method, we always define the inverse relation using this method."]}),"\n",(0,o.jsxs)(n.li,{children:["Implement the ",(0,o.jsx)(n.code,{children:"Related<cake::Entity>"})," trait."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="entity/fruit.rs"',children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::cake::Entity",\n        from = "Column::CakeId",\n        to = "super::cake::Column::Id"\n    )]\n    Cake,\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"It's expanded to:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Cake,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Cake => Entity::belongs_to(super::cake::Entity)\n                .from(Column::CakeId)\n                .to(super::cake::Column::Id)\n                .into(),\n        }\n    }\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);