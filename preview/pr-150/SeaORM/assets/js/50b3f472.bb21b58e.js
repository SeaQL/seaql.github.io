"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[44940],{3624:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced-query/custom-select","title":"Custom Select","description":"By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.","source":"@site/versioned_docs/version-0.11.x/08-advanced-query/01-custom-select.md","sourceDirName":"08-advanced-query","slug":"/advanced-query/custom-select","permalink":"/preview/pr-150/SeaORM/docs/0.11.x/advanced-query/custom-select","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.11.x/08-advanced-query/01-custom-select.md","tags":[],"version":"0.11.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755440363000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using SQLite","permalink":"/preview/pr-150/SeaORM/docs/0.11.x/write-test/sqlite"},"next":{"title":"Conditional Expressions","permalink":"/preview/pr-150/SeaORM/docs/0.11.x/advanced-query/conditional-expression"}}');var l=t(74848),c=t(28453);const r={},a="Custom Select",i={},o=[{value:"Select Partial Attributes",id:"select-partial-attributes",level:2},{value:"Select Custom Expressions",id:"select-custom-expressions",level:2},{value:"Handling Select Results",id:"handling-select-results",level:2},{value:"Custom Struct",id:"custom-struct",level:3},{value:"Unstructured Tuple",id:"unstructured-tuple",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"custom-select",children:"Custom Select"})}),"\n",(0,l.jsxs)(n.p,{children:["By default, SeaORM will select all columns defined in the ",(0,l.jsx)(n.code,{children:"Column"})," enum. You can override the defaults if you wish to select certain columns only."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'// Selecting all columns\nassert_eq!(\n    cake::Entity::find()\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"select-partial-attributes",children:"Select Partial Attributes"}),"\n",(0,l.jsxs)(n.p,{children:["Clear the default selection by calling the ",(0,l.jsx)(n.code,{children:"select_only"})," method. Then, you can select some of the attributes or custom expressions afterwards."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'// Selecting the name column only\nassert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column(cake::Column::Name)\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.p,{children:"If you want to select multiple attributes at once, you can supply an array."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .columns([cake::Column::Id, cake::Column::Name])\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.p,{children:"Advanced example: conditionally select all columns except a specific column."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .columns(cake::Column::iter().filter(|col| match col {\n            cake::Column::Id => false,\n            _ => true,\n        }))\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"select-custom-expressions",children:"Select Custom Expressions"}),"\n",(0,l.jsxs)(n.p,{children:["Select any custom expression with ",(0,l.jsx)(n.code,{children:"column_as"})," method, it takes any ",(0,l.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/expr/enum.SimpleExpr.html",children:(0,l.jsx)(n.code,{children:"sea_query::SimpleExpr"})})," and an alias. Use ",(0,l.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/expr/struct.Expr.html",children:(0,l.jsx)(n.code,{children:"sea_query::Expr"})})," helper to build ",(0,l.jsx)(n.code,{children:"SimpleExpr"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'use sea_query::{Alias, Expr};\n\nassert_eq!(\n    cake::Entity::find()\n        .column_as(Expr::col(cake::Column::Id).max().sub(Expr::col(cake::Column::Id)), "id_diff")\n        .column_as(Expr::cust("CURRENT_TIMESTAMP"), "current_time")\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name", MAX("id") - "id" AS "id_diff", CURRENT_TIMESTAMP AS "current_time" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"handling-select-results",children:"Handling Select Results"}),"\n",(0,l.jsx)(n.h3,{id:"custom-struct",children:"Custom Struct"}),"\n",(0,l.jsxs)(n.p,{children:["You can use a custom ",(0,l.jsx)(n.code,{children:"struct"})," derived from the ",(0,l.jsx)(n.code,{children:"FromQueryResult"})," trait to handle the result of a complex query. It is especially useful when dealing with custom columns or multiple joins which cannot directly be converted into models. It may be used to receive the result of any query, even raw SQL."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{FromQueryResult, JoinType, RelationTrait};\nuse sea_query::Expr;\n\n#[derive(FromQueryResult)]\nstruct CakeAndFillingCount {\n    id: i32,\n    name: String,\n    count: i32,\n}\n\nlet cake_counts: Vec<CakeAndFillingCount> = cake::Entity::find()\n    .column_as(filling::Column::Id.count(), "count")\n    .join_rev(\n        // construct `RelationDef` on the fly\n        JoinType::InnerJoin,\n        cake_filling::Entity::belongs_to(cake::Entity)\n            .from(cake_filling::Column::CakeId)\n            .to(cake::Column::Id)\n            .into()\n    )\n    // reuse a `Relation` from existing Entity\n    .join(JoinType::InnerJoin, cake_filling::Relation::Filling.def())\n    .group_by(cake::Column::Id)\n    .into_model::<CakeAndFillingCount>()\n    .all(db)\n    .await?;\n'})}),"\n",(0,l.jsx)(n.h3,{id:"unstructured-tuple",children:"Unstructured Tuple"}),"\n",(0,l.jsxs)(n.p,{children:["You can select a tuple (or single value) with the ",(0,l.jsx)(n.code,{children:"into_tuple"})," method."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:"use sea_orm::{entity::*, query::*, tests_cfg::cake, DeriveColumn, EnumIter};\n\nlet res: Vec<(String, i64)> = cake::Entity::find()\n    .select_only()\n    .column(cake::Column::Name)\n    .column(cake::Column::Id.count())\n    .group_by(cake::Column::Name)\n    .into_tuple()\n    .all(&db)\n    .await?;\n"})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const l={},c=s.createContext(l);function r(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);