"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[56768],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}},68589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"basic-crud/insert","title":"Insert","description":"Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.","source":"@site/versioned_docs/version-0.6.x/06-basic-crud/02-insert.md","sourceDirName":"06-basic-crud","slug":"/basic-crud/insert","permalink":"/preview/pr-150/SeaORM/docs/0.6.x/basic-crud/insert","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.6.x/06-basic-crud/02-insert.md","tags":[],"version":"0.6.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756074242000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Select","permalink":"/preview/pr-150/SeaORM/docs/0.6.x/basic-crud/select"},"next":{"title":"Update","permalink":"/preview/pr-150/SeaORM/docs/0.6.x/basic-crud/update"}}');var s=n(74848),r=n(28453);const i={},d="Insert",l={},c=[{value:"ActiveValue",id:"activevalue",level:2},{value:"Model &amp; ActiveModel",id:"model--activemodel",level:2},{value:"Insert One",id:"insert-one",level:2},{value:"Insert Many",id:"insert-many",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"insert",children:"Insert"})}),"\n",(0,s.jsxs)(t.p,{children:["Before diving into SeaORM insert we have to introduce ",(0,s.jsx)(t.code,{children:"ActiveValue"})," and ",(0,s.jsx)(t.code,{children:"ActiveModel"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"activevalue",children:"ActiveValue"}),"\n",(0,s.jsxs)(t.p,{children:["A wrapper struct to capture the changes made to ",(0,s.jsx)(t.code,{children:"ActiveModel"})," attributes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"use sea_orm::ActiveValue::NotSet;\n\n// Set value\nlet _: ActiveValue<i32> = Set(10);\n\n// NotSet value\nlet _: ActiveValue<i32> = NotSet;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"model--activemodel",children:"Model & ActiveModel"}),"\n",(0,s.jsxs)(t.p,{children:["An ",(0,s.jsx)(t.code,{children:"ActiveModel"})," has all the attributes of ",(0,s.jsx)(t.code,{children:"Model"})," wrapped in ",(0,s.jsx)(t.code,{children:"ActiveValue"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can use ",(0,s.jsx)(t.code,{children:"ActiveModel"})," to insert a row with a subset of columns set."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'let cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\n\n// Get Model\nlet model: cake::Model = cheese.unwrap();\nassert_eq!(model.name, "Cheese Cake".to_owned());\n\n// Into ActiveModel\nlet active_model: cake::ActiveModel = model.into();\nassert_eq!(active_model.name, ActiveValue::unchanged("Cheese Cake".to_owned()));\n'})}),"\n",(0,s.jsx)(t.h2,{id:"insert-one",children:"Insert One"}),"\n",(0,s.jsxs)(t.p,{children:["Insert an active model and get back a fresh ",(0,s.jsx)(t.code,{children:"Model"}),". Its value is retrieved from database, so any auto-generated fields will be populated."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\nlet pear: fruit::Model = pear.insert(db).await?;\n'})}),"\n",(0,s.jsx)(t.p,{children:"Insert an active model and get back the last insert id. Its type matches the model's primary key type, so it could be a tuple if the model has a composite primary key."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\nlet res: InsertResult = fruit::Entity::insert(pear).exec(db).await?;\nassert_eq!(res.last_insert_id, 28)\n'})}),"\n",(0,s.jsx)(t.h2,{id:"insert-many",children:"Insert Many"}),"\n",(0,s.jsx)(t.p,{children:"Insert many active models and get back the last insert id."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'let apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default()\n};\n\nlet orange = fruit::ActiveModel {\n    name: Set("Orange".to_owned()),\n    ..Default::default()\n};\n\nlet res: InsertResult = Fruit::insert_many(vec![apple, orange]).exec(db).await?;\nassert_eq!(res.last_insert_id, 30)\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);