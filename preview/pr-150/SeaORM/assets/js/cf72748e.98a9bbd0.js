"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[79979],{28453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(96540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},84854:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"graph-ql/getting-started","title":"Getting Started","description":"This example can be found on SeaORM + Seaography Example.","source":"@site/docs/10-graph-ql/02-getting-started.md","sourceDirName":"10-graph-ql","slug":"/graph-ql/getting-started","permalink":"/preview/pr-150/SeaORM/docs/next/graph-ql/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/10-graph-ql/02-getting-started.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756074242000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83e\udded Seaography","permalink":"/preview/pr-150/SeaORM/docs/next/graph-ql/seaography-intro"},"next":{"title":"\ud83d\udda5\ufe0f SeaORM Pro","permalink":"/preview/pr-150/SeaORM/docs/next/sea-orm-pro/sea-orm-pro-intro"}}');var r=a(74848),i=a(28453);const s={},o="Getting Started",l={},d=[{value:"Install Seaography CLI",id:"install-seaography-cli",level:2},{value:"Generate Seaography Entities",id:"generate-seaography-entities",level:2},{value:"Generate GraphQL Project",id:"generate-graphql-project",level:2},{value:"Start the server",id:"start-the-server",level:2},{value:"Run some queries",id:"run-some-queries",level:2},{value:"Bakery -&gt; Cake -&gt; Baker",id:"bakery---cake---baker",level:3},{value:"List gluten-free cakes and know where to buy them",id:"list-gluten-free-cakes-and-know-where-to-buy-them",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,r.jsxs)(n.p,{children:["This example can be found on ",(0,r.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/examples/seaography_example",children:"SeaORM + Seaography Example"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://raw.githubusercontent.com/SeaQL/sea-orm/master/examples/seaography_example/Seaography%20example.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["To get started, all you need is a live SQL database with schema. You can code everything in Rust by writing SeaORM migrations, or design the schema with a GUI tool (e.g. ",(0,r.jsx)(n.a,{href:"https://www.jetbrains.com/datagrip/",children:"DataGrip"}),")."]}),"\n",(0,r.jsx)(n.h2,{id:"install-seaography-cli",children:"Install Seaography CLI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cargo install seaography-cli@^1.1.0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generate-seaography-entities",children:"Generate Seaography Entities"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"sea-orm-cli generate entity --output-dir graphql/src/entities --seaography\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Generate entities with ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," like you normally do, but with an additional ",(0,r.jsx)(n.code,{children:"--seaography"})," flag. The entities are basically good-old SeaORM entities, but with an additional ",(0,r.jsx)(n.code,{children:"RelatedEntity"})," enum."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="examples/seaography_example/graphql/src/entities/cake.rs"',children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    #[sea_orm(column_type = "Decimal(Some((16, 4)))")]\n    pub price: Decimal,\n    pub bakery_id: i32,\n    pub gluten_free: i8,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::bakery::Entity",\n        from = "Column::BakeryId",\n        to = "super::bakery::Column::Id",\n        on_update = "Cascade",\n        on_delete = "Cascade"\n    )]\n    Bakery,\n    #[sea_orm(has_many = "super::cake_baker::Entity")]\n    CakeBaker,\n}\n\nimpl Related<super::bakery::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Bakery.def()\n    }\n}\n\nimpl Related<super::cake_baker::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::CakeBaker.def()\n    }\n}\n\nimpl Related<super::baker::Entity> for Entity {\n    fn to() -> RelationDef {\n        super::cake_baker::Relation::Baker.def()\n    }\n    fn via() -> Option<RelationDef> {\n        Some(super::cake_baker::Relation::Cake.def().rev())\n    }\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n// Additional schema meta exposed to Seaography\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {\n+     #[sea_orm(entity = "super::bakery::Entity")]\n+     Bakery,\n+     #[sea_orm(entity = "super::cake_baker::Entity")]\n+     CakeBaker,\n+     #[sea_orm(entity = "super::baker::Entity")]\n+     Baker,\n+ }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"generate-graphql-project",children:"Generate GraphQL Project"}),"\n",(0,r.jsx)(n.p,{children:"Generating a fresh project is the easiest way to launch a GraphQL server.\nHowever, Seaography can easily be integrated to an existing web server built with any web framework."}),"\n",(0,r.jsx)(n.p,{children:"Seaography supports Poem, Actix, and Axum out of the box."}),"\n",(0,r.jsx)(n.p,{children:"Run the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"seaography-cli graphql graphql/src/entities $DATABASE_URL sea-orm-seaography-example\n"})}),"\n",(0,r.jsx)(n.p,{children:"Full help:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"\ud83e\udded A dynamic GraphQL framework for SeaORM\n\nUsage: seaography-cli [OPTIONS] <DESTINATION> <ENTITIES> <DATABASE_URL> <CRATE_NAME>\n\nArguments:\n  <DESTINATION>   Project destination folder\n  <ENTITIES>      SeaORM entities folder\n  <DATABASE_URL>  Database URL to write in .env\n  <CRATE_NAME>    Crate name for generated project\n\nOptions:\n  -f, --framework <FRAMEWORK>\n          Which web framework to use [default: poem] [possible values: actix, poem, axum]\n      --depth-limit <DEPTH_LIMIT>\n          GraphQL depth limit\n      --complexity-limit <COMPLEXITY_LIMIT>\n          GraphQL complexity limit\n  -h, --help\n          Print help\n  -V, --version\n          Print version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"start-the-server",children:"Start the server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"cd graphql\ncargo run\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You are of course free to modify the project to suit your needs.\nThe interesting bit starts at the ",(0,r.jsx)(n.code,{children:"seaography::register_entities!"})," macro in ",(0,r.jsx)(n.code,{children:"query_root.rs"}),".\nYou can add custom entities, queries and mutations to the GraphQL schema."]}),"\n",(0,r.jsx)(n.h2,{id:"run-some-queries",children:"Run some queries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"Visit GraphQL Playground at http://localhost:8000\n"})}),"\n",(0,r.jsx)(n.p,{children:"Navigate to the GraphQL Playground, and then start running some queries!"}),"\n",(0,r.jsx)(n.h3,{id:"bakery---cake---baker",children:"Bakery -> Cake -> Baker"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n  bakery(pagination: { page: { limit: 10, page: 0 } }, orderBy: { name: ASC }) {\n    nodes {\n      name\n      cake {\n        nodes {\n          name\n          price\n          baker {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"list-gluten-free-cakes-and-know-where-to-buy-them",children:"List gluten-free cakes and know where to buy them"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n  cake(filters: { glutenFree: { eq: 1 } }) {\n    nodes {\n      name\n      price\n      glutenFree\n      bakery {\n        name\n      }\n    }\n  }\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);