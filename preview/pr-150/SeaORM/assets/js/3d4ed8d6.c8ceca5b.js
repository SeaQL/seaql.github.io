"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[8673],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},83964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"generate-entity/entity-format","title":"Entity Format","description":"Let\'s look at a simple Cake entity.","source":"@site/docs/04-generate-entity/02-entity-format.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/entity-format","permalink":"/preview/pr-150/SeaORM/docs/next/generate-entity/entity-format","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/04-generate-entity/02-entity-format.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755628065000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using sea-orm-cli","permalink":"/preview/pr-150/SeaORM/docs/next/generate-entity/sea-orm-cli"},"next":{"title":"Column Types","permalink":"/preview/pr-150/SeaORM/docs/next/generate-entity/column-types"}}');var a=t(74848),r=t(28453);const s={},l="Entity Format",o={},c=[{value:"Entity",id:"entity",level:2},{value:"Table Name",id:"table-name",level:3},{value:"Column Names",id:"column-names",level:3},{value:"Column",id:"column",level:2},{value:"Column Name",id:"column-name",level:3},{value:"Column Type",id:"column-type",level:3},{value:"Additional Properties",id:"additional-properties",level:3},{value:"Cast Column Type on Select and Save",id:"cast-column-type-on-select-and-save",level:3},{value:"Ignore Attribute",id:"ignore-attribute",level:3},{value:"Primary Key",id:"primary-key",level:2},{value:"Auto Increment",id:"auto-increment",level:3},{value:"Composite Key",id:"composite-key",level:3},{value:"Relation",id:"relation",level:2},{value:"Active Model Behavior",id:"active-model-behavior",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"entity-format",children:"Entity Format"})}),"\n",(0,a.jsxs)(n.p,{children:["Let's look at a simple ",(0,a.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/tests_cfg/cake.rs",children:"Cake"})," entity."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "cake")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Do not delete the ",(0,a.jsx)(n.code,{children:"Relation"})," enum or ",(0,a.jsx)(n.code,{children:"ActiveModelBehavior"})," impl block even if they are empty."]})}),"\n",(0,a.jsx)(n.h2,{id:"entity",children:"Entity"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"DeriveEntityModel"})," macro does all the heavy lifting of defining an ",(0,a.jsx)(n.code,{children:"Entity"})," with associating ",(0,a.jsx)(n.code,{children:"Model"}),", ",(0,a.jsx)(n.code,{children:"Column"})," and ",(0,a.jsx)(n.code,{children:"PrimaryKey"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"table-name",children:"Table Name"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"table_name"})," attribute specifies the corresponding table in the database.\nOptionally, you can also specify the database schema or database name by ",(0,a.jsx)(n.code,{children:"schema_name"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"column-names",children:"Column Names"}),"\n",(0,a.jsxs)(n.p,{children:["By default, all column names are assumed to be in snake_case. You can override this behaviour for all columns in a model by specifying the ",(0,a.jsx)(n.code,{children:"rename_all"})," attribute."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(rename_all = "camelCase")]\npub struct Model { ... }\n'})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsxs)("summary",{children:["You can find a list of valid values for the ",(0,a.jsx)(n.code,{children:"rename_all"})," attribute here"]}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"camelCase"}),"\n",(0,a.jsx)(n.li,{children:"kebab-case"}),"\n",(0,a.jsx)(n.li,{children:"mixed_case"}),"\n",(0,a.jsx)(n.li,{children:"SCREAMING_SNAKE_CASE"}),"\n",(0,a.jsx)(n.li,{children:"snake_case"}),"\n",(0,a.jsx)(n.li,{children:"title_case"}),"\n",(0,a.jsx)(n.li,{children:"UPPERCASE"}),"\n",(0,a.jsx)(n.li,{children:"lowercase"}),"\n",(0,a.jsx)(n.li,{children:"SCREAMING-KEBAB-CASE"}),"\n",(0,a.jsx)(n.li,{children:"PascalCase"}),"\n"]})]}),"\n",(0,a.jsx)(n.h2,{id:"column",children:"Column"}),"\n",(0,a.jsx)(n.h3,{id:"column-name",children:"Column Name"}),"\n",(0,a.jsxs)(n.p,{children:["You can override the column name by specifying the ",(0,a.jsx)(n.code,{children:"column_name"})," attribute."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = "user", rename_all = "camelCase")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = "lAsTnAmE")]\n    last_name: String, // lAsTnAmE\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"column-type",children:"Column Type"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"column_type"})," attribute defines the database type backing the attribute. Usually you don't have to specify this, as it will inferred from the rust type. For example, ",(0,a.jsx)(n.code,{children:"i32"})," maps to ",(0,a.jsx)(n.code,{children:"integer"})," and ",(0,a.jsx)(n.code,{children:"String"})," maps to ",(0,a.jsx)(n.code,{children:"varchar"})," by default. You can read more about type mappings in the next chapter."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'pub quantity: i32,  // integer by default\n#[sea_orm(column_type = "Decimal(Some((16, 4)))")]\npub price: Decimal, // have to specify numeric precision\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Because Postgres does not natively support unsigned integer types, using unsigned types (such as ",(0,a.jsx)(n.code,{children:"u64"}),") is not recommended if you want to maintain compatibility."]}),"\n",(0,a.jsx)(n.h3,{id:"additional-properties",children:"Additional Properties"}),"\n",(0,a.jsxs)(n.p,{children:["You can add additional properties ",(0,a.jsx)(n.code,{children:"default_value"}),", ",(0,a.jsx)(n.code,{children:"unique"}),", ",(0,a.jsx)(n.code,{children:"indexed"})," and ",(0,a.jsx)(n.code,{children:"nullable"})," to a column."]}),"\n",(0,a.jsxs)(n.p,{children:["If you specified a custom ",(0,a.jsx)(n.code,{children:"column_type"})," for an optional attribute, you must also specify ",(0,a.jsx)(n.code,{children:"nullable"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(column_type = "Text", default_value = "Sam", unique, indexed, nullable)]\npub name: Option<String>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can define unique keys that span multiple columns, the following will result in a unique index on ",(0,a.jsx)(n.code,{children:"(order_id, cake_id)"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "lineitem")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    #[sea_orm(unique_key = "item")]\n    pub order_id: i32,\n    #[sea_orm(unique_key = "item")]\n    pub cake_id: i32,\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["These properties are used in ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/latest/sea_orm/schema/struct.Schema.html#method.create_table_from_entity",children:"create_table_from_entity"})," to generate the table for the entity."]}),"\n",(0,a.jsx)(n.h3,{id:"cast-column-type-on-select-and-save",children:"Cast Column Type on Select and Save"}),"\n",(0,a.jsxs)(n.p,{children:["If you need to select a column as one type but save it into the database as another, you can specify the ",(0,a.jsx)(n.code,{children:"select_as"})," and the ",(0,a.jsx)(n.code,{children:"save_as"})," attributes to perform the casting. A typical use case is selecting a column of type ",(0,a.jsx)(n.code,{children:"citext"})," (case-insensitive text) as ",(0,a.jsx)(n.code,{children:"String"})," in Rust and saving it into the database as ",(0,a.jsx)(n.code,{children:"citext"}),". One should define the model field as below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(select_as = "text", save_as = "citext")]\npub case_insensitive_text: String\n'})}),"\n",(0,a.jsx)(n.h3,{id:"ignore-attribute",children:"Ignore Attribute"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to ignore a particular model attribute such that it maps to no database column, you can use the ",(0,a.jsx)(n.code,{children:"ignore"})," annotation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(ignore)]\npub ignore_me: String\n"})}),"\n",(0,a.jsx)(n.h2,{id:"primary-key",children:"Primary Key"}),"\n",(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.code,{children:"primary_key"})," attribute to mark a column as the primary key."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key)]\npub id: i32\n"})}),"\n",(0,a.jsx)(n.h3,{id:"auto-increment",children:"Auto Increment"}),"\n",(0,a.jsxs)(n.p,{children:["By default, ",(0,a.jsx)(n.code,{children:"auto_increment"})," is implied for ",(0,a.jsx)(n.code,{children:"primary_key"})," column. Override it by specifying ",(0,a.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[sea_orm(primary_key, auto_increment = false)]\npub id: i32\n"})}),"\n",(0,a.jsx)(n.h3,{id:"composite-key",children:"Composite Key"}),"\n",(0,a.jsxs)(n.p,{children:["This is usually the case in junction tables, where a two-column tuple is used as the primary key. Simply annotate multiple columns to define a composite primary key. ",(0,a.jsx)(n.code,{children:"auto_increment"})," is ",(0,a.jsx)(n.code,{children:"false"})," for composite key."]}),"\n",(0,a.jsx)(n.p,{children:"The max arity of a primary key is 12."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"pub struct Model {\n    #[sea_orm(primary_key)]\n    pub cake_id: i32,\n    #[sea_orm(primary_key)]\n    pub fruit_id: i32,\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"relation",children:"Relation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"DeriveRelation"})," is a macro to help you implement the ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.RelationTrait.html",children:(0,a.jsx)(n.code,{children:"RelationTrait"})}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"If there are no relations, simply write:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.Related.html",children:"Related"})," trait connects entities together, such that you can build queries selecting both entities."]}),"\n",(0,a.jsxs)(n.p,{children:["Learn more about relations in the ",(0,a.jsx)(n.a,{href:"/preview/pr-150/SeaORM/docs/next/relation/one-to-one",children:"Relation"})," chapter."]}),"\n",(0,a.jsx)(n.h2,{id:"active-model-behavior",children:"Active Model Behavior"}),"\n",(0,a.jsxs)(n.p,{children:["Hooks for different actions on an ",(0,a.jsx)(n.code,{children:"ActiveModel"}),". For example, you can perform custom validation logic or trigger side effects. Inside a transaction, you can even abort an action after it is done, preventing it from saving into the database."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[async_trait]\nimpl ActiveModelBehavior for ActiveModel {\n    /// Create a new ActiveModel with default values. Also used by `Default::default()`.\n    fn new() -> Self {\n        Self {\n            uuid: Set(Uuid::new_v4()),\n            ..ActiveModelTrait::default()\n        }\n    }\n\n    /// Will be triggered before insert / update\n    async fn before_save<C>(self, db: &C, insert: bool) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        if self.price.as_ref() <= &0.0 {\n            Err(DbErr::Custom(format!(\n                "[before_save] Invalid Price, insert: {}",\n                insert\n            )))\n        } else {\n            Ok(self)\n        }\n    }\n\n    /// Will be triggered after insert / update\n    async fn after_save<C>(model: Model, db: &C, insert: bool) -> Result<Model, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(model)\n    }\n\n    /// Will be triggered before delete\n    async fn before_delete<C>(self, db: &C) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(self)\n    }\n\n    /// Will be triggered after delete\n    async fn after_delete<C>(self, db: &C) -> Result<Self, DbErr>\n    where\n        C: ConnectionTrait,\n    {\n        Ok(self)\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"If no customization is needed, simply write:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"impl ActiveModelBehavior for ActiveModel {}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);