"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[15604],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},87908:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"relation/one-to-one","title":"One to One","description":"A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.","source":"@site/versioned_docs/version-0.4.x/06-relation/01-one-to-one.md","sourceDirName":"06-relation","slug":"/relation/one-to-one","permalink":"/preview/pr-150/SeaORM/docs/0.4.x/relation/one-to-one","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/06-relation/01-one-to-one.md","tags":[],"version":"0.4.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755602621000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Raw SQL","permalink":"/preview/pr-150/SeaORM/docs/0.4.x/basic-crud/raw-sql"},"next":{"title":"One to Many","permalink":"/preview/pr-150/SeaORM/docs/0.4.x/relation/one-to-many"}}');var o=t(74848),r=t(28453);const s={},a="One to One",l={},d=[{value:"Defining the Relation",id:"defining-the-relation",level:2},{value:"Defining the Inverse Relation",id:"defining-the-inverse-relation",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"one-to-one",children:"One to One"})}),"\n",(0,o.jsxs)(n.p,{children:["A one-to-one relation is the most basic type of database relation. Let say a ",(0,o.jsx)(n.code,{children:"Cake"})," entity has at most one ",(0,o.jsx)(n.code,{children:"Fruit"})," topping."]}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-relation",children:"Defining the Relation"}),"\n",(0,o.jsxs)(n.p,{children:["On the ",(0,o.jsx)(n.code,{children:"Cake"})," entity, to define the relation:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add a new variant ",(0,o.jsx)(n.code,{children:"Fruit"})," to the ",(0,o.jsx)(n.code,{children:"Relation"})," enum."]}),"\n",(0,o.jsxs)(n.li,{children:["Define it with ",(0,o.jsx)(n.code,{children:"Entity::has_one()"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Implement the ",(0,o.jsx)(n.code,{children:"Related<Entity>"})," trait."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'{2,8,13} title="entity/cake.rs"',children:"pub enum Relation {\n    Fruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_one(super::fruit::Entity).into(),\n        }\n    }\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"defining-the-inverse-relation",children:"Defining the Inverse Relation"}),"\n",(0,o.jsxs)(n.p,{children:["On the ",(0,o.jsx)(n.code,{children:"Fruit"})," entity, its ",(0,o.jsx)(n.code,{children:"cake_id"})," attribute is referencing the primary key of ",(0,o.jsx)(n.code,{children:"Cake"})," entity."]}),"\n",(0,o.jsx)(n.p,{children:"To define the inverse relation:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add a new enum variant ",(0,o.jsx)(n.code,{children:"Relation::Cake"})," to the ",(0,o.jsx)(n.code,{children:"Fruit"})," entity."]}),"\n",(0,o.jsxs)(n.li,{children:["Write the definition of it with the ",(0,o.jsx)(n.code,{children:"Entity::belongs_to()"})," method, we always define the inverse relation using this method."]}),"\n",(0,o.jsxs)(n.li,{children:["Implement the ",(0,o.jsx)(n.code,{children:"Related<cake::Entity>"})," trait."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",metastring:'title="entity/fruit.rs"',children:"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Cake,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Cake => Entity::belongs_to(super::cake::Entity)\n                .from(Column::CakeId)\n                .to(super::cake::Column::Id)\n                .into(),\n        }\n    }\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);