"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[21985],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(96540);const a={},o=t.createContext(a);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},34872:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"basic-crud/json","title":"JSON","description":"Select JSON Result","source":"@site/versioned_docs/version-1.0.x/05-basic-crud/07-json.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/json","permalink":"/preview/pr-150/SeaORM/docs/1.0.x/basic-crud/json","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/05-basic-crud/07-json.md","tags":[],"version":"1.0.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1756136705000,"sidebarPosition":7,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Delete","permalink":"/preview/pr-150/SeaORM/docs/1.0.x/basic-crud/delete"},"next":{"title":"Raw SQL","permalink":"/preview/pr-150/SeaORM/docs/1.0.x/basic-crud/raw-sql"}}');var a=s(74848),o=s(28453);const r={},c="JSON",i={},d=[{value:"Select JSON Result",id:"select-json-result",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"json",children:"JSON"})}),"\n",(0,a.jsx)(n.h2,{id:"select-json-result",children:"Select JSON Result"}),"\n",(0,a.jsxs)(n.p,{children:["All SeaORM selects are capable of returning ",(0,a.jsx)(n.code,{children:"serde_json::Value"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Find by id\nlet cake: Option<serde_json::Value> = Cake::find_by_id(1)\n    .into_json()\n    .one(db)\n    .await?;\n\nassert_eq!(\n    cake,\n    Some(serde_json::json!({\n        "id": 1,\n        "name": "Cheese Cake"\n    }))\n);\n\n// Find with filter\nlet cakes: Vec<serde_json::Value> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .all(db)\n    .await?;\n\nassert_eq!(\n    cakes,\n    [\n        serde_json::json!({\n            "id": 2,\n            "name": "Chocolate Forest"\n        }),\n        serde_json::json!({\n            "id": 8,\n            "name": "Chocolate Cupcake"\n        }),\n    ]\n);\n\n// Paginate json result\nlet cake_pages: Paginator<_> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .paginate(db, 50);\n\nwhile let Some(cakes) = cake_pages.fetch_and_next().await? {\n    // Do something on cakes: Vec<serde_json::Value>\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);