"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[96200],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},61165:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"install-and-config/debug-log","title":"Debug Log","description":"SeaORM logs debug messages via the tracing crate.","source":"@site/versioned_docs/version-0.12.x/02-install-and-config/03-debug-log.md","sourceDirName":"02-install-and-config","slug":"/install-and-config/debug-log","permalink":"/preview/pr-150/SeaORM/docs/0.12.x/install-and-config/debug-log","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/02-install-and-config/03-debug-log.md","tags":[],"version":"0.12.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1755682425000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Connection","permalink":"/preview/pr-150/SeaORM/docs/0.12.x/install-and-config/connection"},"next":{"title":"Setting Up Migration","permalink":"/preview/pr-150/SeaORM/docs/0.12.x/migration/setting-up-migration"}}');var a=t(74848),i=t(28453);const o={},r="Debug Log",c={},l=[{value:"SQLx Logging",id:"sqlx-logging",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"debug-log",children:"Debug Log"})}),"\n",(0,a.jsxs)(n.p,{children:["SeaORM logs debug messages via the ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/tracing",children:(0,a.jsx)(n.code,{children:"tracing"})})," crate."]}),"\n",(0,a.jsxs)(n.p,{children:["You can enable SeaORM's logging with the ",(0,a.jsx)(n.code,{children:"debug-print"})," feature flag:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'[dependencies.sea-orm]\nversion = "0.12"\nfeatures = ["debug-print"]\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You need to setup ",(0,a.jsx)(n.a,{href:"https://crates.io/crates/tracing-subscriber",children:(0,a.jsx)(n.code,{children:"tracing-subscriber"})})," to capture and view the debug log. See the snippet below and a complete example ",(0,a.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/examples/actix_example/src/main.rs",children:"here"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:"pub async fn main() {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::DEBUG)\n        .with_test_writer()\n        .init();\n\n    // ...\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["SeaORM's debug print injects parameters into the SQL string, which makes it easier to read. Instead of seeing ",(0,a.jsx)(n.code,{children:'SELECT "chef"."name" FROM "chef" WHERE "chef"."id" = $1'}),", you will see ",(0,a.jsx)(n.code,{children:'SELECT "chef"."name" FROM "chef" WHERE "chef"."id" = 100'}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"sqlx-logging",children:"SQLx Logging"}),"\n",(0,a.jsxs)(n.p,{children:["SQLx also logs by default. If you turned on SeaORM's ",(0,a.jsx)(n.code,{children:"debug-print"}),", you can disable SQLx's log by passing ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/struct.ConnectOptions.html",children:(0,a.jsx)(n.code,{children:"ConnectOptions"})})," to ",(0,a.jsx)(n.code,{children:"connect()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let mut opt = ConnectOptions::new("protocol://username:password@host/database".to_owned());\nopt\n    .sqlx_logging(false) // Disable SQLx log\n    .sqlx_logging_level(log::LevelFilter::Info); // Or set SQLx log level\n\nlet db = Database::connect(opt).await?;\n'})})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);