searchState.loadedDescShard("tiberius", 0, "An asynchronous, runtime-independent, pure-rust Tabular …\nAuthenticate with an AAD token. The token should encode an …\nDefines the method of authentication to the server.\nA binary value.\nA string value.\nA variable binary value.\nA large variable string value.\nBinary data.\nA bit or boolean value.\nBoolean.\nA bit value in a variable-length type.\nA handler for a bulk insert data flow.\nSet for string columns with binary collation and always …\n<code>Client</code> is the main entry point to the SQL Server, …\nA column of data from a query.\nA container of a value that can be represented as a TDS …\nA setting a column can hold.\nThe type of the column.\nCoulumn is computed.\nThe <code>Config</code> struct contains all configuration information …\nDate value.\nDateTime value.\nDateTime2 value.\nDateTime2 value with an offset.\nA n-bit date value (TDS 7.3).\nA TDS 7.2 datetime value.\nA n-bit datetime2 value (TDS 7.3).\nA 32-bit datetime value.\nA n-bit datetime value with an offset (TDS 7.3).\nA n-bit datetime value (TDS 7.2).\nA decimal value (same as <code>Numericn</code>).\nColumn is encrypted transparently and has to be decrypted …\nThe configured encryption level specifying if encryption …\nContains the error value\nA result from a query execution, listing the number of …\n32-bit floating point number.\n64-bit floating point number.\nColumn is a fixed-length common language runtime …\nA 32-bit floating point value.\nA 64-bit floating point value.\nA n-bit floating point value.\nA conversion trait from a TDS type by-reference.\nA conversion trait from a TDS type by-value.\nA unique identifier, UUID.\nA Guid (UUID) value.\nColumn is part of a hidden primary key created to support …\n16-bit integer, signed.\n32-bit integer, signed.\n64-bit integer, signed.\nColumn is an identity.\nA image value (deprecated).\nAn 8-bit integer value.\nA 16-bit integer value.\nA 32-bit integer value.\nA 64-bit integer value.\nAuthenticate as the currently logged in user. On Windows …\nN-bit integer value (variable).\ncreate a TokenRow from list of values\nA by-value conversion trait to a TDS type.\nColumn is part of a primary key for the row and the T-SQL …\nThe number of bytes (or characters) reserved in the column.\nUnlimited, stored in the heap outside of the row.\nInformation of the upcoming row data.\nMoney value.\nA 32-bit money value.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nA string value with UTF-16 encoding.\nA text value with UTF-16 encoding (deprecated).\nA variable string value with UTF-16 encoding.\nDo not encrypt anything\nThe column doesn’t have a specified type.\nThe column can be null.\nIt is unknown whether the column might be nullable.\nNumeric value (a decimal).\nA numeric value (same as <code>Decimaln</code>).\nOnly use encryption for the login procedure\nContains the success value\nEncrypt everything if possible\nA query object with bind parameters.\nResulting data from a query.\nA set of <code>Streams</code> of <code>QueryItem</code> values, which can be either …\nEncrypt everything and fail if not possible\nAn alias for a result that holds crate’s error type as …\nInfo about the following stream of rows.\nA row of data from a query.\nA single row of data.\nAn SQL variant type.\nA small DateTime value.\nColumn is the special XML column for the sparse column set.\nAn extension trait to a <code>TcpStream</code> to find a port and …\nAuthenticate directly with SQL Server.\nA string value.\nA text value (deprecated).\nTime value.\nA n-bit time value (TDS 7.3).\nA conversion trait to a TDS type.\nA row of data.\nA length of a column in bytes or characters.\n8-bit integer, unsigned.\nUser-defined type.\nIf column is writeable.\nColumn modification status unknown.\nA Universally Unique Identifier (UUID).\nAuthenticate with Windows credentials.\nA XML value.\nXML data.\nConstruct a new configuration with AAD auth token.\nSets the application name to the connection, queryable …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nReturns a reference to the metadata, if the item is of a …\nReturns a reference to the row, if the item is of a …\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nSets the authentication method.\nBind a new parameter to the query. Must be called exactly …\nGet a <code>Braced</code> formatter.\nExecute a <code>BULK INSERT</code> statement, efficiantly storing a …\nReturn an iterator over row column-value pairs.\nClears the row, removing all column values.\nCloses this database connection explicitly.\nThe type of the column.\nThe type of the column as reference.\nThe list of columns either for the current result set, or …\nColumns defining the row data. Columns listed here are in …\nColumn info. The order is the same as in the following …\nUses an instance of <code>Config</code> to specify the connection …\nIf the given builder defines a named instance, finds the …\nThe database to connect to.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nSet the preferred encryption level.\nError module\nExecutes SQL statements in the SQL Server, returning the …\nExecutes SQL statements in the SQL Server, returning the …\nEnds the bulk load, flushing all pending data to the wire.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Config</code> from an ADO.NET connection string.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a new <code>Config</code> from a JDBC connection string.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nReturns the value, <code>None</code> being a null value, copying the …\nReturns the value, <code>None</code> being a null value, taking the …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nRetrieve a column value for a given column index, which …\nGets the columnar data with the given index. <code>None</code> if index …\nGet the host address including port\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nA host or ip address to connect to.\nGet a <code>Hyphenated</code> formatter.\nThe index of the column\nThe instance name as defined in the SQL Browser. Only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nCollects the output of the first query, dropping any …\nReturns the metadata, if the item is of a correct variant.\nCollects results from all queries in the stream into …\ncreate a TokenRow from list of values which implements …\nCollects the first row from the output of the first query, …\nReturns the row, if the item is of a correct variant.\nConvert the stream into a stream of rows, skipping …\nConvert to a value understood by the SQL Server. …\nTrue if row has no columns.\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\nReturns an iterator over column values.\nReturns the number of columns in the row.\nThe number of columns.\nThe ‘max UUID’ (all ones).\nThe name of the column.\nCreate a new <code>Config</code> with the default settings.\nConstruct a new query object with the given SQL. If the …\nConstruct a new Column.\nCreates a new empty row.\nThe ‘nil UUID’ (all zeros).\nRepresentations of numeric types.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nThe server port.\nAdds a new value to the row.\nExecutes SQL statements in the SQL Server, returning …\nExecutes SQL statements in the SQL Server, returning …\nSets ApplicationIntent readonly.\nThe result set number, starting from zero and increasing …\nThe number of the result set, an incrementing value …\nA slice of numbers of rows affected in the same order as …\nAdds a new row to the bulk insert, flushing only when …\nGet a <code>Simple</code> formatter.\nExecute multiple queries, delimited with <code>;</code> and return …\nConstruct a new SQL Server authentication configuration.\nDate and time handling.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nConvert to a value understood by the SQL Server. Conversion\nReturns a 128bit little-endian value containing the value.\nAggregates all resulting row counts into a sum.\nIf set, the server certificate will not be validated and …\nIf set, the server certificate will be validated against …\nRetrieve a column’s value for a given column index.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nConstruct a new Windows authentication configuration.\nCreates a new empty row with allocated capacity.\nThe XML containers\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nThe operation failed because a pipe was closed.\nInvalid input in Bulk Upload\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nConversion failure from one type to another.\nCross-device or cross-filesystem (hard) link or rename.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nServer responded with encoding not supported.\nA unified error enum that contains several errors that …\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nAn error from the GSSAPI library.\nThe remote host is not reachable.\nThe operation was partially successful and needs to be …\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nAn error occured when performing I/O to the server.\nA list specifying general categories of I/O error.\nThe filesystem object is, unexpectedly, a directory.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nTried to parse an integer that was not an integer.\nThe operation lacked the necessary privileges to complete.\nAn error happened during the request or response parsing.\nThe filesystem or storage medium is read-only, but a write …\nResource is busy.\nServer requested a connection to an alternative address.\nAn error returned by the server.\nStale network file handle.\nThe underlying storage (typically, a filesystem) is full.\nThe I/O operation’s timeout expired, causing it to be …\nAn error in the TLS handshake.\nAn error token returned from the server.\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nTried to convert data to UTF-16 that was not valid.\nTried to convert data to UTF-8 that was not valid.\nThe operation needs to block to complete, but the blocking …\nAn error returned when an operation could not be completed …\nThe class (severity) of the error. A class of less than 10 …\nReturns the error code, if the error originates from the …\nThe error code, see descriptions from the manual.\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue, if the error was caused by a deadlock.\nThe line number in the SQL batch or stored procedure that …\nThe error message returned from the server.\nThe name of the stored procedure causing the error.\nThe server name.\nThe error state, used as a modifier to the error number.\nThe requested hostname\nA list specifying general categories of I/O error.\nThe error description.\nThe requested port.\nA big decimal type.\nA big signed integer type.\n<code>Decimal</code> represents a 128 bit representation of a …\nA constant representing Euler’s number (e) as …\nA constant representing the inverse of Euler’s number …\nA constant representing π/2 as …\nThe largest value that can be represented by this decimal …\nThe smallest value that can be represented by this decimal …\nA constant representing -1.\nRepresent a sql Decimal / Numeric type. It is stored in a …\nA constant representing 1.\nA constant representing 100.\nA constant representing 1000.\nA constant representing π as …\nA constant representing π/4 as …\nA constant representing 10.\nA constant representing 2.\nA constant representing 2π as …\nA constant <code>BigInt</code> with value 0, useful for static …\nA constant representing 0.\nComputes the absolute value of <code>self</code>.\nCompute the absolute value of number\nReturn the internal big integer value and an exponent. …\nReinitializes a <code>BigInt</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns whether the bit in position <code>bit</code> is set, using the …\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nReturns the truncated principal cube root of <code>self</code> – see …\nTake the cube root of the number, using default context\nTake cube root of self, using properties of context\nReturns the smallest integer greater than or equal to a …\nChecked addition. Computes <code>self + other</code>, returning <code>None</code> if …\nChecked division. Computes <code>self / other</code>, returning <code>None</code> if …\nChecked multiplication. Computes <code>self * other</code>, returning …\nChecked remainder. Computes <code>self % other</code>, returning <code>None</code> …\nChecked subtraction. Computes <code>self - other</code>, returning <code>None</code> …\nCube a decimal: <em>x³</em>\nExtract the decimal part.\nReturns the default value for a <code>Decimal</code> (equivalent to …\nDeserializes the given bytes into a decimal number. The …\nNumber of digits in the non-scaled integer representation\nDeprecated, use <code>is_multiple_of</code> instead.\nMultiply decimal by 2 (efficiently)\nEvaluate the natural-exponential function ex\nGreatest common divisor, least common multiple, and …\nReturns the largest integer less than or equal to a number.\nReturns a new <code>Decimal</code> representing the fractional portion …\nReturns the scale of the BigDecimal, the total number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct BigDecimal from BigInt and a scale\nCreates and initializes a <code>BigInt</code>.\nConstruct positive BigDecimal from BigUint and a scale\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nParses a 32-bit float into a Decimal number whilst …\nParses a 64-bit float into a Decimal number whilst …\nCreates a <code>Decimal</code> using a 128 bit signed <code>m</code> representation …\nReturns a <code>Decimal</code> using the instances constituent parts.\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nReturns a <code>Result</code> which if successful contains the <code>Decimal</code> …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nParses a string slice into a decimal. If the value …\nCreates and initializes a <code>BigInt</code>.\nConverts a string slice in a given base to a decimal.\nCreates and initializes a BigDecimal.\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nDivide decimal by 2 (efficiently)\nExtract the integer part.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the internal big integer value and an …\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nCompute the reciprical of the number: x-1\nReturn inverse of self, rounding with ctx\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns true if this Decimal number has zero fractional …\nReturn true if this number has zero fractional part (is …\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the decimal is negative.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if the decimal is positive.\nReturns <code>true</code> if the sign bit of the decimal is negative.\nReturns <code>true</code> if the sign bit of the decimal is positive.\nReturns true if this Decimal number is equivalent to zero.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nCalculates the Lowest Common Multiple (LCM) of the number …\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nReturns the mantissa of the decimal number.\nReturns the maximum of the two numbers.\nReturns the maximum possible number that <code>Decimal</code> can …\nReturns the minimum of the two numbers.\nReturns the minimum possible number that <code>Decimal</code> can …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nCreates and initializes a <code>BigInt</code>.\nReturns a <code>Decimal</code> with a 64 bit <code>m</code> representation and …\nCreates and initializes a <code>BigDecimal</code>.\nCreates a new Numeric value.\nRounds up to nearest multiple of argument.\nStrips any trailing zero’s from a <code>Decimal</code> and converts …\nAn in place version of <code>normalize</code>. Strips any trailing zero…\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigDecimal</code>.\nReturns <code>self ^ exponent</code>.\nThe precision of the <code>Number</code> as a number of digits.\nRounds down to nearest multiple of argument.\nPanics if out-of-bounds\nPanics if out-of-bounds\nModifies the <code>Decimal</code> towards the desired scale, attempting …\nReturns a new <code>Decimal</code> number with no fractional portion …\nReturn given number rounded to ‘round_digits’ …\nReturns a new <code>Decimal</code> number with the specified number of …\nReturns a new <code>Decimal</code> number with the specified number of …\nReturns <code>Some(Decimal)</code> number rounded to the specified …\nReturns <code>Some(Decimal)</code> number rounded to the specified …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nReturns the scale of the decimal number, otherwise known …\nThe scale (where is the decimal point) of the value.\nReturns a serialized version of the decimal number. The …\nSets or clears the bit in the given position, using the two…\nAn optimized method for changing the scale of a decimal …\nAn optimized method for changing the sign of a decimal …\nAn optimized method for changing the sign of a decimal …\nAn optimized method for changing the sign of a decimal …\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nReturn the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.\nReturns the truncated principal square root of <code>self</code> – …\nTake the square root of the number\nTake the square root of the number, using context for …\nSquare a decimal: <em>x²</em>\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nCreate string of this bigdecimal in engineering notation\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nMake a BigDecimalRef of this value\nCreate string of this bigdecimal in scientific notation\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the sign and the <code>u64</code> digits representation of the …\nReturns the number of least-significant bits that are zero,\nReturns a new <code>Decimal</code> integral with no fractional portion. …\nReturns a new <code>Decimal</code> with the fractional portion …\nChecked version of <code>Decimal::from_i128_with_scale</code>. Will …\nChecked version of <code>Decimal::new</code>. Will return <code>Err</code> instead …\nConvert <code>Decimal</code> to an internal representation of the …\nThe internal integer value\nReturn a new BigDecimal object with precision set to new …\nReturn this BigDecimal with the given precision, rounding …\nReturn a new BigDecimal object equivalent to self, with …\nReturn a new BigDecimal after shortening the digits and …\nWrite bigdecimal in engineering notation to writer <code>w</code>\nWrite bigdecimal in scientific notation to writer <code>w</code>\nA presentation of <code>date</code> type in the server.\nA presentation of <code>datetime</code> type in the server.\nA presentation of <code>datetime2</code> type in the server.\nA presentation of <code>datetimeoffset</code> type in the server.\nA presentation of <code>smalldatetime</code> type in the server.\nA presentation of <code>time</code> type in the server.\nMappings between TDS and and Chrono types (with <code>chrono</code> …\nThe date component.\nThe date and time part.\nDays since 1st of January, 1900 (including the negative …\nDays since 1st of January, 1900.\nThe number of days from 1st of January, year 1.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumber of 10^-n second increments since midnight, where <code>n</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>DateTime</code> instance.\nConstruct a new <code>SmallDateTime</code> instance.\nConstruct a new <code>Date</code>\nConstruct a new <code>Time</code>\nConstruct a new <code>DateTime2</code> from the date and time …\nConstruct a new <code>DateTimeOffset</code> from a <code>datetime2</code>, offset …\nNumber of minutes from UTC.\nThe accuracy of the increments.\n1/300 of a second, so a value of 300 equals 1 second …\n1/300 of a second, so a value of 300 equals 1 second …\nMappings between TDS and and time crate types (with <code>time</code> …\nThe time component.\nISO 8601 combined date and time with time zone.\nThe time zone with fixed offset, from UTC-23:59:59 to …\nThe local timescale.\nThe maximum possible <code>NaiveDate</code> (December 31, 262142 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe maximum possible <code>DateTime&lt;Utc&gt;</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262144 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nThe earliest possible <code>NaiveTime</code>\nThe minimum possible <code>DateTime&lt;Utc&gt;</code>.\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nISO 8601 time without timezone. Allows for the nanosecond …\nThe Unix Epoch, 1970-01-01 00:00:00 UTC.\nThe Unix Epoch, 1970-01-01 00:00:00.\nThe UTC time zone. This is the most efficient time zone …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nConverts the <code>NaiveDateTime</code> into a timezone-aware …\nMakes a new <code>NaiveDateTime</code> from the current date and given …\nConverts the <code>NaiveDateTime</code> into the timezone-aware …\nAdd a duration in <code>Days</code> to the date part of the <code>DateTime</code>.\nAdd a duration in <code>Days</code> to the date\nAdd a duration in <code>Days</code> to the date part of the …\nAdds given <code>Months</code> to the current date and time.\nAdd a duration in <code>Months</code> to the date\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>FixedOffset</code> to the current datetime. Returns …\nAdds given <code>TimeDelta</code> to the current date and time.\nAdds the number of whole days in the given <code>TimeDelta</code> to …\nAdds given <code>TimeDelta</code> to the current date and time.\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtract a duration in <code>Days</code> from the date\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtracts given <code>Months</code> from the current date and time.\nSubtract a duration in <code>Months</code> from the date\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>FixedOffset</code> from the current datetime. …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nSubtracts the number of whole days in the given <code>TimeDelta</code> …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nRetrieves the date component with an associated timezone.\nRetrieves a date component.\nRetrieves the date component.\nReturns the day of month starting from 1.\nReturns the day of month starting from 1.\nReturns the day of month starting from 0.\nReturns the day of month starting from 0.\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Eastern Hemisphere with …\nFix the offset from UTC to its current value, dropping the …\nFormats the combined date and time per the specified …\nFormats the date with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the time with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the date with the specified formatting items. …\nFormats the combined date and time with the specified …\nFormats the time with the specified formatting items. …\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nConvert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …\nReturns the argument unchanged.\nConvert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …\nConvert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …\nReturns the argument unchanged.\nConverts a <code>NaiveDate</code> to a <code>NaiveDateTime</code> of the same date …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from microseconds since the …\nMakes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from milliseconds since the …\nCreates a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …\nCreates a new NaiveDateTime from nanoseconds since the …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nMakes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nReturns the hour number from 0 to 23.\nReturns the hour number from 0 to 23.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that steps by days across all …\nReturns an iterator that steps by weeks across all …\nReturns <code>true</code> if this is a leap year.\nReturns the number of seconds to add to convert from UTC …\nReturns the minute number from 0 to 59.\nReturns the minute number from 0 to 59.\nReturns the month number starting from 1.\nReturns the month number starting from 1.\nReturns the month number starting from 0.\nReturns the month number starting from 0.\nReturns a view to the naive local datetime.\nReturns a view to the naive UTC datetime.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of nanoseconds since the whole non-leap …\nMakes a new <code>NaiveDateTime</code> from date and time components. …\nReturns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …\nReturns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …\nReturns the number of non-leap seconds past the last …\nRetrieves an associated offset from UTC.\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nReturns the day of year starting from 0.\nReturns the day of year starting from 0.\nAdds given <code>TimeDelta</code> to the current time, and also returns …\nSubtracts given <code>TimeDelta</code> from the current time, and also …\nParses a string from a user-specified format into a …\nParses a string from a user-specified format into a new …\nParses a string with the specified format string and …\nParses a string from a user-specified format into a new …\nParses an RFC 2822 date-and-time string into a …\nParses an RFC 3339 date-and-time string into a …\nParses a string from a user-specified format into a …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nCompare two DateTimes based on their true time, ignoring …\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nReturns the second number from 0 to 59.\nReturns the second number from 0 to 59.\nSubtracts another <code>DateTime</code> from the current date and time. …\nSubtracts another <code>NaiveDate</code> from the current date. Returns …\nSubtracts another <code>NaiveDateTime</code> from the current date and …\nSubtracts another <code>NaiveTime</code> from the current time. Returns …\nMakes a new <code>NaiveDate</code> for the next calendar date.\nMakes a new <code>NaiveDate</code> for the next calendar date.\nRetrieves the time component.\nRetrieves a time component.\nReturns the number of non-leap seconds since January 1, …\nReturns the number of non-leap seconds since the midnight …\nReturns the number of non-leap-microseconds since January …\nReturns the number of non-leap <em>microseconds</em> since midnight …\nReturns the number of non-leap-milliseconds since January …\nReturns the number of non-leap <em>milliseconds</em> since midnight …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of non-leap-nanoseconds since January …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of microseconds since the last second …\nReturns the number of microseconds since the last whole …\nReturns the number of milliseconds since the last second …\nReturns the number of milliseconds since the last whole …\nReturns the number of nanoseconds since the last second …\nReturns the number of nanoseconds since the last whole …\nRetrieves an associated time zone.\nReturns an RFC 2822 date and time string such as …\nReturns an RFC 3339 and ISO 8601 date and time string such …\nReturn an RFC 3339 and ISO 8601 date and time string with …\nTurn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …\nReturns a <code>Date</code> which corresponds to the current date.\nReturns a <code>Date</code> which corresponds to the current date.\nReturns the number of seconds to add to convert from the …\nReturns the <code>NaiveWeek</code> that the date belongs to, starting …\nReturns the day of week.\nReturns the day of week.\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>FixedOffset</code> for the Western Hemisphere with …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>DateTime</code> with the day of month (starting from …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>DateTime</code> with the hour number changed.\nMakes a new <code>NaiveDateTime</code> with the hour number changed.\nMakes a new <code>NaiveTime</code> with the hour number changed.\nMakes a new <code>DateTime</code> with the minute number changed.\nMakes a new <code>NaiveDateTime</code> with the minute number changed.\nMakes a new <code>NaiveTime</code> with the minute number changed.\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>DateTime</code> with the month number (starting from …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>DateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveDateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveTime</code> with nanoseconds since the whole …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>DateTime</code> with the day of year (starting from …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>DateTime</code> with the second number changed.\nMakes a new <code>NaiveDateTime</code> with the second number changed.\nMakes a new <code>NaiveTime</code> with the second number changed.\nSet the time to a new fixed time on the existing date.\nChanges the associated time zone. The returned <code>DateTime</code> …\nMakes a new <code>DateTime</code> with the year number changed, while …\nMakes a new <code>NaiveDate</code> with the year number changed, while …\nMakes a new <code>NaiveDateTime</code> with the year number changed, …\nReturns the year number in the calendar date.\nReturns the year number in the calendar date.\nRetrieve the elapsed years from now to the given <code>DateTime</code>.\nReturns the number of whole years from the given <code>base</code> …\nDate in the proleptic Gregorian calendar.\nContains the error value\nA unified error type for anything returned by a method in …\nA measurement of a monotonically non-decreasing clock. …\nThe maximum valid <code>Date</code>.\nThe largest value that can be represented by …\nCreate a <code>Time</code> that is exactly midnight.\nThe minimum valid <code>Date</code>.\nThe smallest value that can be represented by …\nMonths of the year.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nContains the success value\nCombined date and time.\nAn alias for <code>std::result::Result</code> with a generic error from …\nThe clock time within a given date. Nanosecond precision.\nMidnight, 1 January, 1970 (UTC).\nA <code>UtcOffset</code> that is UTC.\nAn offset from UTC.\nDays of the week.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nAdd the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …\nAdd the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…\nPanics\nPanics\nPanics\nPanics\nGet the clock hour, minute, and second.\nGet the clock hour, minute, and second.\nObtain the UTC offset as its hours, minutes, and seconds. …\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nGet the clock hour, minute, second, and nanosecond.\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nConversion between units of time.\nGet the <code>Date</code> in the stored offset.\nGet the <code>Date</code> component of the <code>PrimitiveDateTime</code>.\nGet the day of the month.\nGet the day of the date in the stored offset.\nGet the day of the date.\nReturns the amount of time elapsed since this instant was …\nVarious error types returned by methods in the time crate.\nExtension traits.\nFormat the <code>Date</code> using the provided format description.\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nFormat the <code>Time</code> using the provided format description.\nFormat the <code>UtcOffset</code> using the provided format description.\nDescription of how types should be formatted and parsed.\nFormat the <code>Date</code> using the provided format description.\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nFormat the <code>Time</code> using the provided format description.\nFormat the <code>UtcOffset</code> using the provided format description.\nFormatting for various types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to create a <code>Date</code> from the year, month, and day.\nAttempt to create a <code>Time</code> from the hour, minute, and second.\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nAttempt to create a <code>Date</code> from the ISO year, week, and …\nCreate a <code>Date</code> from the Julian day.\nAttempt to create a <code>Date</code> from the year and ordinal day …\nCreate an <code>OffsetDateTime</code> from the provided Unix timestamp. …\nConstruct an <code>OffsetDateTime</code> from the provided Unix …\nCreate a <code>UtcOffset</code> representing an offset by the number of …\nGet the clock hour in the stored offset.\nGet the clock hour.\nGet the clock hour.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the inner <code>std::time::Instant</code>.\nCheck if the offset is negative, or west of UTC.\nCheck if the offset is positive, or east of UTC.\nCheck if the offset is exactly UTC.\nGet the ISO week number.\nGet the ISO week number of the date in the stored offset.\nGet the ISO week number.\nMacros to construct statically known values.\nGet the microseconds within the second in the stored …\nGet the microseconds within the second.\nGet the microseconds within the second.\nCreate a <code>PrimitiveDateTime</code> using the existing date. The …\nGet the milliseconds within the second in the stored …\nGet the milliseconds within the second.\nGet the milliseconds within the second.\nGet the minute within the hour in the stored offset.\nGet the minute within the hour.\nGet the minute within the hour.\nObtain the number of minutes past the hour the offset is …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the month.\nGet the month of the date in the stored offset.\nGet the month of the date.\nGet the nanoseconds within the second in the stored offset.\nGet the nanoseconds within the second.\nGet the nanoseconds within the second.\nCreate a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code>, <code>Time</code>, and …\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code> and <code>Time</code> …\nGet the next month.\nGet the next weekday.\nGet the next calendar date.\nCalculates the first occurrence of a weekday that is …\nReturns an <code>Instant</code> corresponding to “now”.\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nGet n-th next month.\nGet n-th next day.\nCalculates the <code>n</code>th occurrence of a weekday that is …\nGet n-th previous month.\nGet n-th previous day.\nCalculates the <code>n</code>th occurrence of a weekday that is …\nGet the zero-indexed number of days from Monday.\nGet the zero-indexed number of days from Sunday.\nGet the one-indexed number of days from Monday.\nGet the one-indexed number of days from Sunday.\nGet the <code>UtcOffset</code>.\nGet the day of the year.\nGet the day of the year of the date in the stored offset.\nGet the day of the year.\nParse a <code>Date</code> from the input using the provided format …\nParse an <code>OffsetDateTime</code> from the input using the provided …\nParse a <code>PrimitiveDateTime</code> from the input using the …\nParse a <code>Time</code> from the input using the provided format …\nParse a <code>UtcOffset</code> from the input using the provided format …\nParsing for various types.\nCalculates the first occurrence of a weekday that is …\nGet the previous month.\nGet the previous weekday.\nGet the previous calendar date.\nReplace the date, which is assumed to be in the stored …\nReplace the date, preserving the time.\nReplace the date and time, which are assumed to be in the …\nReplace the day of the month.\nReplace the day of the month.\nReplace the day of the month.\nReplace the clock hour.\nReplace the clock hour.\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the microseconds within the second.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the milliseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the minutes within the hour.\nReplace the minutes within the hour.\nReplace the month of the year.\nReplace the month of the year.\nReplace the month of the year.\nReplace the nanoseconds within the second.\nReplace the nanoseconds within the second.\nReplace the nanoseconds within the second.\nReplace the offset. The date and time components remain …\nReplace the day of the year.\nReplace the day of the year.\nReplace the day of the year.\nReplace the seconds within the minute.\nReplace the seconds within the minute.\nReplace the seconds within the minute.\nReplace the time, which is assumed to be in the stored …\nReplace the time, preserving the date.\nReplace the year. The month and day will be unchanged.\nReplace the year. The month and day will be unchanged.\nReplace the year. The month and day will be unchanged.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nGet the second within the minute in the stored offset.\nGet the second within the minute.\nGet the second within the minute.\nObtain the number of seconds past the minute the offset is …\nDifferential formats for serde.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nSubtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …\nSubtract the sub-day time of the <code>std::time::Duration</code> from …\nSubtract two <code>Time</code>s, returning the <code>Duration</code> between. This …\nPanics\nPanics\nPanics\nPanics\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the <code>Time</code> in the stored offset.\nGet the <code>Time</code> component of the <code>PrimitiveDateTime</code>.\nGet the year, month, and day.\nGet the year, month, and day.\nGet the year, month, and day.\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nGet the ISO 8601 year, week number, and weekday.\nGet the ISO 8601 year, week number, and weekday.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date.\nGet the Julian day for the date. The time is not taken …\nGet the Julian day for the date. The time is not taken …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nGet the year and ordinal day number.\nGet the year and ordinal day number.\nGet the year and ordinal day number.\nGet the Unix timestamp.\nGet the Unix timestamp in nanoseconds.\nUtility functions.\nGet the weekday.\nGet the weekday of the date in the stored offset.\nGet the weekday.\nObtain the number of whole hours the offset is from UTC. A …\nObtain the number of whole minutes the offset is from UTC. …\nObtain the number of whole seconds the offset is from UTC. …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nCreate a <code>PrimitiveDateTime</code> using the existing date and the …\nGet the year of the date.\nGet the year of the date in the stored offset.\nGet the year of the date.\nA unit of time representing exactly one day.\nA unit of time representing exactly one hour.\nA unit of time representing exactly one microsecond.\nA unit of time representing exactly one millisecond.\nA unit of time representing exactly one minute.\nA unit of time representing exactly one nanosecond.\nA unit of time representing exactly one second.\nA unit of time representing exactly one week.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObtain the number of times <code>Nanosecond</code> can fit into <code>T</code>. If <code>T</code> …\nObtain the number of times <code>Microsecond</code> can fit into <code>T</code>. If <code>T</code>…\nObtain the number of times <code>Millisecond</code> can fit into <code>T</code>. If <code>T</code>…\nObtain the number of times <code>Second</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Minute</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Hour</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Day</code> can fit into <code>T</code>. If <code>T</code> is …\nObtain the number of times <code>Week</code> can fit into <code>T</code>. If <code>T</code> is …\nAn error type indicating that a component provided to a …\nSome component contained an invalid value for the type.\nAn error type indicating that a conversion failed because …\nAn error type indicating that a <code>TryFrom</code> call failed …\nA unified error type for anything returned by a method in …\nSomething was expected, but not found.\nAn error occurred when formatting.\nThe <code>Parsed</code> did not include enough information to construct …\nThe type being formatted does not contain sufficient …\nThe component named has a value that cannot be formatted …\nA dynamic component was not valid.\nA component name is not valid.\nThe format description provided was not valid.\nA string literal was not what was expected.\nA modifier is not valid.\nAn error type indicating that a <code>FromStr</code> call failed …\nA component name is missing.\nA required modifier is missing.\nCertain behavior is not supported in the given context.\nAn error that occurred at some stage of parsing.\nAn error that occurred while parsing the input into a …\nA value of <code>std::io::Error</code> was returned internally.\nAn error that occurred when converting a <code>Parsed</code> to another …\nThere was a bracket pair that was opened but not closed.\nThe input should have ended, but there were characters …\nThe input was expected to have ended, but there are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the value’s permitted range is conditional, i.e. …\nObtain the name of the component whose value was out of …\nThe context in which the behavior is not supported.\nThe zero-based index of the opening bracket.\nThe zero-based index the component name starts at.\nThe zero-based index the modifier starts at.\nThe zero-based index where the component name should start.\nThe zero-based index of the component.\nThe zero-based index the item was expected to be found at.\nThe zero-based index the error occurred at.\nThe name of the invalid component name.\nThe name of the modifier that is missing.\nThe value of the invalid modifier.\nWhat was expected to be present, but wasn’t.\nThe behavior that is not supported.\nAn extension trait for <code>std::time::Instant</code> that adds …\nCreate <code>Duration</code>s from numeric literals.\nCreate <code>std::time::Duration</code>s from numeric literals.\nPanics\nPanics\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nReturns <code>Some(t)</code> where <code>t</code> is the time …\nCreate a <code>Duration</code> from the number of days.\nCreate a <code>Duration</code> from the number of hours.\nCreate a <code>Duration</code> from the number of microseconds.\nCreate a <code>Duration</code> from the number of milliseconds.\nCreate a <code>Duration</code> from the number of minutes.\nCreate a <code>Duration</code> from the number of nanoseconds.\nCreate a <code>Duration</code> from the number of seconds.\nReturns the amount of time elapsed from another instant to …\nCreate a <code>std::time::Duration</code> from the number of days.\nCreate a <code>std::time::Duration</code> from the number of hours.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of minutes.\nCreate a <code>std::time::Duration</code> from the number of …\nCreate a <code>std::time::Duration</code> from the number of seconds.\nCreate a <code>std::time::Duration</code> from the number of weeks.\nPanics\nPanics\nCreate a <code>Duration</code> from the number of weeks.\nA complete description of how to format and parse a type.\nA component of a larger format description.\nA minimal representation of a single non-literal item.\nA minimal representation of a single non-literal item.\nA minimal representation of a single non-literal item.\nA series of literals or components that collectively form …\nA series of literals or components that collectively form …\nA series of literals or components that collectively form …\nDay of the month.\nThe end of input. Parsing this component will fail if …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA series of <code>FormatItem</code>s where, when parsing, the first …\nA complete description of how to format and parse a type.\nHour of the day.\nA number of bytes to ignore when parsing. This has no …\nBytes that are formatted as-is.\nBytes that are formatted as-is.\nBytes that are formatted as-is.\nMinute within the hour.\nMonth of the year.\nHour of the UTC offset.\nMinute within the hour of the UTC offset.\nSecond within the minute of the UTC offset.\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA <code>FormatItem</code> that may or may not be present when parsing. …\nA <code>FormatItem</code> that may or may not be present when parsing. …\nOrdinal day of the year.\nA complete description of how to format and parse a type.\nAM/PM part of the time.\nSecond within the minute.\nSubsecond within the second.\nA Unix timestamp.\nWeek within the year.\nDay of the week.\nYear of the date.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVarious modifiers for components.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nParse a sequence of items from the format description.\nWell-known formats, typically standards.\nDay of the month.\nExactly eight digits.\nThe end of input.\nExactly five digits.\nExactly four digits.\nThe full value of the year.\nHour of the day.\nIgnore some number of bytes.\nWeek 1 is the week that contains January 4.\nOnly the last two digits of the year.\nThe long form of the month name (e.g. “January”).\nThe long form of the weekday (e.g. “Monday”).\nMicroseconds since the Unix epoch.\nMilliseconds since the Unix epoch.\nMinute within the hour.\nA numerical representation using Monday as the first day …\nWeek 1 begins on the first Monday of the calendar year.\nMonth of the year.\nThe representation of a month.\nNanoseconds since the Unix epoch.\nExactly nine digits.\nThere is no padding. This can result in a width below the …\nThe number of the month (January is 1, December is 12).\nHour of the UTC offset.\nMinute within the hour of the UTC offset.\nSecond within the minute of the UTC offset.\nExactly one digit.\nAny number of digits (up to nine) that is at least one. …\nOrdinal day of the year.\nType of padding to ensure a minimum width.\nAM/PM part of the time.\nSecond within the minute.\nSeconds since the Unix epoch.\nExactly seven digits.\nThe short form of the month name (e.g. “Jan”).\nThe short form of the weekday (e.g. “Mon”).\nExactly six digits.\nA space character (<code> </code>) should be used as padding.\nSubsecond within the second.\nThe number of digits present in a subsecond representation.\nA numerical representation using Sunday as the first day …\nWeek 1 begins on the first Sunday of the calendar year.\nExactly three digits.\nExactly two digits.\nA Unix timestamp.\nThe precision of a Unix timestamp.\nWeek within the year.\nThe representation used for the week number.\nDay of the week.\nThe representation used for the day of the week.\nYear of the date.\nThe representation used for a year value.\nA zero character (<code>0</code>) should be used as padding.\nIs the value case sensitive when parsing?\nIs the value case sensitive when parsing?\nIs the value case sensitive when parsing?\nCreate an instance of <code>Ignore</code> with the provided number of …\nThe number of bytes to ignore.\nCreates a modifier that indicates the value is padded with …\nCreates an instance of this type that indicates the value …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value uses the <code>Long</code> …\nCreates a modifier that indicates that the value is padded …\nCreates a modifier that indicates the value uses the <code>Full</code> …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value uses the …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the stringified value …\nCreates a modifier that indicates the value only uses a …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value is padded with …\nCreates a modifier that indicates the value represents the …\nCreates a modifier used to represent the end of input.\nHow many digits are present in the component?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the hour displayed using a 12 or 24-hour clock?\nIs the period uppercase or lowercase?\nWhether the value is based on the ISO week number or the …\nWhen using a numerical representation, should it be zero …\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe padding to obtain the minimum width.\nThe precision of the timestamp.\nWhat form of representation should be used?\nWhat form of representation should be used?\nWhat kind of representation should be used?\nWhat kind of representation should be used?\nWhether the <code>+</code> sign is present when a positive year …\nWhether the <code>+</code> sign is present on positive values.\nWhether the <code>+</code> sign must be present for a non-negative …\nAn <code>Iso8601</code> that handles only the date, but is otherwise …\nAn <code>Iso8601</code> that handles the date and time, but is …\nAn <code>Iso8601</code> that handles the date, time, and UTC offset. …\nAn <code>Iso8601</code> with the default configuration.\nThe format described in ISO 8601.\nAn <code>Iso8601</code> that handles only the UTC offset, but is …\nAn <code>Iso8601</code> that can only be used for parsing. Using this …\nThe format described in RFC 2822.\nThe format described in RFC 3339.\nAn <code>Iso8601</code> that handles only the time, but is otherwise …\nAn <code>Iso8601</code> that handles the time and UTC offset, but is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe format described in ISO 8601.\nUse the year-month-day format.\nConfiguration for <code>Iso8601</code>.\nA configuration for the <code>Iso8601</code> format.\nFormat only the date.\nWhich format to use for the date.\nFormat the date and time.\nFormat the date, time, and UTC offset.\nAn encoded <code>Config</code> that can be used as a const parameter to …\nWhich components to format.\nFormat the hour only. Minutes, seconds, and nanoseconds …\nFormat only the offset hour. Requires the offset minute to …\nThe format described in ISO 8601.\nFormat the hour and minute. Seconds and nanoseconds will …\nFormat both the offset hour and minute.\nThe configuration can only be used for parsing. Using this …\nFormat only the UTC offset.\nThe precision for the UTC offset.\nUse the week-ordinal format.\nFormat the hour, minute, and second. Nanoseconds will be …\nFormat only the time.\nFormat the time and UTC offset.\nThe precision and number of decimal digits present for the …\nUse the year-week-weekday format.\nEncode the configuration, permitting it to be used as a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the format used for the date.\nSet whether the format the date, time, and/or UTC offset.\nSet the precision for the UTC offset.\nSet the precision and number of decimal digits present for …\nSet whether the format contains separators (such as <code>-</code> or <code>:</code>…\nSet whether the year is six digits.\nA type that describes a format.\nA type that can be parsed.\nAll information parsed.\nObtain the <code>day</code> component.\nReturns the argument unchanged.\nObtain the <code>hour_12</code> component.\nObtain the <code>hour_12_is_pm</code> component.\nObtain the <code>hour_24</code> component.\nCalls <code>U::from(self)</code>.\nObtain the <code>iso_week_number</code> component.\nObtain the <code>iso_year</code> component.\nObtain the <code>iso_year_last_two</code> component.\nObtain the <code>minute</code> component.\nObtain the <code>monday_week_number</code> component.\nObtain the <code>month</code> component.\nCreate a new instance of <code>Parsed</code> with no information known.\nObtain the <code>offset_hour</code> component.\nObtain the <code>offset_minute</code> component.\nObtain the <code>offset_second</code> component.\nObtain the <code>ordinal</code> component.\nParse a single component, mutating the struct. The …\nParse a single <code>BorrowedFormatItem</code> or <code>OwnedFormatItem</code>, …\nParse a sequence of <code>BorrowedFormatItem</code>s or <code>OwnedFormatItem</code>…\nParse a literal byte sequence. The remaining input is …\nObtain the <code>second</code> component.\nSet the <code>set_day</code> component.\nSet the <code>set_hour_12</code> component.\nSet the <code>set_hour_12_is_pm</code> component.\nSet the <code>set_hour_24</code> component.\nSet the <code>set_iso_week_number</code> component.\nSet the <code>set_iso_year</code> component.\nSet the <code>set_iso_year_last_two</code> component.\nSet the <code>set_minute</code> component.\nSet the <code>set_monday_week_number</code> component.\nSet the <code>set_month</code> component.\nSet the <code>set_offset_hour</code> component.\nSet the <code>set_offset_minute_signed</code> component.\nSet the <code>set_offset_second_signed</code> component.\nSet the <code>set_ordinal</code> component.\nSet the <code>set_second</code> component.\nSet the <code>set_subsecond</code> component.\nSet the <code>set_sunday_week_number</code> component.\nSet the <code>set_unix_timestamp_nanos</code> component.\nSet the <code>set_weekday</code> component.\nSet the <code>set_year</code> component.\nSet the <code>set_year_last_two</code> component.\nObtain the <code>subsecond</code> component.\nObtain the <code>sunday_week_number</code> component.\nObtain the <code>unix_timestamp_nanos</code> component.\nObtain the <code>weekday</code> component.\nSet the <code>day</code> component and return <code>self</code>.\nSet the <code>hour_12</code> component and return <code>self</code>.\nSet the <code>hour_12_is_pm</code> component and return <code>self</code>.\nSet the <code>hour_24</code> component and return <code>self</code>.\nSet the <code>iso_week_number</code> component and return <code>self</code>.\nSet the <code>iso_year</code> component and return <code>self</code>.\nSet the <code>iso_year_last_two</code> component and return <code>self</code>.\nSet the <code>minute</code> component and return <code>self</code>.\nSet the <code>monday_week_number</code> component and return <code>self</code>.\nSet the <code>month</code> component and return <code>self</code>.\nSet the <code>offset_hour</code> component and return <code>self</code>.\nSet the <code>offset_minute</code> component and return <code>self</code>.\nSet the <code>offset_second</code> component and return <code>self</code>.\nSet the <code>ordinal</code> component and return <code>self</code>.\nSet the <code>second</code> component and return <code>self</code>.\nSet the <code>subsecond</code> component and return <code>self</code>.\nSet the <code>sunday_week_number</code> component and return <code>self</code>.\nSet the <code>unix_timestamp_nanos</code> component and return <code>self</code>.\nSet the <code>weekday</code> component and return <code>self</code>.\nSet the <code>year</code> component and return <code>self</code>.\nSet the <code>year_last_two</code> component and return <code>self</code>.\nObtain the <code>year</code> component.\nObtain the <code>year_last_two</code> component.\nUse the well-known ISO 8601 format when serializing and …\nUse the well-known RFC2822 format when serializing and …\nUse the well-known RFC3339 format when serializing and …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp for the …\nDeserialize an <code>OffsetDateTime</code> from its ISO 8601 …\nUse the well-known ISO 8601 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known ISO 8601 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its ISO 8601 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its RFC2822 …\nUse the well-known RFC2822 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known RFC2822 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its RFC2822 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its RFC3339 …\nUse the well-known RFC3339 format when serializing and …\nSerialize an <code>OffsetDateTime</code> using the well-known RFC3339 …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its RFC3339 …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> using the well-known …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>OffsetDateTime</code> as a Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp for …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>OffsetDateTime</code> from its Unix timestamp with …\nTreat an <code>Option&lt;OffsetDateTime&gt;</code> as a Unix timestamp with …\nSerialize an <code>OffsetDateTime</code> as its Unix timestamp with …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp …\nDeserialize an <code>Option&lt;OffsetDateTime&gt;</code> from its Unix …\nSerialize an <code>Option&lt;OffsetDateTime&gt;</code> as its Unix timestamp\nGet the number of calendar days in a given year.\nGet the number of days in the month of a given year.\nReturns if the provided year is a leap year in the …\nGet the number of weeks in the ISO year.\nA representation of XML data in TDS. Holds the data as a …\nProvides information of the location for the schema.\nSpecifies the name of the XML schema collection to which …\nSpecifies the name of the database where the schema …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes the XML string out from the struct.\nCreate a new XmlData with the given string. Validation of …\nSpecifies the name of the relational schema containing the …\nReturns information about the schema of the XML file, if …")