"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[4340],{9680:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var r=a(6687);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=n,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return a?r.createElement(k,i(i({ref:t},c),{},{components:a})):r.createElement(k,i({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<s;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},942:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var r=a(1308),n=(a(6687),a(9680));const s={slug:"2024-05-05-redis-kafka-data-sink",title:"Building a Redis / Kafka Data Sink",author:"Chris Tsang",author_title:"SeaQL Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png",tags:["news"]},i=void 0,o={permalink:"/preview/pr-138/blog/2024-05-05-redis-kafka-data-sink",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-05-05-redis-kafka-data-sink.md",source:"@site/blog/2024-05-05-redis-kafka-data-sink.md",title:"Building a Redis / Kafka Data Sink",description:"This tutorial shows you how to use Rust to build a system that:",date:"2024-05-05T00:00:00.000Z",formattedDate:"May 5, 2024",tags:[{label:"news",permalink:"/preview/pr-138/blog/tags/news"}],readingTime:5.66,hasTruncateMarker:!1,authors:[{name:"Chris Tsang",title:"SeaQL Team",url:"https://github.com/tyt2y3",imageURL:"https://avatars.githubusercontent.com/u/1782664?v=4"}],frontMatter:{slug:"2024-05-05-redis-kafka-data-sink",title:"Building a Redis / Kafka Data Sink",author:"Chris Tsang",author_title:"SeaQL Team",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png",tags:["news"]},prevItem:{title:"The rainbow bridge between sync and async Rust",permalink:"/preview/pr-138/blog/2024-05-20-async-rainbow-bridge"},nextItem:{title:"What's new in SeaORM 1.0-rc.x",permalink:"/preview/pr-138/blog/2024-04-08-whats-new-in-seaorm-1.0-rc.x"}},l={authorsImageUrls:[void 0]},p=[{value:"1. Websocket subscription",id:"1-websocket-subscription",level:2},{value:"2. Redis / Kafka Stream Producer",id:"2-redis--kafka-stream-producer",level:2},{value:"3. SQL Data Sink",id:"3-sql-data-sink",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Rustacean Sticker Pack \ud83e\udd80",id:"rustacean-sticker-pack-",level:2}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("img",{src:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png"}),(0,n.kt)("p",null,"This tutorial shows you how to use Rust to build a system that:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Subscribe to a real-time websocket data feed"),(0,n.kt)("li",{parentName:"ol"},"Stream the data to Kafka / Redis"),(0,n.kt)("li",{parentName:"ol"},"Save the data into a SQL database")),(0,n.kt)("p",null,"Here, we'll employ a micro-services architecture, and split the functionality into two apps:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Websocket Data Feed \u2502 ---\x3e   Redis / Kafka   ---\x3e \u2502 SQL Data Sink \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,n.kt)("p",null,'In stream processing, we often use the terms "source" / "sink", but a data sink is simply a stream consumer that persists the data into a store.'),(0,n.kt)("p",null,"On the source side, we'd use ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer"},"SeaStreamer"),". On the sink side, we'd be using ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm"},"SeaORM"),". Below are the supported technologies; for the rest of this article, we'll be using ",(0,n.kt)("inlineCode",{parentName:"p"},"Redis")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"SQLite")," because they're easy to setup."),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"SeaStreamer"),(0,n.kt)("th",{parentName:"tr",align:null},"SeaORM"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"Kafka, Redis"),(0,n.kt)("td",{parentName:"tr",align:null},"MySQL, Postgres, SQLite, SQL Server",(0,n.kt)("sup",{parentName:"td",id:"fnref-1-870cc4"},(0,n.kt)("a",{parentName:"sup",href:"#fn-1-870cc4",className:"footnote-ref"},"1")))))),(0,n.kt)("p",null,"To get started, you can quickly start a Redis instance via Docker:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm --name redis -p 6379:6379 redis\n")),(0,n.kt)("h2",{id:"1-websocket-subscription"},"1. Websocket subscription"),(0,n.kt)("p",null,"Let's write a websocket subscriber in Rust. Here we'd use the awesome ",(0,n.kt)("a",{parentName:"p",href:"https://crates.io/crates/async-tungstenite"},"async-tungstenite")," library."),(0,n.kt)("p",null,"We'd subscribe to the ",(0,n.kt)("inlineCode",{parentName:"p"},"GBP/USD")," price feed from Kraken, API documentation can be found ",(0,n.kt)("a",{parentName:"p",href:"https://docs.kraken.com/websockets/#message-spread"},"here"),". NB: they're not real FX data, but should be good enough for demo."),(0,n.kt)("p",null,"Step 1, create a websocket connection:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let (mut ws, _) = async_tungstenite::tokio::connect_async("wss://ws.kraken.com/").await?;\n')),(0,n.kt)("p",null,"Step 2, send a subscription request:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'ws.send(Message::Text(\n    r#"{ "event": "subscribe", "pair": ["GBP/USD"], "subscription": { "name": "spread" } }"#.to_owned(),\n)).await?;\n')),(0,n.kt)("p",null,"Step 3, stream the messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            if data == r#"{"event":"heartbeat"}"# {\n                continue;\n            }\n            println!("{data}");\n        }\n        Some(Err(e)) => bail!("Socket error: {e}"),\n        None => bail!("Stream ended"),\n        e => bail!("Unexpected message {e:?}"),\n    }\n}\n')),(0,n.kt)("h2",{id:"2-redis--kafka-stream-producer"},"2. Redis / Kafka Stream Producer"),(0,n.kt)("p",null,"Step 1, create a ",(0,n.kt)("inlineCode",{parentName:"p"},"SeaStreamer")," instance connecting to Redis / Kafka:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let streamer = SeaStreamer::connect(\n        "redis://localhost", SeaConnectOptions::default()\n    ).await?;\n')),(0,n.kt)("p",null,"There are a bunch of different options for ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/sea-streamer-redis/latest/sea_streamer_redis/struct.RedisConnectOptions.html"},"Redis")," & ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/sea-streamer-kafka/0.5.0/sea_streamer_kafka/struct.KafkaConnectOptions.html"},"Kafka")," respectively, you can refer to SeaStreamer's ",(0,n.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaStreamer/"},"documentation"),"."),(0,n.kt)("p",null,"Step 2, create a producer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let producer: SeaProducer = streamer\n    .create_producer(\n        "GBP_USD".parse()?, // Stream Key\n        Default::default(), // Producer Options\n    )\n    .await?;\n')),(0,n.kt)("p",null,"There aren't any specific options for Producer."),(0,n.kt)("p",null,"Step 3, decode the messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let spread: SpreadMessage = serde_json::from_str(&data)?;\nlet message = serde_json::to_string(&spread)?;\n")),(0,n.kt)("p",null,"Here, we use the awesome ",(0,n.kt)("a",{parentName:"p",href:"https://crates.io/crates/serde"},(0,n.kt)("inlineCode",{parentName:"a"},"serde"))," library to perform message parsing and conversion:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'// The raw message looks like: [80478222,["1.25475","1.25489","1714946803.030088","949.74917071","223.36195920"],"spread","GBP/USD"]\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct SpreadMessage {\n    #[allow(dead_code)]\n    #[serde(skip_serializing)]\n    channel_id: u32, // placeholder; not needed\n    spread: Spread, // nested object\n    channel_name: String,\n    pair: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Spread {\n    bid: Decimal,\n    ask: Decimal,\n    #[serde(with = "timestamp_serde")] // custom serde\n    timestamp: Timestamp,\n    bid_vol: Decimal,\n    ask_vol: Decimal,\n}\n')),(0,n.kt)("p",null,"Step 4, send the messages:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            let spread: SpreadMessage = serde_json::from_str(&data)?;\n            let message = serde_json::to_string(&spread)?;\n            producer.send(message)?; // <--\n        }\n    }\n}\n")),(0,n.kt)("p",null,"Note that the ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/sea-streamer/latest/sea_streamer/trait.Producer.html#method.send"},(0,n.kt)("inlineCode",{parentName:"a"},"producer.send"))," call is not ",(0,n.kt)("inlineCode",{parentName:"p"},"async/await"),", and this is a crucial detail! This removes the stream processing bottleneck. Behind the scene, messages will be buffered and handled on a different thread, so that your input stream can run as close to real-time as possible."),(0,n.kt)("p",null,"Here is the complete ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/price-feed"},(0,n.kt)("inlineCode",{parentName:"a"},"price-feed"))," app which you can checkout from the SeaStreamer repository:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-log"},'$ cd examples/price-feed\n$ cargo run\n\nConnecting ..\nConnected.\nSubscribed.\n{"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n..\n')),(0,n.kt)("h2",{id:"3-sql-data-sink"},"3. SQL Data Sink"),(0,n.kt)("p",null,"Step 1, create a stream consumer:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"let streamer = SeaStreamer::connect(streamer_uri, Default::default()).await?;\n\nlet consumer = streamer\n    .create_consumer(&[stream_key], SeaConsumerOptions::default())\n    .await?;\n")),(0,n.kt)("p",null,"There are a bunch of different options for ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/sea-streamer-redis/latest/sea_streamer_redis/struct.RedisConsumerOptions.html"},"Redis")," & ",(0,n.kt)("a",{parentName:"p",href:"https://docs.rs/sea-streamer-kafka/0.5.0/sea_streamer_kafka/struct.KafkaConsumerOptions.html"},"Kafka")," respectively, you can refer to SeaStreamer's ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/"},"examples"),". Here we use the default, which is a real-time state-less stream consumer."),(0,n.kt)("p",null,"Step 2, create a database:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'let mut opt = ConnectOptions::new("sqlite://my_db.sqlite?mode=rwc"));\nopt.max_connections(1).sqlx_logging(false);\nlet db = Database::connect(opt).await?;\n')),(0,n.kt)("p",null,"We set ",(0,n.kt)("inlineCode",{parentName:"p"},"max_connections")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"1"),", because our data sink will not do concurrent inserts anyway."),(0,n.kt)("p",null,"Here is the ",(0,n.kt)("inlineCode",{parentName:"p"},"Entity"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Clone, PartialEq, Eq, DeriveEntityModel, Deserialize)]\n#[sea_orm(table_name = "event")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(default)]\n    pub id: i32,\n    pub timestamp: String,\n    pub bid: String,\n    pub ask: String,\n    pub bid_vol: String,\n    pub ask_vol: String,\n}\n')),(0,n.kt)("p",null,"The table shall be named ",(0,n.kt)("inlineCode",{parentName:"p"},"event")," and we derive ",(0,n.kt)("inlineCode",{parentName:"p"},"Deserialize")," on the Model."),(0,n.kt)("p",null,"We will use the following helper method to create the database table, where the schema is derived from the Entity:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},'async fn create_tables(db: &DbConn) -> Result<(), DbErr> {\n    let builder = db.get_database_backend();\n    let schema = Schema::new(builder);\n\n    let stmt = builder.build(\n        schema.create_table_from_entity(Entity).if_not_exists(),\n    );\n    log::info!("{stmt}");\n    db.execute(stmt).await?;\n\n    Ok(())\n}\n')),(0,n.kt)("p",null,"This is especially handy for SQLite, where the app owns the database schema. For other databases, you'd probably use the ",(0,n.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaORM/docs/next/migration/setting-up-migration/"},"SeaORM migration system"),"."),(0,n.kt)("p",null,"Step 3, insert the data into database:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-rust"},"loop {\n    let message = consumer.next().await?;\n    let payload = message.message();\n    let json = payload.as_str()?;\n    let item: Item = serde_json::from_str(json)?;\n    let mut spread = item.spread.into_active_model();\n    spread.id = NotSet; // let the db assign primary key\n    spread.save(&db).await?;\n}\n")),(0,n.kt)("p",null,"In a few lines of code, we:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"receive the message from Redis"),(0,n.kt)("li",{parentName:"ol"},"decode the message as JSON"),(0,n.kt)("li",{parentName:"ol"},"convert the message into a SeaORM Model"),(0,n.kt)("li",{parentName:"ol"},"insert the Model into database")),(0,n.kt)("p",null,"Run the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/sea-orm-sink"},(0,n.kt)("inlineCode",{parentName:"a"},"sea-orm-sink"))," app in another terminal:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-log"},'$ cd examples/sea-orm-sink\n$ RUST_LOG=info cargo run\n\n[INFO  sea_streamer_sea_orm_sink] CREATE TABLE IF NOT EXISTS "event" ( "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "timestamp" varchar NOT NULL, "bid" varchar NOT NULL, "ask" varchar NOT NULL, "bid_vol" varchar NOT NULL, "ask_vol" varchar NOT NULL )\n[INFO  sea_streamer_sea_orm_sink] {"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n')),(0,n.kt)("p",null,"That's it! Now you can inspect the data with your favourite database GUI and write some SQL queries:"),(0,n.kt)("img",{alt:"screenshot of SQLite database",src:"/blog/img/2024-05-05-redis-kafka-data-sink-sqlite.png"}),(0,n.kt)("h2",{id:"conclusion"},"Conclusion"),(0,n.kt)("p",null,"In this article, we covered:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Micro-services architecture in stream processing"),(0,n.kt)("li",{parentName:"ol"},"Async real-time programming in Rust"),(0,n.kt)("li",{parentName:"ol"},"The awesomeness of the SeaQL and Rust ecosystem",(0,n.kt)("sup",{parentName:"li",id:"fnref-2-870cc4"},(0,n.kt)("a",{parentName:"sup",href:"#fn-2-870cc4",className:"footnote-ref"},"2")))),(0,n.kt)("p",null,"Here are a few suggestions how you can take it from here:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},'Stream the data to a "big database" like MySQL or Postgres'),(0,n.kt)("li",{parentName:"ol"},"Subscribe to more streams and sink to more tables"),(0,n.kt)("li",{parentName:"ol"},"Buffer the events and insert the data in batches to achieve higher throughput, further reads:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs"},"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs"},"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs"))))),(0,n.kt)("h2",{id:"rustacean-sticker-pack-"},"Rustacean Sticker Pack \ud83e\udd80"),(0,n.kt)("p",null,"The Rustacean Sticker Pack is the perfect way to express your passion for Rust.\nOur stickers are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"),(0,n.kt)("p",null,"Moreover, all proceeds contributes directly to the ongoing development of SeaQL projects."),(0,n.kt)("p",null,"Sticker Pack Contents:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG"),(0,n.kt)("li",{parentName:"ul"},"Mascot of SeaQL: Terres the Hermit Crab"),(0,n.kt)("li",{parentName:"ul"},"Mascot of Rust: Ferris the Crab"),(0,n.kt)("li",{parentName:"ul"},"The Rustacean word")),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/sticker-pack/"},"Support SeaQL and get a Sticker Pack!")),(0,n.kt)("a",{href:"https://www.sea-ql.org/sticker-pack/"},(0,n.kt)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})),(0,n.kt)("div",{className:"footnotes"},(0,n.kt)("hr",{parentName:"div"}),(0,n.kt)("ol",{parentName:"div"},(0,n.kt)("li",{parentName:"ol",id:"fn-1-870cc4"},"via ",(0,n.kt)("a",{parentName:"li",href:"https://www.sea-ql.org/SeaORM-X/"},"SeaORM X"),(0,n.kt)("a",{parentName:"li",href:"#fnref-1-870cc4",className:"footnote-backref"},"\u21a9")),(0,n.kt)("li",{parentName:"ol",id:"fn-2-870cc4"},(0,n.kt)("a",{parentName:"li",href:"https://www.sea-ql.org/SeaStreamer/docs/introduction/intro-to-streams/#why-rust"},"Why Rust?"),(0,n.kt)("a",{parentName:"li",href:"#fnref-2-870cc4",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0}}]);