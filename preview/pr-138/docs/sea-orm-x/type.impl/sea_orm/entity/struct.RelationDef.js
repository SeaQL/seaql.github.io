(function() {
    var type_impls = Object.fromEntries([["sea_orm",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RelationDef\" class=\"impl\"><a href=\"#impl-Debug-for-RelationDef\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sea_orm/entity/struct.RelationDef.html\" title=\"struct sea_orm::entity::RelationDef\">RelationDef</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sea_orm::entity::link::LinkDef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CRelationBuilder%3CE,+R%3E%3E-for-RelationDef\" class=\"impl\"><a href=\"#impl-From%3CRelationBuilder%3CE,+R%3E%3E-for-RelationDef\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, R&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"sea_orm/entity/struct.RelationBuilder.html\" title=\"struct sea_orm::entity::RelationBuilder\">RelationBuilder</a>&lt;E, R&gt;&gt; for <a class=\"struct\" href=\"sea_orm/entity/struct.RelationDef.html\" title=\"struct sea_orm::entity::RelationDef\">RelationDef</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"sea_orm/entity/trait.EntityTrait.html\" title=\"trait sea_orm::entity::EntityTrait\">EntityTrait</a>,\n    R: <a class=\"trait\" href=\"sea_orm/entity/trait.EntityTrait.html\" title=\"trait sea_orm::entity::EntityTrait\">EntityTrait</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(b: <a class=\"struct\" href=\"sea_orm/entity/struct.RelationBuilder.html\" title=\"struct sea_orm::entity::RelationBuilder\">RelationBuilder</a>&lt;E, R&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<RelationBuilder<E, R>>","sea_orm::entity::link::LinkDef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RelationDef\" class=\"impl\"><a href=\"#impl-RelationDef\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"sea_orm/entity/struct.RelationDef.html\" title=\"struct sea_orm::entity::RelationDef\">RelationDef</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rev\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_orm/entity/struct.RelationDef.html#tymethod.rev\" class=\"fn\">rev</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverse this relation (swap from and to)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_alias\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_orm/entity/struct.RelationDef.html#tymethod.from_alias\" class=\"fn\">from_alias</a>&lt;A&gt;(self, alias: A) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"sea_query/types/trait.IntoIden.html\" title=\"trait sea_query::types::IntoIden\">IntoIden</a>,</div></h4></section></summary><div class=\"docblock\"><p>Express the relation from a table alias.</p>\n<p>This is a shorter and more discoverable equivalent to modifying <code>from_tbl</code> field by hand.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Here’s a short synthetic example.\nIn real life you’d use aliases when the table name comes up twice and you need to disambiguate,\ne.g. https://github.com/SeaQL/sea-orm/discussions/2133</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_orm::{\n    entity::<span class=\"kw-2\">*</span>,\n    query::<span class=\"kw-2\">*</span>,\n    tests_cfg::{cake, cake_filling},\n    DbBackend,\n};\n<span class=\"kw\">use </span>sea_query::Alias;\n\n<span class=\"kw\">let </span>cf = Alias::new(<span class=\"string\">\"cf\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        <span class=\"string\">\"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\"</span>,\n        <span class=\"string\">\"LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`\"</span>,\n        <span class=\"string\">\"LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`\"</span>,\n    ]\n    .join(<span class=\"string\">\" \"</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.on_condition\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_orm/entity/struct.RelationDef.html#tymethod.on_condition\" class=\"fn\">on_condition</a>&lt;F&gt;(self, f: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"type\" href=\"sea_orm/query/type.DynIden.html\" title=\"type sea_orm::query::DynIden\">DynIden</a>, <a class=\"type\" href=\"sea_orm/query/type.DynIden.html\" title=\"type sea_orm::query::DynIden\">DynIden</a>) -&gt; <a class=\"struct\" href=\"sea_orm/query/struct.Condition.html\" title=\"struct sea_orm::query::Condition\">Condition</a> + 'static + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Set custom join ON condition.</p>\n<p>This method takes a closure with two parameters\ndenoting the left-hand side and right-hand side table in the join expression.</p>\n<p>This replaces the current condition if it is already set.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_orm::{entity::<span class=\"kw-2\">*</span>, query::<span class=\"kw-2\">*</span>, DbBackend, tests_cfg::{cake, cake_filling}};\n<span class=\"kw\">use </span>sea_query::{Expr, IntoCondition};\n\n<span class=\"macro\">assert_eq!</span>(\n    cake::Entity::find()\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake\n                .def()\n                .rev()\n                .on_condition(|_left, right| {\n                    Expr::col((right, cake_filling::Column::CakeId))\n                        .gt(<span class=\"number\">10i32</span>)\n                        .into_condition()\n                })\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        <span class=\"string\">\"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\"</span>,\n        <span class=\"string\">\"LEFT JOIN `cake_filling` ON `cake`.`id` = `cake_filling`.`cake_id` AND `cake_filling`.`cake_id` &gt; 10\"</span>,\n    ]\n    .join(<span class=\"string\">\" \"</span>)\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.condition_type\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_orm/entity/struct.RelationDef.html#tymethod.condition_type\" class=\"fn\">condition_type</a>(self, condition_type: <a class=\"enum\" href=\"sea_query/query/condition/enum.ConditionType.html\" title=\"enum sea_query::query::condition::ConditionType\">ConditionType</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the condition type of join on expression</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_orm::{entity::<span class=\"kw-2\">*</span>, query::<span class=\"kw-2\">*</span>, DbBackend, tests_cfg::{cake, cake_filling}};\n<span class=\"kw\">use </span>sea_query::{Expr, IntoCondition, ConditionType};\n\n<span class=\"macro\">assert_eq!</span>(\n    cake::Entity::find()\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake\n                .def()\n                .rev()\n                .condition_type(ConditionType::Any)\n                .on_condition(|_left, right| {\n                    Expr::col((right, cake_filling::Column::CakeId))\n                        .gt(<span class=\"number\">10i32</span>)\n                        .into_condition()\n                })\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        <span class=\"string\">\"SELECT `cake`.`id`, `cake`.`name` FROM `cake`\"</span>,\n        <span class=\"string\">\"LEFT JOIN `cake_filling` ON `cake`.`id` = `cake_filling`.`cake_id` OR `cake_filling`.`cake_id` &gt; 10\"</span>,\n    ]\n    .join(<span class=\"string\">\" \"</span>)\n);</code></pre></div>\n</div></details></div></details>",0,"sea_orm::entity::link::LinkDef"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[10515]}