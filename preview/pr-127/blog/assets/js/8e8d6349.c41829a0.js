"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[9095],{9680:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(6687);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=p(a),u=r,m=h["".concat(l,".").concat(u)]||h[u]||c[u]||o;return a?n.createElement(m,s(s({ref:t},d),{},{components:a})):n.createElement(m,s({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},8066:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(1308),r=(a(6687),a(9680));const o={slug:"2024-08-01-graphql-admin-dashboard-with-loco-seaography",title:"GraphQL based Admin Dashboard with Loco and Seaography",author:"Billy Chan",author_title:"SeaQL Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png",tags:["news"]},s=void 0,i={permalink:"/preview/pr-127/blog/2024-08-01-graphql-admin-dashboard-with-loco-seaography",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-08-01-graphql-admin-dashboard-with-loco-seaography.md",source:"@site/blog/2024-08-01-graphql-admin-dashboard-with-loco-seaography.md",title:"GraphQL based Admin Dashboard with Loco and Seaography",description:"In this tutorial, we would develop a GraphQL based admin dashboard with Seaography and Loco.",date:"2024-08-01T00:00:00.000Z",formattedDate:"August 1, 2024",tags:[{label:"news",permalink:"/preview/pr-127/blog/tags/news"}],readingTime:5.97,hasTruncateMarker:!1,authors:[{name:"Billy Chan",title:"SeaQL Team",url:"https://github.com/billy1624",imageURL:"https://avatars.githubusercontent.com/u/30400950?v=4"}],frontMatter:{slug:"2024-08-01-graphql-admin-dashboard-with-loco-seaography",title:"GraphQL based Admin Dashboard with Loco and Seaography",author:"Billy Chan",author_title:"SeaQL Team",author_url:"https://github.com/billy1624",author_image_url:"https://avatars.githubusercontent.com/u/30400950?v=4",image:"https://www.sea-ql.org/blog/img/Loco%20x%20SeaORM.png",tags:["news"]},nextItem:{title:"Adding GraphQL Support to Loco with Seaography",permalink:"/preview/pr-127/blog/2024-07-01-graphql-support-with-loco-seaography"}},l={authorsImageUrls:[void 0]},p=[{value:"What is Seaography",id:"what-is-seaography",level:2},{value:"Setup React-Admin Frontend Boilerplate",id:"setup-react-admin-frontend-boilerplate",level:2},{value:"Add NPM dependency",id:"add-npm-dependency",level:2},{value:"GraphQL Data Provider",id:"graphql-data-provider",level:2},{value:"Customize React-Admin Frontend",id:"customize-react-admin-frontend",level:2},{value:"Auth Free GraphQL Endpoint",id:"auth-free-graphql-endpoint",level:2},{value:"Put It into Action!",id:"put-it-into-action",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2}],d={toc:p};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{src:"/blog/img/Loco%20x%20SeaORM.png"}),(0,r.kt)("p",null,"In this tutorial, we would develop a GraphQL based admin dashboard with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography"},"Seaography")," and Loco."),(0,r.kt)("p",null,"Read our first and second tutorial of the series, ",(0,r.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/blog/2024-05-28-getting-started-with-loco-seaorm/"},"Getting Started with Loco & SeaORM"),", ",(0,r.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/blog/2024-06-24-graphql-support-with-loco-seaography/"},"Adding GraphQL Support to Loco with Seaography"),", if you haven't."),(0,r.kt)("p",null,"The full source code can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/tree/master/examples/loco_seaography_admin_dashboard"},"here"),"."),(0,r.kt)("h2",{id:"what-is-seaography"},"What is Seaography"),(0,r.kt)("p",null,"Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM entities. It ships with a CLI tool that can generate ready-to-compile Rust GraphQL servers from existing MySQL, Postgres and SQLite databases."),(0,r.kt)("h2",{id:"setup-react-admin-frontend-boilerplate"},"Setup React-Admin Frontend Boilerplate"),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://marmelab.com/react-admin/"},(0,r.kt)("inlineCode",{parentName:"a"},"React-Admin"))," as the frontend framework. It provides a convenient boilerplate to start with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm init react-admin frontend\n\nSelect the data provider you want to use, and validate with Enter:\n\u276f None\n  I'll configure the data provider myself.\n\nSelect the auth provider you want to use, and validate with Enter:\n\u276f Hard coded local username/password\n\nEnter the name of a resource you want to add, and validate with Enter (leave empty to finish):\n\u276f (Leave empty and press Enter)\n\nHow do you want to install the dependencies?\n\u276f Using npm\n")),(0,r.kt)("p",null,"Run the boilerplate then visit ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:5173/"},"http://localhost:5173/"),", you should see the welcome page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd frontend\n\n$ npm install\n\n$ npm run dev\n\n> dev\n> vite\n\n  VITE v4.5.3  ready in 440 ms\n\n  \u279c  Local:   http://localhost:5173/\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20Welcome.png",alt:null})),(0,r.kt)("p",null,"Now, we want to display the ",(0,r.kt)("inlineCode",{parentName:"p"},"React-Admin")," data table template with mock data. First, we need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"ra-data-json-server")," dependency:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm install ra-data-json-server\n")),(0,r.kt)("p",null,"To prepare the mock data loader, we create a new file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="frontend/src/dataProvider.ts"',title:'"frontend/src/dataProvider.ts"'},"import jsonServerProvider from 'ra-data-json-server';\n\nexport const dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n")),(0,r.kt)("p",null,"Then, we change the UI file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="frontend/src/index.tsx"',title:'"frontend/src/index.tsx"'},"+ import { Admin, Resource, ListGuesser, ShowGuesser } from 'react-admin';\n+ import { dataProvider } from './dataProvider';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n-   <React.StrictMode>\n-       <App />\n-   </React.StrictMode>\n+   <Admin dataProvider={dataProvider}>\n+       <Resource name=\"users\" list={ListGuesser} show={ShowGuesser} />\n+   </Admin>\n);\n")),(0,r.kt)("p",null,"Run the boilerplate now you should see the user listing page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm run dev\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20List.png",alt:null})),(0,r.kt)("p",null,"Click on each row to view its detail page."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20Demo%20View.png",alt:null})),(0,r.kt)("h2",{id:"add-npm-dependency"},"Add NPM dependency"),(0,r.kt)("p",null,"Next, we start to integrate our Loco and Seaography backend with React-Admin frontend. We use ",(0,r.kt)("inlineCode",{parentName:"p"},"axios")," for sending POST request to our GraphQL backend:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm install axios\n")),(0,r.kt)("h2",{id:"graphql-data-provider"},"GraphQL Data Provider"),(0,r.kt)("p",null,"Then, we can start implementing the GraphQL data provider by replacing the content of ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="frontend/src/dataProvider.ts"',title:'"frontend/src/dataProvider.ts"'},"- import jsonServerProvider from 'ra-data-json-server';\n- \n- export const dataProvider = jsonServerProvider('https://jsonplaceholder.typicode.com');\n")),(0,r.kt)("p",null,"Integrating with our GraphQL endpoint at ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000/api/graphql"},"http://localhost:3000/api/graphql"),". We implemented two handler below, one fetch data for the post listing and the other to fetch data for a single post:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="frontend/src/dataProvider.ts"',title:'"frontend/src/dataProvider.ts"'},"import { DataProvider } from \"react-admin\";\nimport axios from 'axios';\n\nconst apiUrl = 'http://localhost:3000/api/graphql';\n\nexport const dataProvider: DataProvider = {\n    // Fetch data for post listing\n    getList: (resource, params) => {\n        // Paginator status\n        const { page, perPage } = params.pagination;\n        // Sorter status\n        const { field, order } = params.sort;\n\n        // POST request to GraphQL endpoint\n        return axios.post(apiUrl, {\n            query: `\n            query {\n              notes (\n                orderBy: { ${field}: ${order} },\n                pagination: { page: { limit: ${perPage}, page: ${page - 1} }}\n              ) {\n                nodes {\n                  id\n                  title\n                  content\n                }\n                paginationInfo {\n                  pages\n                  current\n                  offset\n                  total\n                }\n              }\n            }\n            `\n        })\n            .then((response) => {\n                // Unwrap the response\n                const { nodes, paginationInfo } = response.data.data.notes;\n                // Return the data array and total number of pages\n                return {\n                    data: nodes,\n                    total: paginationInfo.total,\n                };\n            });\n    },\n\n    // Fetch data for a single post\n    getOne: (resource, params) => {\n        // POST request to GraphQL endpoint\n        return axios.post(apiUrl, {\n            query: `\n            query {\n              notes(filters: {id: {eq: ${params.id}}}) {\n                nodes {\n                  id\n                  title\n                  content\n                }\n              }\n            }\n            `\n        })\n            .then((response) => {\n                // Unwrap the response\n                const { nodes } = response.data.data.notes;\n                // Return the one and only data\n                return {\n                    data: nodes[0],\n                };\n            });\n    },\n\n    getMany: (resource, params) => { },\n\n    getManyReference: (resource, params) => { },\n\n    update: (resource, params) => { },\n\n    updateMany: (resource, params) => { },\n\n    create: (resource, params) => { },\n\n    delete: (resource, params) => { },\n\n    deleteMany: (resource, params) => { },\n};\n")),(0,r.kt)("h2",{id:"customize-react-admin-frontend"},"Customize React-Admin Frontend"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="frontend/src/index.tsx"',title:'"frontend/src/index.tsx"'},"- ReactDOM.createRoot(document.getElementById('root')!).render(\n-    <Admin dataProvider={dataProvider}>\n-        <Resource name=\"users\" list={ListGuesser} show={ShowGuesser} />\n-    </Admin>\n- );\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="frontend/src/index.tsx"',title:'"frontend/src/index.tsx"'},'import ReactDOM from \'react-dom/client\';\nimport { Admin, Resource, List, Datagrid, TextField, Show, SimpleShowLayout } from \'react-admin\';\nimport { dataProvider } from \'./dataProvider\';\n\nconst PostList = () => (\n    <List>\n        <Datagrid bulkActionButtons={false}>\n            <TextField source="id" />\n            <TextField source="title" />\n            <TextField source="content" />\n        </Datagrid>\n    </List>\n);\n\nconst PostShow = () => (\n    <Show>\n        <SimpleShowLayout>\n            <TextField source="id" />\n            <TextField source="title" />\n            <TextField source="content" />\n        </SimpleShowLayout>\n    </Show>\n);\n\nReactDOM.createRoot(document.getElementById(\'root\')!).render(\n    <Admin dataProvider={dataProvider}>\n        <Resource name="posts" list={PostList} show={PostShow} />\n    </Admin>\n);\n')),(0,r.kt)("h2",{id:"auth-free-graphql-endpoint"},"Auth Free GraphQL Endpoint"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="backend/src/controllers/graphql.rs"',title:'"backend/src/controllers/graphql.rs"'},"async fn graphql_handler(\n-   _auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    const DEPTH: usize = 1_000;\n    const COMPLEXITY: usize = 1_000;\n    // Construct the the GraphQL query root\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    // Execute GraphQL request and fetch the results\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n")),(0,r.kt)("h2",{id:"put-it-into-action"},"Put It into Action!"),(0,r.kt)("p",null,"Run the React-Admin frontend:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd frontend\n$ npm run dev\n")),(0,r.kt)("p",null,"Run the Loco backend:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ cd backend\n$ cargo run start\n")),(0,r.kt)("p",null,"Visit ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:5173/"},"http://localhost:5173/"),", you should see the post listing page:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List.png",alt:null})),(0,r.kt)("p",null,"We are fetching data from the GraphQL backend:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List%20API.png",alt:null})),(0,r.kt)("p",null,"Click on column header to sort by the column in ascending or descending order:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20List%20Sorted.png",alt:null})),(0,r.kt)("p",null,"Click on each row to view its detail page:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://www.sea-ql.org/blog/img/Loco%20x%20Seaography%20Dashboard%20View.png",alt:null})),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Adding GraphQL support to Loco application is easy with the help of Seaography. It is an ergonomic library that turns SeaORM entities into GraphQL nodes and provides a set of utilities and combined with a code generator makes GraphQL API building a breeze."),(0,r.kt)("h2",{id:"sql-server-support"},"SQL Server Support"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaORM-X/"},"SQL Server for SeaORM")," is now available as a closed beta. If you are interested`, please signup ",(0,r.kt)("a",{parentName:"p",href:"https://forms.office.com/r/1MuRPJmYBR"},"here"),"."),(0,r.kt)("p",null,"Migrating from ",(0,r.kt)("inlineCode",{parentName:"p"},"sea-orm")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"sea-orm-x")," is straightforward with two simple steps. First, update the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"sea-orm")," dependency to ",(0,r.kt)("inlineCode",{parentName:"p"},"sea-orm-x")," and enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlz-mssql")," feature. Note that you might need to patch SeaORM dependency for the upstream dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml",metastring:'title="Cargo.toml"',title:'"Cargo.toml"'},'sea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x", features = ["runtime-async-std-rustls", "sqlz-mssql"] }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n\n# Patch SeaORM dependency for the upstream dependencies\n[patch.crates-io]\nsea-orm = { path = "<SEA_ORM_X_ROOT>/sea-orm-x" }\nsea-orm-migration = { path = "<SEA_ORM_X_ROOT>/sea-orm-x/sea-orm-migration" }\n')),(0,r.kt)("p",null,"Second, update the connection string to connect to the MSSQL database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"# If the schema is `dbo`, simply write:\nmssql://username:password@host/database\n\n# Or, specify the schema name by providing an extra `currentSchema` query param.\nmssql://username:password@host/database?currentSchema=my_schema\n\n# You can trust peer certificate by providing an extra trustCertificate query param.\nmssql://username:password@host/database?trustCertificate=true\n")),(0,r.kt)("p",null,"SeaORM X has full Loco support and integrate seamlessly with many web frameworks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Actix"),(0,r.kt)("li",{parentName:"ul"},"Axum"),(0,r.kt)("li",{parentName:"ul"},"Async GraphQL"),(0,r.kt)("li",{parentName:"ul"},"jsonrpsee"),(0,r.kt)("li",{parentName:"ul"},"Loco"),(0,r.kt)("li",{parentName:"ul"},"Poem"),(0,r.kt)("li",{parentName:"ul"},"Salvo"),(0,r.kt)("li",{parentName:"ul"},"Tonic")),(0,r.kt)("p",null,"Happy Coding!"))}c.isMDXComponent=!0}}]);