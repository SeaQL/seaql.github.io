"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[65257],{77162:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(22374);const l={},i=s.createContext(l);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},90060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"advanced-query/custom-select","title":"Custom Select","description":"By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.","source":"@site/versioned_docs/version-0.7.x/09-advanced-query/01-custom-select.md","sourceDirName":"09-advanced-query","slug":"/advanced-query/custom-select","permalink":"/preview/pr-147/SeaORM/docs/0.7.x/advanced-query/custom-select","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.7.x/09-advanced-query/01-custom-select.md","tags":[],"version":"0.7.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1749650794000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Using SQLite","permalink":"/preview/pr-147/SeaORM/docs/0.7.x/write-test/sqlite"},"next":{"title":"Conditional Expressions","permalink":"/preview/pr-147/SeaORM/docs/0.7.x/advanced-query/conditional-expression"}}');var l=t(88790),i=t(77162);const o={},c="Custom Select",r={},a=[{value:"Clear Default Selection",id:"clear-default-selection",level:2},{value:"Select Some Attributes Only",id:"select-some-attributes-only",level:2},{value:"Select Custom Expressions",id:"select-custom-expressions",level:2},{value:"Handling Custom Selects",id:"handling-custom-selects",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"custom-select",children:"Custom Select"})}),"\n",(0,l.jsxs)(n.p,{children:["By default, SeaORM will select all columns defined in the ",(0,l.jsx)(n.code,{children:"Column"})," enum. You can override the defaults if you wish to select certain columns only."]}),"\n",(0,l.jsx)(n.h2,{id:"clear-default-selection",children:"Clear Default Selection"}),"\n",(0,l.jsxs)(n.p,{children:["Clear the default selection by calling the ",(0,l.jsx)(n.code,{children:"select_only"})," method if needed. Then, you can select some of the attributes or even custom expressions after it."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'// Selecting all columns\nassert_eq!(\n    cake::Entity::find()\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"select-some-attributes-only",children:"Select Some Attributes Only"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.code,{children:"select_only"})," and ",(0,l.jsx)(n.code,{children:"column"})," methods together to select only the attributes you want."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'// Selecting the name column only\nassert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column(cake::Column::Name)\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."name" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"select-custom-expressions",children:"Select Custom Expressions"}),"\n",(0,l.jsxs)(n.p,{children:["Select any custom expression with ",(0,l.jsx)(n.code,{children:"column_as"})," method, it takes any ",(0,l.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/expr/enum.SimpleExpr.html",children:(0,l.jsx)(n.code,{children:"sea_query::SimpleExpr"})})," and an alias. Use ",(0,l.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/expr/struct.Expr.html",children:(0,l.jsx)(n.code,{children:"sea_query::Expr"})})," helper to build ",(0,l.jsx)(n.code,{children:"SimpleExpr"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'use sea_query::{Alias, Expr};\n\nassert_eq!(\n    cake::Entity::find()\n        .column_as(Expr::col(cake::Column::Id).max().sub(Expr::col(cake::Column::Id)), "id_diff")\n        .column_as(Expr::cust("CURRENT_TIMESTAMP"), "current_time")\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name", MAX("id") - "id" AS "id_diff", CURRENT_TIMESTAMP AS "current_time" FROM "cake""#\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"handling-custom-selects",children:"Handling Custom Selects"}),"\n",(0,l.jsxs)(n.p,{children:["You can use a custom ",(0,l.jsx)(n.code,{children:"struct"})," derived from the ",(0,l.jsx)(n.code,{children:"FromQueryResult"})," trait to handle the result of a complex query. It is especially useful when dealing with custom columns or multiple joins which cannot directly be converted into models. It may be used to receive the result of any query, even raw SQL."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{FromQueryResult, JoinType, RelationTrait};\nuse sea_query::Expr;\n\n#[derive(FromQueryResult)]\nstruct CakeAndFillingCount {\n    id: i32,\n    name: String,\n    count: i32,\n}\n\nlet cake_counts: Vec<CakeAndFillingCount> = cake::Entity::find()\n    .column_as(filling::Column::Id.count(), "count")\n    .join_rev(\n        // construct `RelationDef` on the fly\n        JoinType::InnerJoin,\n        cake_filling::Entity::belongs_to(cake::Entity)\n            .from(cake_filling::Column::CakeId)\n            .to(cake::Column::Id)\n            .into()\n    )\n    // reuse a `Relation` from existing Entity\n    .join(JoinType::InnerJoin, cake_filling::Relation::Filling.def())\n    .group_by(cake::Column::Id)\n    .into_model::<CakeAndFillingCount>()\n    .all(db)\n    .await?;\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);