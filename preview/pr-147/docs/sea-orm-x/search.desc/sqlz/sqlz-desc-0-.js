searchState.loadedDescShard("sqlz", 0, "This is proprietary software. If you are granted an “…\nTraits to represent a database driver.\nTypes for working with errors produced by SQLz.\nProvides the connection pool for asynchronous SQLz …\nReturns a valid positional index into the row or …\nGets the column name or alias.\nGets the column ordinal.\nGets the type information for the column.\nRepresents a single database connection.\nBegin a new transaction or establish a savepoint within …\nExplicitly close this database connection.\nImmediately close the connection without sending a …\nEstablish a new database connection with the options …\nEstablish a new database connection.\nEstablish a new database connection with the provided …\nEntirely disables statement logging (both slow and …\nLog executed statements with a duration above the …\nLog executed statements with the specified <code>level</code>\nChecks if a connection to the database is still valid.\nExecute the function inside a transaction.\nThe concrete <code>Column</code> implementation for this database.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nThe concrete <code>Query</code> implementation for this database.\nThe concrete <code>Row</code> implementation for this database.\nThe concrete <code>TransactionManager</code> implementation for this …\nThe concrete <code>TypeInfo</code> implementation for this database.\nError occurred while decoding a value from a specific …\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nError returned from the database.\nAn error that was returned from the database.\nError occurred while decoding a value.\nContains the error value\nRepresents all the ways a method can fail within SQLz.\nError communicating with the database backend.\nContains the success value\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nA specialized <code>Result</code> type for SQLz.\nNo rows returned by a query that expected to return at …\nError occurred while attempting to establish a TLS …\nType in query doesn’t exist. Likely due to typo or …\nAn unexpected <code>NULL</code> was encountered during decoding.\nA background worker has crashed.\nThe (SQLSTATE) code for the error.\nReturns the name of the constraint that triggered the …\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe primary, human-readable error message.\nDowncast this generic database error to a specific …\nDowncast a reference to this generic database error to a …\nA binary value.\nA string value.\nA variable binary value.\nA large variable string value.\nA bit or boolean value.\nA bit value in a variable-length type.\nA n-bit date value (TDS 7.3).\nA TDS 7.2 datetime value.\nA n-bit datetime2 value (TDS 7.3).\nA 32-bit datetime value.\nA n-bit datetime value with an offset (TDS 7.3).\nA n-bit datetime value (TDS 7.2).\nA decimal value (same as <code>Numericn</code>).\nA 32-bit floating point value.\nA 64-bit floating point value.\nA n-bit floating point value.\nA unique identifier, UUID.\nA image value (deprecated).\nAn 8-bit integer value.\nA 16-bit integer value.\nA 32-bit integer value.\nA 64-bit integer value.\nN-bit integer value (variable).\nMoney value.\nA 32-bit money value.\nMSSQL database driver.\nAn alias for <code>Pool</code>, specialized for MSSQL.\nAn alias for <code>PoolOptions</code>, specialized for MSSQL.\nAn alias for <code>Transaction</code>, specialized for MSSQL.\nImplementation of <code>TransactionManager</code> for MSSQL.\nThe type of the column.\nA string value with UTF-16 encoding.\nA text value with UTF-16 encoding (deprecated).\nA variable string value with UTF-16 encoding.\nThe column doesn’t have a specified type.\nRepresent a sql Decimal / Numeric type. It is stored in a …\nA numeric value (same as <code>Decimaln</code>).\nAn SQL variant type.\nA text value (deprecated).\nA n-bit time value (TDS 7.3).\nUser-defined type.\nA XML value.\nExtract the decimal part.\nExecute the query and return the total number of rows …\nExecute multiple queries and return the rows affected from …\nExecute the query and return the generated rows as a …\nExecute the query and return all the generated rows, …\nExecute multiple queries and return the generated results …\nExecute the query and returns exactly one row.\nExecute the query and returns at most one row.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWill panic if called twice\nExtract the integer part.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Numeric value.\nThe precision of the <code>Number</code> as a number of digits.\nMake a SQL query, with no arguments.\nMake a SQL query, with the given arguments.\nThe scale (where is the decimal point) of the value.\nThe internal integer value\nA future that resolves when the pool is closed.\nAn asynchronous pool of SQLz database connections.\nA connection managed by a <code>Pool</code>.\nMetadata for the connection being processed by a …\nConfiguration options for <code>Pool</code>.\nRetrieves a connection from the pool.\nSet the maximum amount of time to spend waiting for a …\nPerform an asynchronous action after connecting to the …\nPerform an asynchronous action on a connection before it …\nThe duration since the connection was first opened.\nPerform an asynchronous action on a previously idle …\nRetrieves a connection and immediately begins a new …\nShut down the connection pool, immediately waking all …\nGet a future that resolves when <code>Pool::close()</code> is called.\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code>, but don’t open …\nGet the connection options for this pool\nCreate a new connection pool with a default pool …\nCreate a new pool from this <code>PoolOptions</code> and immediately …\nDetach this connection from the pool, allowing it to open …\nExecute the given future until it returns or the pool is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe duration that the connection spent in the idle queue.\nSet a maximum idle duration for individual connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>.close()</code> has been called on the pool, <code>false</code>…\nDetach this connection from the pool, treating it as …\nSet the maximum number of connections that this pool …\nSet the maximum lifetime of individual connections.\nSet the minimum number of connections to maintain at all …\nReturns a default “sane” configuration, suitable for …\nReturns the number of connections active and idle (not in …\nGet the options for this pool\nReturns the number of connections currently active. This …\nIf true, the health of a connection will be verified by a …\nAttempts to retrieve a connection from the pool if there …\nAttempts to retrieve a connection and immediately begins a …\nRepresents a single row from the database.\nGets the column information at <code>index</code>.\nGets all columns in this statement.\nIndex into the database row and decode a single value.\nReturns <code>true</code> if this row has no columns.\nReturns the number of columns in this row.\nGets the column information at <code>index</code> or <code>None</code> if out of …\nIndex into the database row and decode a single value.\nAn in-progress database transaction or savepoint.\nCommits this transaction or savepoint.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAborts this transaction or savepoint.\nProvides information about a SQL type for the database …\nReturns the database system name of the type. Length …")