"use strict";(self.webpackChunksea_orm_pro=self.webpackChunksea_orm_pro||[]).push([[93],{6059:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var i=r(2374);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},6783:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rbac/overview","title":"Overview","description":"Here is a high level overview of the design and the requirements that shaped them:","source":"@site/docs/08-rbac/01-overview.md","sourceDirName":"08-rbac","slug":"/rbac/overview","permalink":"/preview/pr-154/sea-orm-pro/docs/rbac/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/sea-orm-pro/docs/08-rbac/01-overview.md","tags":[],"version":"current","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1761297220000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GraphQL Playground","permalink":"/preview/pr-154/sea-orm-pro/docs/gui-development/graphql"},"next":{"title":"Role Permissions","permalink":"/preview/pr-154/sea-orm-pro/docs/rbac/role-permissions"}}');var s=r(8790),o=r(6059);const a={},t="Overview",l={},c=[{value:"1. Table\u2011level access control",id:"1-tablelevel-access-control",level:3},{value:"2. Simplicity of user assignment",id:"2-simplicity-of-user-assignment",level:3},{value:"3. Role hierarchy and inheritance",id:"3-role-hierarchy-and-inheritance",level:3},{value:"4. Granular, composable permissions",id:"4-granular-composable-permissions",level:3},{value:"5. Extensibility",id:"5-extensibility",level:3},{value:"6. Wildcard for convenience",id:"6-wildcard-for-convenience",level:3},{value:"7. Per\u2011user overrides",id:"7-peruser-overrides",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"overview",children:"Overview"})}),"\n",(0,s.jsx)(n.p,{children:"Here is a high level overview of the design and the requirements that shaped them:"}),"\n",(0,s.jsx)(n.h3,{id:"1-tablelevel-access-control",children:"1. Table\u2011level access control"}),"\n",(0,s.jsx)(n.p,{children:"Different user groups can only read or modify certain tables, e.g. customers can only read invoices, but not modify them."}),"\n",(0,s.jsx)(n.p,{children:"Design: RBAC engine is table\u2011scoped so permissions can be expressed directly in terms of CRUD on tables."}),"\n",(0,s.jsx)(n.h3,{id:"2-simplicity-of-user-assignment",children:"2. Simplicity of user assignment"}),"\n",(0,s.jsx)(n.p,{children:"Each user should have a clear, unambiguous role to avoid confusion."}),"\n",(0,s.jsx)(n.p,{children:"Design: one user = one role. This prevents complexity of multiple roles per user."}),"\n",(0,s.jsx)(n.h3,{id:"3-role-hierarchy-and-inheritance",children:"3. Role hierarchy and inheritance"}),"\n",(0,s.jsx)(n.p,{children:"We want to create roles that inherit from multiple roles like A = B + C where A will have the union of permissions from B and C."}),"\n",(0,s.jsx)(n.p,{children:"We want to avoid duplicating permission sets across roles. For example, a 'Manager' should automatically get all 'Employee' permissions, plus extras."}),"\n",(0,s.jsx)(n.p,{children:"Design: Hierarchical roles with multiple inheritance."}),"\n",(0,s.jsx)(n.h3,{id:"4-granular-composable-permissions",children:"4. Granular, composable permissions"}),"\n",(0,s.jsx)(n.p,{children:"We need to allow fine\u2011grained control like 'read customers but not update them'. We want permission grant to be easy to reason about."}),"\n",(0,s.jsx)(n.p,{children:"Design: Role can be assigned set of permissions (CRUD) on resources (tables). Permissions are additive, once granted, cannot be taken away (but can be overridden on a per user basis)."}),"\n",(0,s.jsx)(n.h3,{id:"5-extensibility",children:"5. Extensibility"}),"\n",(0,s.jsx)(n.p,{children:"We want to extend beyond tables (e.g. application specific actions, or even non\u2011DB resources)."}),"\n",(0,s.jsx)(n.p,{children:"Design: Engine is generic - resource + permission abstraction can be applied to more than just CRUD operations on SQL tables."}),"\n",(0,s.jsx)(n.h3,{id:"6-wildcard-for-convenience",children:"6. Wildcard for convenience"}),"\n",(0,s.jsx)(n.p,{children:"Sometimes we need to grant superusers full access without enumerating every resource/permission."}),"\n",(0,s.jsxs)(n.p,{children:["Design: Opt\u2011in ",(0,s.jsx)(n.code,{children:"*"})," wildcard for 'all permissions' or 'all resources.'"]}),"\n",(0,s.jsx)(n.h3,{id:"7-peruser-overrides",children:"7. Per\u2011user overrides"}),"\n",(0,s.jsx)(n.p,{children:"Occasionally, a single user needs an exception (e.g. a contractor who can only read one table, or a manager who should be denied one sensitive table)."}),"\n",(0,s.jsx)(n.p,{children:"Design: User\u2011level overrides to grant/deny permissions."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Read more on ",(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2025-09-30-sea-orm-rbac/",children:"Role Based Access Control in SeaORM 2.0"})," blog post."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);