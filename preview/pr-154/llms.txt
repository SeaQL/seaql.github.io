# Sea-ql

> Building Developer Tools for Rust

## Main content

- [FireDBG - üî• Time Travel Visual Debugger for Rust](https://firedbg.sea-ql.org/): üî• Time Travel Visual Debugger for Rust
- [Index](https://www.sea-ql.org/SeaORM/docs/0.10.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.11.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.12.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.4.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.5.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.6.x/index/): SeaORM Tutorials
- [Index](https://www.sea-ql.org/SeaORM/docs/0.7.x/index/): SeaORM Tutorials
- [Index](https://www.sea-ql.org/SeaORM/docs/0.8.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/0.9.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/1.0.x/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/next/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM/docs/index/): Introduction
- [Index](https://www.sea-ql.org/SeaORM-X/docs/index/): This document only contains the usage and information of the extended support of other database backends such as MSSQL.
- [Index](https://www.sea-ql.org/sea-orm-pro/docs/index/): 1. Introduction
- [Index](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/index/): 1. Introduction
- [Index](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/index/): 1. Introduction
- [Index](https://www.sea-ql.org/SeaStreamer/docs/next/index/): 1. Introduction
- [Index](https://www.sea-ql.org/SeaStreamer/docs/index/): 1. Introduction
- [Index](https://firedbg.sea-ql.org/docs/index/): Introduction
- [SeaQL](https://www.sea-ql.org/): Building Developer Tools for Rust

## About

- [About Us](https://www.sea-ql.org/about-us/): Building Developer Tools for Rust
- [About Us](https://www.sea-ql.org/blog/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [About Us](https://www.sea-ql.org/SeaORM/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [About Us](https://www.sea-ql.org/SeaORM-X/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [About Us](https://www.sea-ql.org/sea-orm-pro/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [About Us](https://www.sea-ql.org/Seaography/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [About Us](https://firedbg.sea-ql.org/about-us/): We are a small team of passionate Rust engineers. Seeing the potential of Rust to become one of the most important languages of our era, we sought to improve the data engineering toolings to make it a reality.
- [The Vision](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/next/vision/): We want to make Rust the best data engineering platform, with tools that span from development to production.
- [The Vision](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/whats-next/vision/): We want to make Rust the best data engineering platform, with tools that span from development to production.
- [The Vision](https://www.sea-ql.org/SeaStreamer/docs/next/whats-next/vision/): We want to make Rust the best data engineering platform, with tools that span from development to production.
- [The Vision](https://www.sea-ql.org/SeaStreamer/docs/whats-next/vision/): We want to make Rust the best data engineering platform, with tools that span from development to production.

## Guides and Tutorials

- [üñ•Ô∏è SeaORM Pro](https://www.sea-ql.org/SeaORM/docs/next/sea-orm-pro/sea-orm-pro-intro/): SeaORM Pro is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required (but certainly nice to have).
- [üñ•Ô∏è SeaORM Pro](https://www.sea-ql.org/SeaORM/docs/sea-orm-pro/sea-orm-pro-intro/): SeaORM Pro is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required (but certainly nice to have).
- [üß≠ Seaography](https://www.sea-ql.org/SeaORM/docs/next/graph-ql/seaography-intro/): If you are building a full-stack application with a web GUI these days, it's likely you'd use GraphQL as the communication interface between frontend and backend. However, building GraphQL resolvers is no easy task for backend developers.
- [üß≠ Seaography](https://www.sea-ql.org/SeaORM/docs/graph-ql/seaography-intro/): If you are building a full-stack application with a web GUI these days, it's likely you'd use GraphQL as the communication interface between frontend and backend. However, building GraphQL resolvers is no easy task for backend developers.
- [üß≠ Seaography Intro](https://www.sea-ql.org/SeaORM/docs/0.12.x/seaography/seaography-intro/): If you are building a full-stack application with a web GUI these days, it's likely you'd use GraphQL as the communication interface between frontend and backend. A GraphQL schema is strongly typed and self-documenting, so no doubt frontend developers love them!
- [üß≠ Seaography Intro](https://www.sea-ql.org/SeaORM/docs/1.0.x/seaography/seaography-intro/): If you are building a full-stack application with a web GUI these days, it's likely you'd use GraphQL as the communication interface between frontend and backend. A GraphQL schema is strongly typed and self-documenting, so no doubt frontend developers love them!
- [ActiveEnum](https://www.sea-ql.org/SeaORM/docs/next/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [ActiveEnum](https://www.sea-ql.org/SeaORM/docs/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Advanced Joins](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/advanced-joins/): An anatomy of a complex relational query with multiple joins and custom selects.
- [Advanced Joins](https://www.sea-ql.org/SeaORM/docs/advanced-query/advanced-joins/): An anatomy of a complex relational query with multiple joins and custom selects.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method, and if you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Aggregate Functions](https://www.sea-ql.org/SeaORM/docs/advanced-query/aggregate-function/): You can group results selected from SeaORM find with the group_by method. If you wish to further restrict the grouped result set, the having method can help you achieve that.
- [Appendix - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch99-00-appendix): Thanks for reading the SeaORM tutorial from start to end! Glad you make it this far!!
- [Architecture](https://www.sea-ql.org/SeaORM/docs/0.10.x/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/0.11.x/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/0.12.x/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/0.9.x/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/1.0.x/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/next/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Architecture](https://www.sea-ql.org/SeaORM/docs/internal-design/architecture/): Let's dive under the Sea ü§ø
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.10.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.11.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.12.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.4.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.5.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.6.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.7.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.8.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/0.9.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/1.0.x/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/next/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming](https://www.sea-ql.org/SeaORM/docs/introduction/async/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaORM is one of the first crates built from the ground up with async support in mind.
- [Async Programming in Rust](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/introduction/async-programming/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaStreamer is an async-only library.
- [Async Programming in Rust](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/introduction/async-programming/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaStreamer is an async-only library.
- [Async Programming in Rust](https://www.sea-ql.org/SeaStreamer/docs/next/introduction/async-programming/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaStreamer is an async-only library.
- [Async Programming in Rust](https://www.sea-ql.org/SeaStreamer/docs/introduction/async-programming/): Async programming in Rust is a recent development, only having been stabilized in Rust 1.39. The async ecosystem is rapidly evolving, and SeaStreamer is an async-only library.
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/next/relation/bakery-schema/): Bakery Schema ERD
- [Bakery Schema](https://www.sea-ql.org/SeaORM/docs/relation/bakery-schema/): Bakery Schema ERD
- [Basic CRUD Operations - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-05-basic-crud-operations): In this section, we showcase how to perform basic operations with the schema we've defined.
- [Basic Schema](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/basic-schema/): We will be using this basic schema for demonstration:
- [Basic Schema](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/basic-schema/): We will be using this basic schema for demonstration:
- [Basic Schema](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/basic-schema/): We will be using this basic schema for demonstration:
- [Basic Schema](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/basic-schema/): We will be using this basic schema for demonstration:
- [Basic Schema](https://www.sea-ql.org/SeaORM/docs/basic-crud/basic-schema/): We will be using this basic schema for demonstration:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/chained-relations/): If you have multiple join paths between two entities or have complex joins that chain through multiple entities, you can define it with Linked. Take this as a simple example, where we join cake and filling via an intermediate cake_filling table.
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/chained-relations/): If you have multiple join paths between two entities or have complex joins that chain through multiple entities, you can define it with Linked. Take this as a simple example, where we join cake and filling via an intermediate cake_filling table.
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/next/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chained Relations](https://www.sea-ql.org/SeaORM/docs/relation/chained-relations/): The Related trait is a representation of the arrows (1-1, 1-N, M-N) we draw on Entity Relationship Diagrams. A Linked is composed of a chain of relations, and is useful when:
- [Chapter 1 - Building a Backend with SeaORM - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-00-build-backend-getting-started)
- [Chapter 2 - Integration with Rocket - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-00-integration-with-rocket)
- [Chapter 3 - Integration with GraphQL - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch03-00-integration-with-graphql)
- [Child Table](https://www.sea-ql.org/sea-orm-pro/docs/composite-table-config/child-table/): Name of Child Relation
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.10.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.11.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.12.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.4.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.5.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.6.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.7.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.8.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/0.9.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/1.0.x/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/next/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Compare with Diesel](https://www.sea-ql.org/SeaORM/docs/internal-design/diesel/): SeaORM and Diesel share the same goal: to offer you a complete solution in interfacing with databases.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Conditional Expressions](https://www.sea-ql.org/SeaORM/docs/advanced-query/conditional-expression/): You can add conditions to SeaORM find with the filter method. You can also restrict the aggregated result with having method. Both of them take seaquery::Condition as a parameter.
- [Configuring Features](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/configuration/configuration/): Cargo
- [Configuring Features](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/getting-started/configuration/): Cargo
- [Configuring Features](https://www.sea-ql.org/SeaStreamer/docs/next/getting-started/configuration/): Cargo
- [Configuring Features](https://www.sea-ql.org/SeaStreamer/docs/getting-started/configuration/): Cargo
- [Connect to Database - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-02-connect-to-database): First, we define a function to help us create a database and/or connect to it.
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.10.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.11.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.4.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.5.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.6.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.7.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.8.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Connection Pool](https://www.sea-ql.org/SeaORM/docs/0.9.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Consumer](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/streamer/consumer/): The Consumer trait defines the common interface of stream consumers.
- [Consumer](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/streamer/consumer/): The Consumer trait defines the common interface of stream consumers.
- [Consumer](https://www.sea-ql.org/SeaStreamer/docs/next/streamer/consumer/): The Consumer trait defines the common interface of stream consumers.
- [Consumer](https://www.sea-ql.org/SeaStreamer/docs/streamer/consumer/): The Consumer trait defines the common interface of stream consumers.
- [Container](https://www.sea-ql.org/sea-orm-pro/docs/deployment/container/): This guide outline the process of building an image for deploying to containerized environments, e.g. Kubernetes.
- [Cookbook - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch99-02-cookbook): The SeaORM Cookbook is a collection of frequently asked questions and the best practice of SeaORM.
- [Create](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/create/): Enable Create
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-sea-query-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.11.x/schema-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.12.x/schema-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-database-schema/create-enum/): After you have defined Entity, you can generate SQL statement to create database table with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-database-schema/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-database-schema/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-database-schema/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-database-schema/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-sea-query-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/1.0.x/schema-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/next/schema-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Enum](https://www.sea-ql.org/SeaORM/docs/schema-statement/create-enum/): You can generate SQL statement to create database tables with enum columns via the Schema helper struct.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-sea-query-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.11.x/schema-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.12.x/schema-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-database-schema/create-index/): To create indexes in database instead of writing IndexCreateStatement manually, you can derive it from Entity using Schema::createindexfromentity. This method will help you create database indexes defined in Entity.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-database-schema/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-sea-query-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/1.0.x/schema-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/next/schema-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Index](https://www.sea-ql.org/SeaORM/docs/schema-statement/create-index/): You can create indices from entities using Schema::createindexfromentity, or construct IndexCreateStatement manually.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-sea-query-statement/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::create_table_from_entity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.11.x/schema-statement/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::create_table_from_entity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.12.x/schema-statement/create-table/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-database-schema/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create database table including all columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-database-schema/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-database-schema/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-database-schema/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-database-schema/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-sea-query-statement/create-table/): To create tables in database instead of writing TableCreateStatement manually, you can derive it from Entity using Schema::createtablefromentity. This method will help you create a database table including all the columns and foreign key constraints defined in Entity.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/1.0.x/schema-statement/create-table/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/next/schema-statement/create-table/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [Create Table](https://www.sea-ql.org/SeaORM/docs/schema-statement/create-table/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Active Model](https://www.sea-ql.org/SeaORM/docs/advanced-query/custom-active-model/): Creating your own struct with partial fields of a model, which implements IntoActiveModel that can be converted into an ActiveModel with the method intoactivemodel. For example, it can be used as a form submission in a REST API.
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/next/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Join Condition](https://www.sea-ql.org/SeaORM/docs/relation/custom-join-condition/): Sometimes you might want to join on another table with custom conditions, such as:
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/custom-joins/): You can use the join method to construct complex join select query. It takes any RelationDef defined in entity file, you can define relation with belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Joins](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/custom-joins/): You can use the join method to construct complex join select queries. It takes any RelationDef defined in entity files, and you can define relation with the belongs_to method as well. Join type is specified using JoinType such as inner join, left join and right join.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/custom-select/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to do so.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/custom-select/): By default, SeaORM will select all columns defined in the Column enum. You can override the defaults if you wish to select certain columns only.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/custom-select/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/custom-select/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Custom Select](https://www.sea-ql.org/SeaORM/docs/advanced-query/custom-select/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Dashboard](https://www.sea-ql.org/sea-orm-pro/docs/site-config/dashboard/): Info Card
- [Data Loader](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/data-loader/): If you are building a web API that queries nested relations extensively, consider building a GraphQL server. Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM entities. Read "Getting Started with Seaography" to learn more.
- [Data Loader](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/data-loader/): The LoaderTrait provides an API to load related entities in batches.
- [Data Loader](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/data-loader/): The LoaderTrait provides an API to load related entities in batches.
- [Data Loader](https://www.sea-ql.org/SeaORM/docs/next/relation/data-loader/): The LoaderTrait provides an API to load related entities in batches.
- [Data Loader](https://www.sea-ql.org/SeaORM/docs/relation/data-loader/): The LoaderTrait provides an API to load related entities in batches.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.10.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.11.x/install-and-config/database-and-async-runtime/): First of all, please star our GitHub repo! Your support is vital to the continued maintenance of SeaORM.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.12.x/install-and-config/database-and-async-runtime/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.4.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.5.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.6.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.7.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.8.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/0.9.x/install-and-config/database-and-async-runtime/): First, add sea-orm to the [dependencies] section of your Cargo.toml.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/1.0.x/install-and-config/database-and-async-runtime/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/next/install-and-config/database-and-async-runtime/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM/docs/install-and-config/database-and-async-runtime/): Thank you for using SeaORM. Please star our GitHub repo! Your support is vital to the continued development and maintenance of SeaORM.
- [Database & Async Runtime](https://www.sea-ql.org/SeaORM-X/docs/install-and-config/database-and-async-runtime/): First, add sea-orm-x to the [dependencies] section of Cargo.toml.
- [Database Connection](https://www.sea-ql.org/SeaORM/docs/0.12.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Database Connection](https://www.sea-ql.org/SeaORM/docs/1.0.x/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Database Connection](https://www.sea-ql.org/SeaORM/docs/next/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Database Connection](https://www.sea-ql.org/SeaORM/docs/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [Database Connection](https://www.sea-ql.org/SeaORM-X/docs/install-and-config/connection/): To obtain a database connection, use the Database interface:
- [DataLoader](https://www.sea-ql.org/Seaography/docs/0.2.x/data-loader/): Seaography uses asyncgraphql::dataloader in querying nested objects to tackle the N+1 problem.
- [DataLoader](https://www.sea-ql.org/Seaography/docs/next/data-loader/): TODO
- [DataLoader](https://www.sea-ql.org/Seaography/docs/data-loader/): Seaography uses asyncgraphql::dataloader in querying nested objects to tackle the N+1 problem.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.10.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.11.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.12.x/install-and-config/debug-log/): SeaORM logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.4.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) and SQLx both log debug messages via the log crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.5.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.6.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.7.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.8.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/0.9.x/install-and-config/debug-log/): SeaORM (with debug-print feature turned on) logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/1.0.x/install-and-config/debug-log/): SeaORM logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/next/install-and-config/debug-log/): SeaORM logs debug messages via the tracing crate.
- [Debug Log](https://www.sea-ql.org/SeaORM/docs/install-and-config/debug-log/): SeaORM logs debug messages via the tracing crate.
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/SeaORM/docs/basic-crud/delete/): Delete One
- [Delete](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/delete/): Enable Delete
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.10.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.11.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.12.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.4.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.5.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.6.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.7.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.8.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/0.9.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/1.0.x/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/next/internal-design/derive-macro/): EntityModel
- [Derive Macros](https://www.sea-ql.org/SeaORM/docs/internal-design/derive-macro/): EntityModel
- [Development and Release](https://www.sea-ql.org/sea-orm-pro/docs/gui-development/dev-and-release/): Development
- [Editor](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/editor/): Enable Editor
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.11.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.12.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/1.0.x/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/next/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM/docs/generate-entity/entity-structure/): Let's look at a simple Cake entity.
- [Entity Structure](https://www.sea-ql.org/SeaORM-X/docs/generate-entity/entity-structure/): Column
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.11.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.12.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-entity/enumeration/): You can now use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Enumeration](https://www.sea-ql.org/SeaORM/docs/1.0.x/generate-entity/enumeration/): You can use Rust enums in model where the values are mapped to a database string, integer or native enum.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling](https://www.sea-ql.org/SeaORM/docs/advanced-query/error-handling/): All runtime errors in SeaORM is represented by DbErr.
- [Error Handling - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-03-error-handling)
- [Example Processors](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/introduction/examples/): We maintain a set of examples which you can use as a starting point for you to develop your stream processors.
- [Example Processors](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/getting-started/examples/): We maintain a set of examples which you can use as a starting point for you to develop your stream processors.
- [Example Processors](https://www.sea-ql.org/SeaStreamer/docs/next/getting-started/examples/): We maintain a set of examples which you can use as a starting point for you to develop your stream processors.
- [Example Processors](https://www.sea-ql.org/SeaStreamer/docs/getting-started/examples/): We maintain a set of examples which you can use as a starting point for you to develop your stream processors.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.11.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.12.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what the DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/1.0.x/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/next/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Expanded Entity Structure](https://www.sea-ql.org/SeaORM/docs/generate-entity/expanded-entity-structure/): SeaORM is dynamic, which means you have the flexibility to configure things on runtime. If you are curious what DeriveEntityModel expands into, read along. Otherwise, you can skip this for now.
- [Extending generated code](https://www.sea-ql.org/Seaography/docs/0.2.x/extending-code/): When we are done generating the code we can then modify the Rust code based on our needs.
- [Extending generated code](https://www.sea-ql.org/Seaography/docs/next/extending-code/): When we are done generating the code we can then modify the Rust code based on our needs.
- [Extending generated code](https://www.sea-ql.org/Seaography/docs/extending-code/): When we are done generating the code we can then modify the Rust code based on our needs.
- [Filter](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/filter/): Full Spec
- [Generate Entity from Database - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-04-entity-generation): Now that we have a database with a defined schema, we can generate the entities with sea-orm-cli.
- [Generated project structure](https://www.sea-ql.org/Seaography/docs/0.2.x/generated-project-structure/): On this article we will describe the generated project structure.
- [Generated project structure](https://www.sea-ql.org/Seaography/docs/generated-project-structure/): On this article we will describe the generated project structure.
- [Getting started](https://www.sea-ql.org/Seaography/docs/0.2.x/getting-started/): Installing CLI
- [Getting started](https://www.sea-ql.org/Seaography/docs/next/getting-started/): Installing SeaORM and Seaography CLI
- [Getting started](https://www.sea-ql.org/Seaography/docs/getting-started/): Installing CLI
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/0.12.x/seaography/getting-started/): This example can be found on SeaORM + Seaography Example.
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/1.0.x/seaography/getting-started/): This example can be found on SeaORM + Seaography Example.
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/next/graph-ql/getting-started/): This example can be found on SeaORM + Seaography Example.
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/next/sea-orm-pro/getting-started/): Getting Started with Loco
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/graph-ql/getting-started/): This example can be found on SeaORM + Seaography Example.
- [Getting Started](https://www.sea-ql.org/SeaORM/docs/sea-orm-pro/getting-started/): Getting Started with Loco
- [Getting Started with Axum](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-axum/): We use the axumexample example as the base, it contains basic REST API to handle basic user management such as user login and user info of current session. Final source code is here.
- [Getting Started with Loco](https://www.sea-ql.org/sea-orm-pro/docs/install-and-config/getting-started-loco/): We use the locostarter example as the base, it contains basic REST API to handle basic user management such as user registration, login and user info of current session. Final source code is here.
- [GraphQL Playground](https://www.sea-ql.org/sea-orm-pro/docs/gui-development/graphql/): GraphQL playground and handler is defined in the GraphQL controller:
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM/docs/basic-crud/insert/): Before diving into SeaORM insert we have to introduce ActiveValue and ActiveModel.
- [Insert](https://www.sea-ql.org/SeaORM-X/docs/basic-crud/insert/): Identity Insert
- [Inter Process](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/processors/inter-process/): SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options.
- [Inter Process](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/processors/inter-process/): SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options.
- [Inter Process](https://www.sea-ql.org/SeaStreamer/docs/next/processors/inter-process/): SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options.
- [Inter Process](https://www.sea-ql.org/SeaStreamer/docs/processors/inter-process/): SeaStreamer encourages you to write small stream processors and connect them together, instead of making one giant processor with lots of options.
- [Intra Process](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/processors/intra-process/): Here is how you might organize a mid-to-large scale stream processing project. You have a number of crates implementing different processors, each depends on sea-streamer in a workspace. Now, you want to construct a downstream crate where you connect several processors together for testing.
- [Intra Process](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/processors/intra-process/): Here is how you might organize a mid-to-large scale stream processing project. You have a number of crates implementing different processors, each depends on sea-streamer in a workspace. Now, you want to construct a downstream crate where you connect several processors together for testing.
- [Intra Process](https://www.sea-ql.org/SeaStreamer/docs/next/processors/intra-process/): Here is how you might organize a mid-to-large scale stream processing project. You have a number of crates implementing different processors, each depends on sea-streamer in a workspace. Now, you want to construct a downstream crate where you connect several processors together for testing.
- [Intra Process](https://www.sea-ql.org/SeaStreamer/docs/processors/intra-process/): Here is how you might organize a mid-to-large scale stream processing project. You have a number of crates implementing different processors, each depends on sea-streamer in a workspace. Now, you want to construct a downstream crate where you connect several processors together for testing.
- [Intro to Stream Processing](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/introduction/intro-to-streams/): "Turning the database inside out" is an influential article in the data engineering space, leading to the founding of Kafka. Since then, implementations like Redpanda and Redis Streams emerged, spurring a real-time data processing ecosystem.
- [Intro to Stream Processing](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/introduction/intro-to-streams/): "Turning the database inside out" is an influential article in the data engineering space, leading to the founding of Kafka. Since then, implementations like Redpanda and Redis Streams emerged, spurring a real-time data processing ecosystem.
- [Intro to Stream Processing](https://www.sea-ql.org/SeaStreamer/docs/next/introduction/intro-to-streams/): "Turning the database inside out" is an influential article in the data engineering space, leading to the founding of Kafka. Since then, implementations like Redpanda and Redis Streams emerged, spurring a real-time data processing ecosystem.
- [Intro to Stream Processing](https://www.sea-ql.org/SeaStreamer/docs/introduction/intro-to-streams/): "Turning the database inside out" is an influential article in the data engineering space, leading to the founding of Kafka. Since then, implementations like Redpanda and Redis Streams emerged, spurring a real-time data processing ecosystem.
- [Introduction - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial)
- [Introduction - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch00-00-introduction)
- [Introduction - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial)
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/json/): Select JSON Result
- [JSON](https://www.sea-ql.org/SeaORM/docs/basic-crud/json/): Select JSON Result
- [Live Demo](https://www.sea-ql.org/sea-orm-pro/docs/playground/live-demo/): Try SeaORM Pro in your browser, without installing anything!
- [Looking Forward](https://www.sea-ql.org/SeaORM/docs/0.12.x/seaography/looking-forward/): Seaography is a venture into unknown territory, as this mode of operation and abstraction is something not attempted before. We are excited of the possibilities it brings to the SeaORM ecosystem.
- [Looking Forward](https://www.sea-ql.org/SeaORM/docs/1.0.x/seaography/looking-forward/): Seaography is a venture into unknown territory, as this mode of operation and abstraction is something not attempted before. We are excited of the possibilities it brings to the SeaORM ecosystem.
- [Macros documentation](https://www.sea-ql.org/Seaography/docs/0.2.x/macros-documentation/): Filter derive
- [Macros documentation](https://www.sea-ql.org/Seaography/docs/next/macros-documentation/): DeriveRelatedEntity macro
- [Macros documentation](https://www.sea-ql.org/Seaography/docs/macros-documentation/): Filter derive
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/next/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Many to Many](https://www.sea-ql.org/SeaORM/docs/relation/many-to-many/): A many-to-many relation is formed by three tables, where two tables are related via a junction table. As an example, a Cake has many Filling and Filling are shared by many Cake via an intermediate entity CakeFilling.
- [Migration (API) - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-03-migration-api): If you prefer to set up and run the migrations programmatically, we provide the Migrator API for that.
- [Migration (CLI) - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-02-migration-cli): This and the next sections concern those who are getting a taste of SeaORM by creating a new, toy database schema. If you already have an existing database schema, feel free to skip over to Section 1....
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.10.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.11.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.12.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.4.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.5.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.6.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.7.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.8.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/0.9.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/1.0.x/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/next/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Mock Interface](https://www.sea-ql.org/SeaORM/docs/write-test/mock/): You can unit test your application logic using the mock database interface.
- [Multi Selects](https://www.sea-ql.org/SeaORM/docs/next/relation/multi-selects/): Nested Models
- [Multi Selects](https://www.sea-ql.org/SeaORM/docs/relation/multi-selects/): Nested Models
- [Mutation - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch03-03-mutation): To support mutations with GraphQL, we need to create a struct to serve as the root, as for queries.
- [New Type](https://www.sea-ql.org/SeaORM/docs/0.12.x/generate-entity/newtype/): You can define a New Type (T) and use it as model field. The following traits have to be implemented.
- [New Type](https://www.sea-ql.org/SeaORM/docs/1.0.x/generate-entity/newtype/): You can define a New Type (T) and use it as model field. The following traits have to be implemented.
- [New Type](https://www.sea-ql.org/SeaORM/docs/next/generate-entity/newtype/): You can define a New Type (T) and use it as model field. The following traits have to be implemented.
- [New Type](https://www.sea-ql.org/SeaORM/docs/generate-entity/newtype/): You can define a New Type (T) and use it as model field. The following traits have to be implemented.
- [Newtype](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-entity/newtype/): You can define a newtype and use it as model field. Following traits have to be implemented.
- [Newtype](https://www.sea-ql.org/SeaORM/docs/0.11.x/generate-entity/newtype/): You can define a newtype and use it as model field. Following traits have to be implemented.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/one-to-many/): A one-to-many relation is similar to one-to-one relation. In the previous section, we give the example of "a Cake entity has at most one Fruit topping". In one-to-many relation, we change the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/next/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to Many](https://www.sea-ql.org/SeaORM/docs/relation/one-to-many/): A one-to-many relation is similar to a one-to-one relation. In the previous section, we gave the example of "a Cake entity has at most one Fruit topping". To make it a one-to-many relation, we remove the "at most one" constraint. So, we have a Cake entity that might have many Fruit toppings.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/one-to-one/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/one-to-one/): A one-to-one relation is the most basic type of database relation. Let say a Cake entity has at most one Fruit topping.
- [One to One](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/one-to-one/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [One to One](https://www.sea-ql.org/SeaORM/docs/next/relation/one-to-one/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [One to One](https://www.sea-ql.org/SeaORM/docs/relation/one-to-one/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [Optional: Building SQL Queries with SeaQuery - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-08-sql-with-sea-query): If you prefer the flexibility of SQL, you can use SeaQuery to build SQL-like statements for any queries or operations.
- [Optional: GraphQL Playground - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch03-04-graphql-playground): When you are developing the GraphQL API, you probably want to send requests to verify the correctness of your implementation.
- [Optional: Simple Frontend Using Templates - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-05-simple-frontend-using-templates): To make your application a little more accessible, Rocket provides the Templates interface for frontend support.
- [Overview](https://www.sea-ql.org/sea-orm-pro/docs/composite-table-config/overview/): File Folder
- [Overview](https://www.sea-ql.org/sea-orm-pro/docs/gui-development/overview/): SeaORM Pro is free-to-use software. All backend source code is MIT Licensed, but the frontend source code is closed for the time being.
- [Overview](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/overview/): File Folder
- [Overview](https://www.sea-ql.org/sea-orm-pro/docs/site-config/overview/): File Folder
- [Parent Table](https://www.sea-ql.org/sea-orm-pro/docs/composite-table-config/parent-table/): Name of Parent Table
- [Producer](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/streamer/producer/): The Producer trait defines the common interface of stream producers. Producer implements Clone, so you can use it like an mpsc::Sender.
- [Producer](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/streamer/producer/): The Producer trait defines the common interface of stream producers. Producer implements Clone, so you can use it like an mpsc::Sender.
- [Producer](https://www.sea-ql.org/SeaStreamer/docs/next/streamer/producer/): The Producer trait defines the common interface of stream producers. Producer implements Clone, so you can use it like an mpsc::Sender.
- [Producer](https://www.sea-ql.org/SeaStreamer/docs/streamer/producer/): The Producer trait defines the common interface of stream producers. Producer implements Clone, so you can use it like an mpsc::Sender.
- [Project Setup - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-01-project-setup): In this section, we will set up our project, including the folder structure and crate dependencies.
- [Project Setup - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-01-project-setup)
- [Project Setup - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch03-01-project-setup): The initial setup of this chapter is vastly similar to that of the previous chapter.
- [Project structure](https://www.sea-ql.org/Seaography/docs/next/project-structure/): On this article we will describe the generated project structure.
- [Query - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch03-02-query): To support queries, we extend the QueryRoot struct:
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/raw-sql/): Query by raw SQL
- [Raw SQL](https://www.sea-ql.org/SeaORM/docs/basic-crud/raw-sql/): Query by raw SQL
- [Relational Select - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-06-relational-select): In the previous section, we explored how to perform select on a single entity.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.10.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.11.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.12.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.4.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.5.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.6.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.7.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.8.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/0.9.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/1.0.x/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/next/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Robust & Correct](https://www.sea-ql.org/SeaORM/docs/write-test/testing/): Testing is an integral part of programming in Rust. You see, cargo test is built-in.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.10.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.11.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.12.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.6.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in console or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.7.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.8.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/0.9.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/1.0.x/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/next/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM/docs/migration/running-migration/): After you have defined the migrations, you can apply or revert migrations in the terminal or on application startup.
- [Running Migration](https://www.sea-ql.org/SeaORM-X/docs/migration/running-migration/): Running Migration on Any MSSQL Schema
- [Running the example](https://www.sea-ql.org/Seaography/docs/0.2.x/running-example/): The project codebase comes with an example database, you can use to run the example project.
- [Running the example](https://www.sea-ql.org/Seaography/docs/next/running-example/): The project codebase comes with an example database, you can use to run the example project.
- [Running the example](https://www.sea-ql.org/Seaography/docs/running-example/): The project codebase comes with an example database, you can use to run the example project.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Save](https://www.sea-ql.org/SeaORM/docs/basic-crud/save/): This is a helper method to save (insert / update) ActiveModel into the database.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.4.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.5.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.6.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section and move on to generating SeaORM entities.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.7.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section and move on to generating SeaORM entities.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.8.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section and move on to generating SeaORM entities.
- [Schema Management](https://www.sea-ql.org/SeaORM/docs/0.9.x/install-and-config/schema/): If you already have a database with tables and data, you can skip this section and move on to generating SeaORM entities.
- [Seaography - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch99-01-seaography)
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.10.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.11.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.12.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.4.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.5.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.6.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.7.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.8.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/0.9.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/1.0.x/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/next/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Concepts](https://www.sea-ql.org/SeaORM/docs/introduction/sea-orm/): In SeaORM, a database with a collection of tables is called a Schema.
- [SeaORM Pro Plus](https://www.sea-ql.org/sea-orm-pro/docs/introduction/sea-orm-pro-plus/): SeaORM Pro is free-to-use software. All backend source code is MIT Licensed, but the frontend source code is close-sourced for the time being.
- [SeaStreamer Architecture](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/configuration/architecture/): The architecture of sea-streamer is constructed by a number of sub-crates:
- [SeaStreamer Architecture](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/getting-started/architecture/): The architecture of sea-streamer is constructed by a number of sub-crates:
- [SeaStreamer Architecture](https://www.sea-ql.org/SeaStreamer/docs/next/getting-started/architecture/): The architecture of sea-streamer is constructed by a number of sub-crates:
- [SeaStreamer Architecture](https://www.sea-ql.org/SeaStreamer/docs/getting-started/architecture/): The architecture of sea-streamer is constructed by a number of sub-crates:
- [SeaStreamer Concepts](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/introduction/sea-streamer/): Streamer
- [SeaStreamer Concepts](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/introduction/sea-streamer/): Streamer
- [SeaStreamer Concepts](https://www.sea-ql.org/SeaStreamer/docs/next/introduction/sea-streamer/): Streamer
- [SeaStreamer Concepts](https://www.sea-ql.org/SeaStreamer/docs/introduction/sea-streamer/): Streamer
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/0.10.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/0.11.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/0.12.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/0.8.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/0.9.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/1.0.x/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/next/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Seeding Data](https://www.sea-ql.org/SeaORM/docs/migration/seeding-data/): You can retrieve a DbConn from SchemaManager and perform data operations as needed, for example, to seed data.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Select](https://www.sea-ql.org/SeaORM/docs/basic-crud/select/): Once you have defined the entity, you are ready to retrieve data from the database. Each row of data in the database corresponds to a Model.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.10.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.11.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.12.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.4.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.5.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.6.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.7.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.8.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/0.9.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/1.0.x/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/next/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Self Referencing](https://www.sea-ql.org/SeaORM/docs/relation/self-referencing/): In previous section, we introduced the Linked trait. It can also help you define self referencing relations.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.10.x/migration/setting-up-migration/): If you already have a database with tables and data, you can skip this chapter and move on to generating SeaORM entities.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.11.x/migration/setting-up-migration/): If you already have a database with tables and data, you can skip this chapter and move on to generating SeaORM entities.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.12.x/migration/setting-up-migration/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.6.x/migration/setting-up-migration/): Version control you database schema with migrations written in SeaQuery or in raw SQL.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.7.x/migration/setting-up-migration/): Version control your database schema with migrations written in SeaQuery or in raw SQL.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.8.x/migration/setting-up-migration/): Version control your database schema with migrations written in SeaQuery or SQL.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/0.9.x/migration/setting-up-migration/): Version control your database schema with migrations written in SeaQuery or SQL.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/1.0.x/migration/setting-up-migration/): Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/next/migration/setting-up-migration/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM/docs/migration/setting-up-migration/): Our stickers are made with a premium water-resistant vinyl with a unique matte finish.
- [Setting Up Migration](https://www.sea-ql.org/SeaORM-X/docs/migration/setting-up-migration/): Installing SeaORM X CLI
- [Streamer](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/streamer/streamer/): The Streamer trait defines the common interface of streaming clients.
- [Streamer](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/streamer/streamer/): The Streamer trait defines the common interface of streaming clients.
- [Streamer](https://www.sea-ql.org/SeaStreamer/docs/next/streamer/streamer/): The Streamer trait defines the common interface of streaming clients.
- [Streamer](https://www.sea-ql.org/SeaStreamer/docs/streamer/streamer/): The Streamer trait defines the common interface of streaming clients.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/streaming/): Use async stream on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Streaming](https://www.sea-ql.org/SeaORM/docs/advanced-query/streaming/): Use async stream from futures crate on any Select for reducing memory allocation to improve efficiency.
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/subquery/): Conditional Expression With Sub Query
- [Sub Query](https://www.sea-ql.org/SeaORM/docs/advanced-query/subquery/): Conditional Expression With Sub Query
- [Subquery](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/subquery/): Conditional Expression With Subquery
- [Subquery](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/subquery/): Conditional Expression With Subquery
- [Subquery](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/subquery/): Conditional Expression With Subquery
- [Subquery](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/subquery/): Conditional Expression With Subquery
- [Table](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/table/): Table Layout
- [Testing with Mock Interface - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch01-07-mock-testing): In some cases, we want to verify the application logic without using a real database. As such, SeaORM provides a MockDatabase interface to be used in development.
- [The Roadmap](https://www.sea-ql.org/SeaStreamer/docs/0.1.x/next/roadmap/): Thank you for reading the documentation up to this chapter. Excuse me for asking you again, if you find this project interesting and/or useful, please star our GitHub repo! Your support is vital to the continued development of SeaStreamer.
- [The Roadmap](https://www.sea-ql.org/SeaStreamer/docs/0.2.x/whats-next/roadmap/): Thank you for reading the documentation up to this chapter. Excuse me for asking you again, if you find this project interesting and/or useful, please star our GitHub repo! Your support is vital to the continued development of SeaStreamer.
- [The Roadmap](https://www.sea-ql.org/SeaStreamer/docs/next/whats-next/roadmap/): Thank you for reading the documentation up to this chapter. Excuse me for asking you again, if you find this project interesting and/or useful, please star our GitHub repo! Your support is vital to the continued development of SeaStreamer.
- [The Roadmap](https://www.sea-ql.org/SeaStreamer/docs/whats-next/roadmap/): Thank you for reading the documentation up to this chapter. Excuse me for asking you again, if you find this project interesting and/or useful, please star our GitHub repo! Your support is vital to the continued development of SeaStreamer.
- [Theme](https://www.sea-ql.org/sea-orm-pro/docs/site-config/theme/): Full Spec
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.10.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.11.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.12.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.4.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.5.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.6.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.7.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.8.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/0.9.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/1.0.x/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/next/internal-design/trait-and-type/): Entity
- [Traits and Types](https://www.sea-ql.org/SeaORM/docs/internal-design/trait-and-type/): Entity
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.10.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.11.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.12.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.4.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.5.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.6.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.7.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.8.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/0.9.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/1.0.x/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/next/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Transaction](https://www.sea-ql.org/SeaORM/docs/advanced-query/transaction/): A transaction is a group of SQL statements executed with ACID guarantee. There are two transaction APIs.
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/0.10.x/introduction/tutorial/): If you prefer step-by-step tutorials on how to use SeaORM, you can checkout our SeaORM Tutorials.
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/0.11.x/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorial written by the community!
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/0.12.x/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/0.8.x/introduction/tutorial/): If you prefer step-by-step tutorials on how to use SeaORM, you can checkout our SeaORM Tutorials.
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/0.9.x/introduction/tutorial/): If you prefer step-by-step tutorials on how to use SeaORM, you can checkout our SeaORM Tutorials.
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/1.0.x/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/next/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM/docs/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!
- [Tutorial & Examples](https://www.sea-ql.org/SeaORM-X/docs/introduction/tutorial/): If you prefer a step-by-step tutorial on how to use SeaORM, you can check out our official SeaORM Tutorial. There are also some good tutorials written by the community!
- [Update](https://www.sea-ql.org/SeaORM/docs/0.10.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.11.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.12.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.4.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.5.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.6.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.7.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.8.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/0.9.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/1.0.x/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/next/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/SeaORM/docs/basic-crud/update/): Update One
- [Update](https://www.sea-ql.org/sea-orm-pro/docs/raw-table-config/update/): Enable Update
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.10.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.11.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.12.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.4.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.5.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.6.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.7.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.8.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/0.9.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/1.0.x/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/next/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM/docs/generate-entity/sea-orm-cli/): First, install sea-orm-cli with cargo.
- [Using sea-orm-cli](https://www.sea-ql.org/SeaORM-X/docs/generate-entity/sea-orm-cli/): Install sea-orm-cli with cargo locally.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.10.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.11.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.12.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.4.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.5.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.6.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.7.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.8.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/0.9.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/1.0.x/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/next/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Using SQLite](https://www.sea-ql.org/SeaORM/docs/write-test/sqlite/): If you want to test application logic that does not require database-specific features, SQLite will be a good choice for you.
- [Virtual Machine](https://www.sea-ql.org/sea-orm-pro/docs/deployment/vm/): This guide outline the process of deploying to a virtual machine, e.g. AWS EC2 or DigitalOcean Droplets.
- [Web API Integration - SeaORM Tutorials](https://www.sea-ql.org/sea-orm-tutorial/ch02-04-web-api-integration): We can wrap more of the backend's functionalities into our Rocket application.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.10.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.11.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.12.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.4.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.5.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.6.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.7.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.8.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/0.9.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/1.0.x/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/next/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is an ORM](https://www.sea-ql.org/SeaORM/docs/introduction/orm/): An Object Relational Mapper (ORM) is a programming library to help you interact with a relational database from an Object-Oriented Programming (OOP) language.
- [What is FireDBG](https://firedbg.sea-ql.org/docs/introduction/firedbg/)
- [What is SeaORM Pro](https://www.sea-ql.org/sea-orm-pro/docs/introduction/sea-orm-pro/): SeaORM Pro is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required (but certainly nice to have).
- [What is SeaORM X](https://www.sea-ql.org/SeaORM-X/docs/introduction/orm/): SeaORM X stands for SeaORM eXtended, and is built on top of SeaORM, add support for other database backends. The architecture of SeaORM X remains the same.
- [What's Next for SeaORM?](https://www.sea-ql.org/SeaORM/docs/0.12.x/whats-next/whats-next/): We still remember the time when we first introduced SeaORM to the Rust community two years ago.
- [What's Next for SeaORM?](https://www.sea-ql.org/SeaORM/docs/1.0.x/whats-next/whats-next/): We still remember the time when we first introduced SeaORM to the Rust community two years ago.
- [What's Next for SeaORM?](https://www.sea-ql.org/SeaORM/docs/next/whats-next/whats-next/): We still remember the time when we first introduced SeaORM to the Rust community two years ago.
- [What's Next for SeaORM?](https://www.sea-ql.org/SeaORM/docs/whats-next/whats-next/): We still remember the time when we first introduced SeaORM to the Rust community two years ago.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.10.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.11.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.12.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.6.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.7.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.8.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/0.9.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/1.0.x/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/next/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.
- [Writing Migration](https://www.sea-ql.org/SeaORM/docs/migration/writing-migration/): Each migration contains two methods: up and down. The up method is used to alter the database schema, such as adding new tables, columns or indexes, while the down method revert the actions performed in the up method.

## Blog and Articles

- [5 posts tagged with "news"](https://firedbg.sea-ql.org/blog/tags/news/): This post serves as the "Part 3" of the article "The rainbow bridge between sync and async Rust", today we will discuss:
- [50 posts tagged with "news"](https://www.sea-ql.org/blog/tags/news/): This blog post summarizes the new features and enhancements introduced in SeaORM 1.1:
- [Adding GraphQL Support to Loco with Seaography](https://www.sea-ql.org/blog/2024-07-01-graphql-support-with-loco-seaography/): In this tutorial, we would add a GraphQL endpoint with Seaography based on our Loco starter application. Read our first tutorial of the series, Getting Started with Loco & SeaORM, if you haven't.
- [Announcing SeaORM 0.12](https://www.sea-ql.org/blog/2023-08-12-announcing-seaorm-0.12/): üéâ We are pleased to announce SeaORM 0.12 today!
- [Announcing SeaORM 1.0 üêö](https://www.sea-ql.org/blog/2024-08-04-sea-orm-1.0/): üéâ We are pleased to release SeaORM 1.0 today! This is an special occasion for us, so this blog post will be a little more than a release notes.
- [Architecture of FireDBG](https://firedbg.sea-ql.org/blog/2023-12-11-architecture-of-firedbg/): Under the hood of FireDBG
- [Archive](https://www.sea-ql.org/blog/archive/): Archive
- [Archive](https://firedbg.sea-ql.org/blog/archive/): Archive
- [Blog](https://www.sea-ql.org/blog/): Blog
- [Blog](https://firedbg.sea-ql.org/blog/): Blog
- [Building a Redis / Kafka Data Sink](https://www.sea-ql.org/blog/2024-05-05-redis-kafka-data-sink/): This tutorial shows you how to use Rust to build a system that:
- [Call for Contributors and Reviewers üì¢](https://www.sea-ql.org/blog/2023-01-01-call-for-contributors-n-reviewers/): We are calling for contributors and reviewers for SeaQL projects üì¢!
- [Celebrating 3,000+ GitHub Stars üéâ](https://www.sea-ql.org/blog/2022-08-12-3k-github-stars/): We are celebrating the milestone of reaching 3,000 GitHub stars across all SeaQL repositories!
- [Engineering at SeaQL.org](https://www.sea-ql.org/blog/2022-07-30-engineering/): It's hard to pin down the exact date, but I think SeaQL.org was setup in July 2020, a little over a year ago. Over the course of the year, SeaORM went from 0.1 to 0.9 and the number of users kept growing. I would like to outline our engineering process in this blog post, and perhaps it can serve as a reference or guidance to prospective contributors and the future maintainer of this project.
- [FizzBuzz Multithreaded - synchronization with rendezvous channels](https://firedbg.sea-ql.org/blog/2024-06-30-fizzbuzz-multithread/): This post serves as the "Part 3" of the article "The rainbow bridge between sync and async Rust", today we will discuss:
- [Getting Started](https://firedbg.sea-ql.org/blog/2023-12-13-getting-started/): In this blog post, we will cover the basic usage of FireDBG VS Code Extension ("the Extension") and FireDBG CLI ("the CLI"). By the end of this tutorial, you will learn:
- [Getting Started with Loco & SeaORM](https://www.sea-ql.org/blog/2024-05-28-getting-started-with-loco-seaorm/): In this tutorial, we would create a REST notepad backend starting from scratch and adding a new REST endpoint to handle file uploads in Loco.
- [Getting Started with Seaography](https://www.sea-ql.org/blog/2022-09-27-getting-started-with-seaography/): Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM. It ships with a CLI tool that can generate ready-to-compile Rust projects from existing MySQL, Postgres and SQLite databases.
- [Google Summer of Code 2022](https://www.sea-ql.org/blog/gsoc-2022/): GSoC 2022 Organization Profile
- [GraphQL based Admin Dashboard with Loco and Seaography](https://www.sea-ql.org/blog/2024-08-08-graphql-admin-dashboard-with-loco-seaography/): In this tutorial, we would develop a GraphQL based admin dashboard with Seaography and Loco.
- [Hello World](https://www.sea-ql.org/blog/2021-08-07-hello-world/): After 8 months of secrecy, SeaORM is now public!
- [Internship @ SeaQL](https://www.sea-ql.org/blog/2023-01-28-internship-at-seaql/): SeaQL.org offer internships tailored to university students. In fact, it will be the 3rd cohort in 2023.
- [Introducing FireDBG for Rust](https://firedbg.sea-ql.org/blog/2023-12-12-introducing-firedbg/): Debugging programs is hard
- [Introducing Seaography üß≠](https://www.sea-ql.org/blog/2022-09-17-introducing-seaography/): What a fruitful Summer of Code! Today, we are excited to introduce Seaography to the SeaQL community. Seaography is a GraphQL framework for building GraphQL resolvers using SeaORM. It ships with a CLI tool that can generate ready-to-compile Rust projects from existing MySQL, Postgres and SQLite databases.
- [Introducing SeaORM üêö](https://www.sea-ql.org/blog/2021-09-20-introducing-sea-orm/): We are pleased to introduce SeaORM 0.2.2 to the Rust community today. It's our pleasure to have received feedback and contributions from awesome people to SeaQuery and SeaORM since 0.1.0.
- [Introducing SeaStreamer üåä](https://www.sea-ql.org/blog/2023-04-03-intro-sea-streamer/): We are pleased to introduce SeaStreamer to the Rust community today. SeaStreamer is a stream processing toolkit to help you build stream processors in Rust.
- [Introducing StarfishQL](https://www.sea-ql.org/blog/2022-04-04-introducing-starfish-ql/): We are pleased to introduce StarfishQL to the Rust community today. StarfishQL is a graph database and query engine to enable graph analysis and visualization on the web. It is an experimental project, with its primary purpose to explore the dependency network of Rust crates published on crates.io.
- [OpenUK Award 2023 üèÜ](https://www.sea-ql.org/blog/2023-11-25-openuk-award/): It is our honour to have been awarded by OpenUK for the 2023 Award in the Software category! The award ceremony was a very memorable experience. A huge thanks to Red Badger who sponsored the software award.
- [Release Model](https://www.sea-ql.org/blog/2021-08-30-release-model/): Today we will outline our release plan in the near future.
- [SeaORM FAQ.01](https://www.sea-ql.org/blog/2022-05-14-faq-01/): FAQ.01 Why SeaORM does not nest objects for parent-child relation?
- [SeaORM FAQ.02](https://www.sea-ql.org/blog/2023-02-05-faq-02/): FAQ.02 Why the empty enum Relation {} is needed even if an Entity has no relations?
- [SeaQL Community Survey 2023 Results](https://www.sea-ql.org/blog/2024-01-18-community-survey-2023/): 524 members of the SeaQL community from 41 countries kindly contributed their thoughts on using SeaQL libraries, learning Rust and employing Rust in their day to day development lives.
- [SeaQL Community Survey 2024 Results](https://www.sea-ql.org/blog/2025-01-02-community-survey-2024/): 695 members of the SeaQL community from 47 countries kindly contributed their thoughts on using SeaQL libraries, learning Rust and employing Rust in their day to day development lives. From these responses we hope to get an understanding of where the SeaQL and Rust community stands in 2024.
- [Search the documentation](https://www.sea-ql.org/blog/search/)
- [Tags](https://www.sea-ql.org/blog/tags/)
- [Tags](https://firedbg.sea-ql.org/blog/tags/)
- [The rainbow bridge between sync and async Rust](https://www.sea-ql.org/blog/2024-05-20-async-rainbow-bridge/): This story stems from the saying "What Color is Your Function?" as a criticism to the async implementation of common programming languages. Well, Rust also falls into the category of "colored functions". So in this blog post, let's see how we can design systems to effectively combine sync and async code.
- [Toggle Stacked Download Graph in crates.io](https://www.sea-ql.org/blog/2022-11-09-toggle-stacked-download-graph-in-crates-io/): Not long ago we opened a PR "Toggle stacked download graph #5010" resolving Convert download chart from stacked chart to regular chart #3876 for crates.io.
- [Tutorial: Modeling Inheritance in SeaORM](https://www.sea-ql.org/blog/2025-01-08-sea-orm-inheritance/): Introduction
- [Visualizing Dynamic Programming - Part 1](https://firedbg.sea-ql.org/blog/2024-01-31-visual-dynamic-program/): If you haven't already, go watch the video Mastering Dynamic Programming by Tech With Nikola! This tutorial is based off that.
- [Welcome Summer of Code 2022 Contributors](https://www.sea-ql.org/blog/2022-06-02-summer-of-code-2022-intro/): We are thrilled to announce that we will bring in four contributors this summer! Two of them are sponsored by Google while two of them are sponsored by SeaQL.
- [Welcome to SeaQL](https://www.sea-ql.org/blog/2021-07-01-welcome/): One year ago, when we were writing data processing algorithms in Rust, we needed an async library to interface with a database. Back then, there weren't many choices. So we have to write our own.
- [What's new in Seaography 0.3.0](https://www.sea-ql.org/blog/2022-12-02-whats-new-in-seaography-0.3.0/): üéâ We are pleased to release Seaography 0.3.0! Here are some feature highlights üåü:
- [What's new in SeaORM 0.10.x](https://www.sea-ql.org/blog/2022-11-10-whats-new-in-0.10.x/): üéâ We are pleased to release SeaORM 0.10.0!
- [What's new in SeaORM 0.11.0](https://www.sea-ql.org/blog/2023-02-08-whats-new-in-seaorm-0.11.0/): üéâ We are pleased to release SeaORM 0.11.0!
- [What's new in SeaORM 0.12.x](https://www.sea-ql.org/blog/2024-01-23-whats-new-in-seaorm-0.12.x/): It had been a while since the initial SeaORM 0.12 release. This blog post summarizes the new features and enhancements introduced in SeaORM 0.12.2 through 0.12.12!
- [What's new in SeaORM 0.2.4](https://www.sea-ql.org/blog/2021-10-01-whats-new-in-0.2.4/): üéâ We are pleased to release SeaORM 0.2.4 today! Some feature highlights:
- [What's new in SeaORM 0.3.0](https://www.sea-ql.org/blog/2021-10-15-whats-new-in-0.3.0/): üéâ We are pleased to release SeaORM 0.3.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.4.0](https://www.sea-ql.org/blog/2021-11-19-whats-new-in-0.4.0/): üéâ We are pleased to release SeaORM 0.4.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.5.0](https://www.sea-ql.org/blog/2022-01-01-whats-new-in-0.5.0/): üéâ We are pleased to release SeaORM 0.5.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.6.0](https://www.sea-ql.org/blog/2022-02-07-whats-new-in-0.6.0/): üéâ We are pleased to release SeaORM 0.6.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.7.0](https://www.sea-ql.org/blog/2022-03-26-whats-new-in-0.7.0/): üéâ We are pleased to release SeaORM 0.7.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.8.0](https://www.sea-ql.org/blog/2022-05-15-whats-new-in-0.8.0/): üéâ We are pleased to release SeaORM 0.8.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 0.9.0](https://www.sea-ql.org/blog/2022-07-17-whats-new-in-0.9.0/): üéâ We are pleased to release SeaORM 0.9.0 today! Here are some feature highlights üåü:
- [What's new in SeaORM 1.0-rc.x](https://www.sea-ql.org/blog/2024-04-08-whats-new-in-seaorm-1.0-rc.x/): This blog post summarizes the new features and enhancements introduced in SeaORM 1.0-rc.x:
- [What's new in SeaORM 1.1.12](https://www.sea-ql.org/blog/2025-06-01-whats-new-in-sea-orm-1.1/): This blog post summarizes the new features and enhancements introduced in SeaORM 1.1:
- [What's new in SeaORM 1.1.7](https://www.sea-ql.org/blog/2025-03-08-whats-new-in-sea-orm-1.1/): This blog post summarizes the new features and enhancements introduced in SeaORM 1.1:
- [What's new in SeaQuery 0.26.0](https://www.sea-ql.org/blog/2022-08-05-whats-new-in-seaquery-0.26.0/): üéâ We are pleased to release SeaQuery 0.26.0! Here are some feature highlights üåü:
- [What's new in SeaQuery 0.27.0](https://www.sea-ql.org/blog/2022-10-31-whats-new-in-seaquery-0.27.0/): üéâ We are pleased to release SeaQuery 0.27.0! Here are some feature highlights üåü:
- [What's new in SeaQuery 0.28.0](https://www.sea-ql.org/blog/2022-12-30-whats-new-in-seaquery-0.28.0/): üéâ We are pleased to release SeaQuery 0.28.0! Here are some feature highlights üåü:
- [What's new in SeaQuery 0.32.x](https://www.sea-ql.org/blog/2024-12-03-whats-new-in-seaquery-0.32.x/): üéâ We are pleased to release SeaQuery 0.32.0 / 0.32.1! Here are some feature highlights üåü:
- [What's new in SeaStreamer 0.3](https://www.sea-ql.org/blog/2023-09-06-whats-new-in-sea-streamer-0.3/): üéâ We are pleased to release SeaStreamer 0.3.x!
- [What's new in SeaStreamer 0.5](https://www.sea-ql.org/blog/2024-11-30-whats-new-in-sea-streamer-0.5/): üéâ We are pleased to release SeaStreamer 0.5.x!
- [Writing Async Runtime Generic Library](https://www.sea-ql.org/blog/2023-11-22-async-runtime-generic/): If you are writing an async application in Rust, at some point you'd want to separate the code into several crates. There are some benefits:

## Policies and Legal

- [SeaFire Privacy Policy](https://firedbg.sea-ql.org/privacy/): We at SEAFIRE SOFTWARE LIMITED (‚ÄúCompany‚Äù, ‚Äúwe‚Äù, ‚Äúus‚Äù, ‚Äúour‚Äù) know that our users (‚Äúyou,‚Äù ‚Äúyour‚Äù) care about how your personal information is used and shared. We take your privacy seriously and are committed to protecting it through our compliance with this Privacy Policy.

## Other Content

- [Community Survey](https://www.sea-ql.org/community-survey/): Building Developer Tools for Rust
- [FireDBG - üî• Time Travel Visual Debugger for Rust](https://firedbg.sea-ql.org/install/): üî• Time Travel Visual Debugger for Rust
- [Rust Developer Intern](https://www.sea-ql.org/internship/): Building Developer Tools for Rust
- [Rust „Çπ„ÉÜ„ÉÉ„Ç´„Éº„Éë„ÉÉ„ÇØ](https://www.sea-ql.org/rust-sticker-pack/jp/): Rust ÊÑõÂ•ΩÂÆ∂„ÅÆ„Åü„ÇÅ„Å´‰ΩúÊàê„Åï„Çå„Åü„Ç∑„Éº„É´„Éë„ÉÉ„Ç±„Éº„Ç∏ÔºöRustaceanÂçòË™û„ÄÅSeaQL„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É≠„Ç¥„ÄÅTerres the Hermitt Crab„ÄÅFerris the Crab„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ
- [Rust Ë≤ºÁ¥ôÂåÖ](https://www.sea-ql.org/rust-sticker-pack/hk/): ÁÇ∫ Rust Áà±Â•ΩËÄÖÂà∂‰ΩúÁöÑË≤ºÁ¥ôÂåÖÔºöÂåÖÂê´ Rustacean ÂñÆË©û„ÄÅSeaQL È†ÖÁõÆÂæΩÊ®ô„ÄÅTerres the Hermitt Crab Âíå Ferris the Crab„ÄÇ
- [Rust Ë¥¥Á∫∏ÂåÖ](https://www.sea-ql.org/rust-sticker-pack/cn/): ‰∏∫ Rust Áà±Â•ΩËÄÖÂà∂‰ΩúÁöÑË¥¥Á∫∏ÂåÖÔºöÂåÖÂê´ Rustacean ÂçïËØç„ÄÅSeaQL È°πÁõÆÂæΩÊ†á„ÄÅTerres the Hermitt Crab Âíå Ferris the Crab„ÄÇ
- [Rustacean Sticker Pack](https://www.sea-ql.org/sticker-pack/): Sticker pack made for Rustaceans: containing the Rustacean word, SeaQL project logos, Terres the Hermit Crab and Ferris the Crab.
- [Rustacean Sticker Pack](https://www.sea-ql.org/rust-sticker-pack/): Sticker pack made for Rusts: containing the Rustacean word, SeaQL project logos, Terres the Hermit Crab and Ferris the Crab.
- [Rustacean „Çπ„ÉÜ„ÉÉ„Ç´„Éº„Éë„ÉÉ„ÇØ](https://www.sea-ql.org/sticker-pack/jp/): Rust ÊÑõÂ•ΩÂÆ∂„ÅÆ„Åü„ÇÅ„Å´‰ΩúÊàê„Åï„Çå„Åü„Ç∑„Éº„É´„Éë„ÉÉ„Ç±„Éº„Ç∏ÔºöRustaceanÂçòË™û„ÄÅSeaQL„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É≠„Ç¥„ÄÅTerres the Hermitt Crab„ÄÅFerris the Crab„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ
- [Rustacean Ë≤ºÁ¥ôÂåÖ](https://www.sea-ql.org/sticker-pack/hk/): ÁÇ∫ Rust Áà±Â•ΩËÄÖÂà∂‰ΩúÁöÑË≤ºÁ¥ôÂåÖÔºöÂåÖÂê´ Rustacean ÂñÆË©û„ÄÅSeaQL È†ÖÁõÆÂæΩÊ®ô„ÄÅTerres the Hermitt Crab Âíå Ferris the Crab„ÄÇ
- [Rustacean Ë¥¥Á∫∏ÂåÖ](https://www.sea-ql.org/sticker-pack/cn/): ‰∏∫ Rust Áà±Â•ΩËÄÖÂà∂‰ΩúÁöÑË¥¥Á∫∏ÂåÖÔºöÂåÖÂê´ Rustacean ÂçïËØç„ÄÅSeaQL È°πÁõÆÂæΩÊ†á„ÄÅTerres the Hermitt Crab Âíå Ferris the Crab„ÄÇ
- [Seafire End User License Agreement](https://firedbg.sea-ql.org/eula/): This End User License Agreement (the ‚ÄúEULA‚Äù) for the Software is hereby entered into and agreed upon by You and the business entity you represent (‚ÄúLicensee‚Äù or collectively, ‚Äúyou‚Äù, ‚Äúyour‚Äù or ‚Äúend user‚Äù) and Seafire Software Limited, a company registered in England and Wales, number 15102818 (‚ÄúLicensor‚Äù, ‚ÄúSeafire‚Äù, or ‚ÄúUs‚Äù).
- [Seaography üß≠ A GraphQL framework and code generator for SeaORM](https://www.sea-ql.org/Seaography/): üß≠ Seaography is a GraphQL framework and code generator for SeaORM
- [SeaORM üêö An async & dynamic ORM for Rust](https://www.sea-ql.org/SeaORM/): üêö SeaORM is a relational ORM to help you build web services in Rust
- [SeaORM Pro üñ•Ô∏è Admin Panel for SeaORM](https://www.sea-ql.org/sea-orm-pro/): üñ•Ô∏è SeaORM Pro is an Admin Panel for SeaORM
- [SeaORM X üêö An async & dynamic ORM built on top of SeaORM with support for SQL Server](https://www.sea-ql.org/SeaORM-X/): üêö SeaORM X is built on top of SeaORM with support for SQL Server
- [Search the documentation](https://www.sea-ql.org/SeaORM/search/)
- [Search the documentation](https://www.sea-ql.org/Seaography/search/)
- [SeaStreamer üåä A real-time stream processing toolkit for Rust](https://www.sea-ql.org/SeaStreamer/): üåä SeaStreamer is a stream processing toolkit to help you build stream processors in Rust