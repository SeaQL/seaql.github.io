"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[51375],{28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>l});var t=i(96540);const r={},s=t.createContext(r);function d(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:n},e.children)}},84415:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"generate-entity/sea-orm-cli","title":"Using sea-orm-cli","description":"First, install sea-orm-cli with cargo.","source":"@site/docs/04-generate-entity/01-sea-orm-cli.md","sourceDirName":"04-generate-entity","slug":"/generate-entity/sea-orm-cli","permalink":"/preview/pr-154/SeaORM/docs/generate-entity/sea-orm-cli","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/04-generate-entity/01-sea-orm-cli.md","tags":[],"version":"current","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1761297220000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Seeding Data","permalink":"/preview/pr-154/SeaORM/docs/migration/seeding-data"},"next":{"title":"Entity Format","permalink":"/preview/pr-154/SeaORM/docs/generate-entity/entity-format"}}');var r=i(74848),s=i(28453);const d={},l="Using sea-orm-cli",a={},c=[{value:"Configure Environment",id:"configure-environment",level:2},{value:"Getting Help",id:"getting-help",level:2},{value:"Generating Entity Files",id:"generating-entity-files",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"using-sea-orm-cli",children:["Using ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})]})}),"\n",(0,r.jsxs)(n.p,{children:["First, install ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," with ",(0,r.jsx)(n.code,{children:"cargo"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"cargo install sea-orm-cli@^2.0.0-rc\n"})}),"\n",(0,r.jsx)(n.admonition,{title:"SQL Server (MSSQL) backend",type:"tip",children:(0,r.jsxs)(n.p,{children:["The installation and the usage of ",(0,r.jsx)(n.code,{children:"sea-orm-cli"})," with MSSQL support can be found ",(0,r.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM-X/docs/generate-entity/sea-orm-cli/",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"configure-environment",children:"Configure Environment"}),"\n",(0,r.jsxs)(n.p,{children:["Set ",(0,r.jsx)(n.code,{children:"DATABASE_URL"})," in your environment, or create a ",(0,r.jsx)(n.code,{children:".env"})," file in your project root. Specify your database connection."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-env",metastring:'title=".env"',children:"DATABASE_URL=protocol://username:password@localhost/database\n"})}),"\n",(0,r.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"-h"})," flag on any CLI command or subcommand for help."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# List all available commands\nsea-orm-cli -h\n\n# List all subcommands available in `generate` command\nsea-orm-cli generate -h\n\n# Show how to use `generate entity` subcommand\nsea-orm-cli generate entity -h\n"})}),"\n",(0,r.jsx)(n.h2,{id:"generating-entity-files",children:"Generating Entity Files"}),"\n",(0,r.jsx)(n.p,{children:"Discover all tables in a database and generate a corresponding SeaORM entity file for each table."}),"\n",(0,r.jsx)(n.p,{children:"Supported databases:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MySQL"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL"}),"\n",(0,r.jsx)(n.li,{children:"SQLite"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Command line options:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-u"})," / ",(0,r.jsx)(n.code,{children:"--database-url"}),": database URL (default: DATABASE_URL specified in ENV)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-s"})," / ",(0,r.jsx)(n.code,{children:"--database-schema"}),": database schema (default: DATABASE_SCHEMA specified in ENV)","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"for MySQL & SQLite, this argument is ignored"}),"\n",(0,r.jsx)(n.li,{children:"for PostgreSQL, this argument is optional with default value 'public'"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-o"})," / ",(0,r.jsx)(n.code,{children:"--output-dir"}),": entity file output directory (default: current directory)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-v"})," / ",(0,r.jsx)(n.code,{children:"--verbose"}),": print debug messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"-l"})," / ",(0,r.jsx)(n.code,{children:"--lib"}),": generate index file as ",(0,r.jsx)(n.code,{children:"lib.rs"})," instead of ",(0,r.jsx)(n.code,{children:"mod.rs"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--include-hidden-tables"}),": generate entity files from hidden tables (tables with names starting with an underscore are hidden and ignored by default)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--ignore-tables"}),": skip generating entity file for specified tables (default: ",(0,r.jsx)(n.code,{children:"seaql_migrations"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--compact-format"}),": generate entity file of ",(0,r.jsx)(n.a,{href:"/preview/pr-154/SeaORM/docs/generate-entity/entity-format",children:"compact format"})," (default: true)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--expanded-format"}),": generate entity file of ",(0,r.jsx)(n.a,{href:"/preview/pr-154/SeaORM/docs/internal-design/expanded-entity-format",children:"expanded format"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--with-serde"}),": automatically derive serde Serialize / Deserialize traits for the entity (",(0,r.jsx)(n.code,{children:"none"}),", ",(0,r.jsx)(n.code,{children:"serialize"}),", ",(0,r.jsx)(n.code,{children:"deserialize"}),", ",(0,r.jsx)(n.code,{children:"both"}),") (default: ",(0,r.jsx)(n.code,{children:"none"}),")","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--serde-skip-deserializing-primary-key"}),": generate entity model with primary key field labeled as ",(0,r.jsx)(n.code,{children:"#[serde(skip_deserializing)]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--serde-skip-hidden-column"}),": generate entity model with hidden column (column name starts with ",(0,r.jsx)(n.code,{children:"_"}),") field labeled as ",(0,r.jsx)(n.code,{children:"#[serde(skip)]"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--date-time-crate"}),": the datetime crate to use for generating entities (",(0,r.jsx)(n.code,{children:"chrono"}),", ",(0,r.jsx)(n.code,{children:"time"}),") (default: ",(0,r.jsx)(n.code,{children:"chrono"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--max-connections"}),": maximum number of database connections to be initialized in the connection pool (default: ",(0,r.jsx)(n.code,{children:"1"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--model-extra-derives"}),": append extra derive macros to the generated model struct"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--model-extra-attributes"}),": append extra attributes to generated model struct"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--enum-extra-derives"}),": append extra derive macros to generated enums"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--enum-extra-attributes"}),": append extra attributes to generated enums"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--seaography"}),": generate addition structs in entities for seaography integration"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"since 1.1.6:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--with-prelude"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"all"}),": the default value, cli tool behaves as it does right now (so no breaking changes), it will generates the prelude.rs file and add it to mod.rs (or lib.rs)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"none"}),": it WILL NOT generates the prelude.rs file and it WILL NOT add it to mod.rs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"all-allow-unused-imports"}),": it generates the prelude.rs file and add it to mod.rs, BUT the following inner attribute ",(0,r.jsx)(n.code,{children:"#![allow(unused_imports)]"})," is appended to prelude.rs heading."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--impl-active-model-behavior"}),": generate empty ",(0,r.jsx)(n.code,{children:"ActiveModelBehavior"})," impls"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--acquire_timeout"}),": acquire timeout in seconds of the connection used for schema discovery"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"since 2.0.0:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"--entity-format"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"dense"}),": the new entity format"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"compact"}),": the entity format in 1.0"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"expanded"}),": the entity format in 0.x"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# Generate entity files of database `bakery` to `./src/entity`\nsea-orm-cli generate entity \\\n    --database-url protocol://username:password@localhost/bakery \\\n    --output-dir ./src/entity \\\n    --entity-format dense\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);