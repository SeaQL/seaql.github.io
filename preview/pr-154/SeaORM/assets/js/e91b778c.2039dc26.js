"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[29325],{28453:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>s});var r=n(96540);const t={},i=r.createContext(t);function l(e){const a=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:a},e.children)}},77899:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"relation/relational-query","title":"Relational Query","description":"Query by related Entity","source":"@site/docs/06-relation/11-relational-query.md","sourceDirName":"06-relation","slug":"/relation/relational-query","permalink":"/preview/pr-154/SeaORM/docs/relation/relational-query","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/06-relation/11-relational-query.md","tags":[],"version":"current","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1761297220000,"sidebarPosition":11,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Multi Selects","permalink":"/preview/pr-154/SeaORM/docs/relation/multi-selects"},"next":{"title":"Writing Tests","permalink":"/preview/pr-154/SeaORM/docs/write-test/testing"}}');var t=n(74848),i=n(28453);const l={},s="Relational Query",c={},o=[{value:"Query by related Entity",id:"query-by-related-entity",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"relational-query",children:"Relational Query"})}),"\n",(0,t.jsx)(a.h2,{id:"query-by-related-entity",children:"Query by related Entity"}),"\n",(0,t.jsx)(a.p,{children:"You can query an Entity by applying filters on a related Entity."}),"\n",(0,t.jsx)(a.p,{children:"For example, to find all cakes of SeaSide Bakery, you can do:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:"cake -> bakery\n"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:'let cake: Vec<cake::Model> = cake::Entity::find()\n    .has_related(bakery::Entity, bakery::Column::Name.eq("SeaSide Bakery"))\n    .order_by_asc(cake::Column::Name)\n    .all(db)\n    .await?;\n'})}),"\n",(0,t.jsxs)(a.p,{children:["It's using a ",(0,t.jsx)(a.code,{children:"WHERE EXISTS"})," SQL clause under the hood."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:'assert_eq!(\n    cake::Entity::find()\n        .has_related(bakery::Entity, bakery::Column::Name.eq("SeaSide Bakery"))\n        .build(DbBackend::Sqlite)\n        .to_string(),\n    [\n        r#"SELECT "cake"."id", "cake"."name", "cake"."price", "cake"."bakery_id", "cake"."gluten_free", "cake"."serial""#,\n        r#"FROM "cake""#,\n        r#"WHERE EXISTS(SELECT 1 FROM "bakery""#,\n        r#"WHERE "bakery"."name" = \'SeaSide Bakery\'"#,\n        r#"AND "cake"."bakery_id" = "bakery"."id")"#,\n    ]\n    .join(" ")\n);\n'})}),"\n",(0,t.jsx)(a.p,{children:"It works the same for many-to-many relations. For example, you can find all cakes made by Alice the baker:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:"cake -> cake_baker -> baker\n"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-rust",children:'let cake: Vec<cake::Model> = cake::Entity::find()\n    .has_related(baker::Entity, baker::Column::Name.eq("Alice"))\n    .order_by_asc(cake::Column::Name)\n    .all(db)\n    .await?;\n'})})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);