"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[29357],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},73011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"basic-crud/json","title":"JSON","description":"Select JSON Result","source":"@site/docs/05-basic-crud/08-json.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/json","permalink":"/preview/pr-154/SeaORM/docs/basic-crud/json","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/05-basic-crud/08-json.md","tags":[],"version":"current","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1761297220000,"sidebarPosition":8,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Delete","permalink":"/preview/pr-154/SeaORM/docs/basic-crud/delete"},"next":{"title":"Raw SQL","permalink":"/preview/pr-154/SeaORM/docs/basic-crud/raw-sql"}}');var a=t(74848),i=t(28453);const o={},r="JSON",l={},c=[{value:"Select JSON Result",id:"select-json-result",level:2},{value:"Select JSON from raw SQL",id:"select-json-from-raw-sql",level:2},{value:"Convert JSON to ActiveModel",id:"convert-json-to-activemodel",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"json",children:"JSON"})}),"\n",(0,a.jsx)(n.h2,{id:"select-json-result",children:"Select JSON Result"}),"\n",(0,a.jsxs)(n.p,{children:["All SeaORM selects are capable of returning ",(0,a.jsx)(n.code,{children:"serde_json::Value"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// Find by id\nlet cake: Option<serde_json::Value> = Cake::find_by_id(1)\n    .into_json()\n    .one(db)\n    .await?;\n\nassert_eq!(\n    cake,\n    Some(serde_json::json!({\n        "id": 1,\n        "name": "Cheese Cake"\n    }))\n);\n\n// Find with filter\nlet cakes: Vec<serde_json::Value> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .all(db)\n    .await?;\n\nassert_eq!(\n    cakes,\n    [\n        serde_json::json!({\n            "id": 2,\n            "name": "Chocolate Forest"\n        }),\n        serde_json::json!({\n            "id": 8,\n            "name": "Chocolate Cupcake"\n        }),\n    ]\n);\n\n// Paginate json result\nlet cake_pages: Paginator<_> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .paginate(db, 50);\n\nwhile let Some(cakes) = cake_pages.fetch_and_next().await? {\n    // Do something on cakes: Vec<serde_json::Value>\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"select-json-from-raw-sql",children:"Select JSON from raw SQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let result: Vec<JsonValue> = JsonValue::find_by_statement(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."name" FROM "cake" GROUP BY "cake"."name"#,\n        [],\n    ))\n    .all(&db)\n    .await?;\n'})}),"\n",(0,a.jsx)(n.h2,{id:"convert-json-to-activemodel",children:"Convert JSON to ActiveModel"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to save user input into the database you can easily convert JSON value into ",(0,a.jsx)(n.code,{children:"ActiveModel"}),". You might want to ",(0,a.jsx)(n.a,{href:"https://serde.rs/attr-skip-serializing.html",children:"skip deserializing"})," some of the unwanted attributes."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["Since ",(0,a.jsx)(n.code,{children:"2.0.0"})]}),(0,a.jsxs)(n.p,{children:["Not all fields of the Model need to be present in the JSON input, undefined fields will simply become ",(0,a.jsx)(n.code,{children:"ActiveValue::NotSet"}),"."]})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "fruit")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    pub cake_id: Option<i32>,\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Set the attributes in ",(0,a.jsx)(n.code,{children:"ActiveModel"})," with ",(0,a.jsx)(n.code,{children:"set_from_json"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'// An ActiveModel with primary key set\nlet mut fruit = fruit::ActiveModel {\n    id: ActiveValue::Set(1),\n    name: ActiveValue::NotSet,\n    cake_id: ActiveValue::NotSet,\n};\n\n// Note that this method will not alter the primary key values in ActiveModel\nfruit.set_from_json(json!({\n    "id": 8,\n    "name": "Apple",\n    "cake_id": 1,\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::Set(1),\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::Set(Some(1)),\n    }\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can also create a new ",(0,a.jsx)(n.code,{children:"ActiveModel"})," from JSON value with the ",(0,a.jsx)(n.code,{children:"from_json"})," method."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'let fruit = fruit::ActiveModel::from_json(json!({\n    "name": "Apple",\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::NotSet,\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::NotSet,\n    }\n);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);