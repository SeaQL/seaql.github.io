"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[17321],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(96540);const a={},l=i.createContext(a);function r(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:n},e.children)}},33254:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"schema-statement/create-table","title":"Create Table","description":"Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our SeaQL Community Survey? This is essential for the continued development and maintenance of SeaORM.","source":"@site/versioned_docs/version-1.0.x/09-schema-statement/01-create-table.md","sourceDirName":"09-schema-statement","slug":"/schema-statement/create-table","permalink":"/preview/pr-154/SeaORM/docs/1.0.x/schema-statement/create-table","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/09-schema-statement/01-create-table.md","tags":[],"version":"1.0.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1760688811000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Error Handling","permalink":"/preview/pr-154/SeaORM/docs/1.0.x/advanced-query/error-handling"},"next":{"title":"Create Enum","permalink":"/preview/pr-154/SeaORM/docs/1.0.x/schema-statement/create-enum"}}');var a=t(74848),l=t(28453);const r={},c="Create Table",s={},o=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"create-table",children:"Create Table"})}),"\n",(0,a.jsx)(n.admonition,{title:"We need your help! \ud83d\udcdd",type:"tip",children:(0,a.jsxs)(n.p,{children:["Thank you for reading this documentation. While we have you, would you spare a few minutes into completing our ",(0,a.jsx)(n.a,{href:"https://www.sea-ql.org/community-survey",children:"SeaQL Community Survey"}),"? This is essential for the continued development and maintenance of SeaORM."]})}),"\n",(0,a.jsxs)(n.p,{children:["To create tables in database instead of writing ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/table/struct.TableCreateStatement.html",children:(0,a.jsx)(n.code,{children:"TableCreateStatement"})})," manually, you can derive it from ",(0,a.jsx)(n.code,{children:"Entity"})," using ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_table_from_entity",children:(0,a.jsx)(n.code,{children:"Schema::create_table_from_entity"})}),". This method will help you create a database table including all the columns and foreign key constraints defined in ",(0,a.jsx)(n.code,{children:"Entity"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Below we use ",(0,a.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/blob/master/src/tests_cfg/cake_filling_price.rs",children:(0,a.jsx)(n.code,{children:"CakeFillingPrice"})})," entity to demo its generated SQL statement. You can construct the same statement with ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-query/*/sea_query/table/struct.TableCreateStatement.html",children:(0,a.jsx)(n.code,{children:"TableCreateStatement"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Note that since version ",(0,a.jsx)(n.code,{children:"0.7.0"}),", ",(0,a.jsx)(n.a,{href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_table_from_entity",children:(0,a.jsx)(n.code,{children:"Schema::create_table_from_entity"})})," no longer create indexes. If you need to create indexes in database please check ",(0,a.jsx)(n.a,{href:"/preview/pr-154/SeaORM/docs/1.0.x/schema-statement/create-index",children:"here"})," for details."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{sea_query::*, tests_cfg::*, EntityName, Schema};\n\nlet builder = db.get_database_backend();\nlet schema = Schema::new(builder);\n\nassert_eq!(\n    builder.build(&schema.create_table_from_entity(CakeFillingPrice)),\n    builder.build(\n        &Table::create()\n            .table(CakeFillingPrice.table_ref())\n            .col(\n                ColumnDef::new(cake_filling_price::Column::CakeId)\n                    .integer()\n                    .not_null(),\n            )\n            .col(\n                ColumnDef::new(cake_filling_price::Column::FillingId)\n                    .integer()\n                    .not_null(),\n            )\n            .col(\n                ColumnDef::new(cake_filling_price::Column::Price)\n                    .decimal()\n                    .not_null(),\n            )\n            .primary_key(\n                Index::create()\n                    .name("pk-cake_filling_price")\n                    .col(cake_filling_price::Column::CakeId)\n                    .col(cake_filling_price::Column::FillingId)\n                    .primary(),\n            )\n            .foreign_key(\n                ForeignKeyCreateStatement::new()\n                    .name("fk-cake_filling_price-cake_id-filling_id")\n                    .from_tbl(CakeFillingPrice)\n                    .from_col(cake_filling_price::Column::CakeId)\n                    .from_col(cake_filling_price::Column::FillingId)\n                    .to_tbl(CakeFilling)\n                    .to_col(cake_filling::Column::CakeId)\n                    .to_col(cake_filling::Column::FillingId),\n            )\n            .to_owned()\n    )\n);\n'})}),"\n",(0,a.jsx)(n.p,{children:"To further illustrate it, we will show the SQL statement as string below."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"PostgreSQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{tests_cfg::*, DbBackend, Schema, Statement};\n\nlet db_postgres = DbBackend::Postgres;\nlet schema = Schema::new(db_postgres);\n\nassert_eq!(\n    db_postgres.build(&schema.create_table_from_entity(CakeFillingPrice)),\n    Statement::from_string(\n        db_postgres,\n        [\n            r#"CREATE TABLE "public"."cake_filling_price" ("#,\n            r#""cake_id" integer NOT NULL,"#,\n            r#""filling_id" integer NOT NULL,"#,\n            r#""price" decimal NOT NULL,"#,\n            r#"CONSTRAINT "pk-cake_filling_price" PRIMARY KEY ("cake_id", "filling_id"),"#,\n            r#"CONSTRAINT "fk-cake_filling_price-cake_id-filling_id" FOREIGN KEY ("cake_id", "filling_id") REFERENCES "cake_filling" ("cake_id", "filling_id")"#,\n            r#")"#,\n        ]\n        .join(" ")\n    )\n);\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"MySQL"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{tests_cfg::*, DbBackend, Schema, Statement};\n\nlet db_mysql = DbBackend::MySql;\nlet schema = Schema::new(db_mysql);\n\nassert_eq!(\n    db_mysql.build(&schema.create_table_from_entity(CakeFillingPrice)),\n    Statement::from_string(\n        db_mysql,\n        [\n            "CREATE TABLE `cake_filling_price` (",\n            "`cake_id` int NOT NULL,",\n            "`filling_id` int NOT NULL,",\n            "`price` decimal NOT NULL,",\n            "PRIMARY KEY `pk-cake_filling_price` (`cake_id`, `filling_id`),",\n            "CONSTRAINT `fk-cake_filling_price-cake_id-filling_id` FOREIGN KEY (`cake_id`, `filling_id`) REFERENCES `cake_filling` (`cake_id`, `filling_id`)",\n            ")",\n        ]\n        .join(" ")\n    )\n);\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"SQLite"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-rust",children:'use sea_orm::{tests_cfg::*, DbBackend, Schema, Statement};\n\nlet db_sqlite = DbBackend::Sqlite;\nlet schema = Schema::new(db_sqlite);\n\nassert_eq!(\n    db_sqlite.build(&schema.create_table_from_entity(CakeFillingPrice)),\n    Statement::from_string(\n        db_sqlite,\n        [\n            "CREATE TABLE `cake_filling_price` (",\n            "`cake_id` integer NOT NULL,",\n            "`filling_id` integer NOT NULL,",\n            "`price` real NOT NULL,",\n            "CONSTRAINT `pk-cake_filling_price`PRIMARY KEY (`cake_id`, `filling_id`),",\n            "FOREIGN KEY (`cake_id`, `filling_id`) REFERENCES `cake_filling` (`cake_id`, `filling_id`)",\n            ")",\n        ]\n        .join(" ")\n    )\n);\n'})}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);