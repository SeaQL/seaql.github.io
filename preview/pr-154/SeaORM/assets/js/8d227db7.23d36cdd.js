"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[72439],{28453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>d});var n=t(96540);const i={},s=n.createContext(i);function r(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:a},e.children)}},69278:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"basic-crud/save","title":"Save","description":"This is a helper method to save (insert / update) ActiveModel into the database.","source":"@site/versioned_docs/version-1.1.x/05-basic-crud/05-save.md","sourceDirName":"05-basic-crud","slug":"/basic-crud/save","permalink":"/preview/pr-154/SeaORM/docs/1.1.x/basic-crud/save","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.1.x/05-basic-crud/05-save.md","tags":[],"version":"1.1.x","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1760952789000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Update","permalink":"/preview/pr-154/SeaORM/docs/1.1.x/basic-crud/update"},"next":{"title":"Delete","permalink":"/preview/pr-154/SeaORM/docs/1.1.x/basic-crud/delete"}}');var i=t(74848),s=t(28453);const r={},d="Save",o={},c=[{value:"Save Behaviour",id:"save-behaviour",level:2},{value:"Usage",id:"usage",level:2}];function l(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"save",children:"Save"})}),"\n",(0,i.jsxs)(a.p,{children:["This is a helper method to save (insert / update) ",(0,i.jsx)(a.code,{children:"ActiveModel"})," into the database."]}),"\n",(0,i.jsx)(a.h2,{id:"save-behaviour",children:"Save Behaviour"}),"\n",(0,i.jsxs)(a.p,{children:["When saving an ",(0,i.jsx)(a.code,{children:"ActiveModel"}),", it will perform either insert or update depending on the primary key attribute:"]}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["Insert if primary key is ",(0,i.jsx)(a.code,{children:"NotSet"})]}),"\n",(0,i.jsxs)(a.li,{children:["Update if primary key is ",(0,i.jsx)(a.code,{children:"Set"})," or ",(0,i.jsx)(a.code,{children:"Unchanged"})]}),"\n"]}),"\n",(0,i.jsx)(a.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(a.p,{children:["Calling ",(0,i.jsx)(a.code,{children:"save"})," to insert or update an ",(0,i.jsx)(a.code,{children:"ActiveModel"}),"."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-rust",children:'use sea_orm::ActiveValue::NotSet;\n\nlet banana = fruit::ActiveModel {\n    id: NotSet, // primary key is NotSet\n    name: Set("Banana".to_owned()),\n    ..Default::default() // all other attributes are `NotSet`\n};\n\n// Insert, because primary key `id` is `NotSet`\nlet banana: fruit::ActiveModel = banana.save(db).await?;\n\nbanana.name = Set("Banana Mongo".to_owned());\n\n// Update, because primary key `id` is `Unchanged`\nlet banana: fruit::ActiveModel = banana.save(db).await?;\n'})})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);