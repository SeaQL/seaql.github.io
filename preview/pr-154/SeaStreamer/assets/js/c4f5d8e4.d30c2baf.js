"use strict";(self.webpackChunksea_streamer=self.webpackChunksea_streamer||[]).push([[2634],{4085:(e,s,t)=>{t.r(s),t.d(s,{default:()=>A});var r=t(2374),n=t(6097),a=t(6432),o=t(6200);const i={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN",homepageBanner:"homepageBanner_mBTI",homepageLogo:"homepageLogo_ewR0"};var l=t(4229);const c={features:"features_xdhU",featureSvg:"featureSvg__8YW"};var m=t(7379),u=t(8790);const d=[{title:"Async",icon:(0,u.jsx)(m.vSZ,{size:26}),description:(0,u.jsx)(u.Fragment,{children:"SeaStreamer provides an async API, and it supports both 'tokio' and 'async-std'. In tandem with other async Rust libraries, you can build highly concurrent stream processors."})},{title:"Generic",icon:(0,u.jsx)(m.UyI,{size:26}),description:(0,u.jsx)(u.Fragment,{children:"We provide integration for Redis & Kafka / Redpanda behind a generic trait interface, so your program can be backend-agnostic."})},{title:"Testable",icon:(0,u.jsx)(m.mU9,{size:26}),description:(0,u.jsx)(u.Fragment,{children:"SeaStreamer also provides a set of tools to work with streams via unix pipes, so it is testable without setting up a cluster, and extremely handy when working locally."})},{title:"Micro-service Oriented",icon:(0,u.jsx)(m.dE0,{size:26}),description:(0,u.jsx)(u.Fragment,{children:"Let's build real-time (multi-threaded, no GC), self-contained (aka easy to deploy), low-resource-usage, long-running stream processors in Rust!"})}];function h({icon:e,title:s,description:t}){return(0,u.jsx)("div",{className:(0,l.A)("col col--6"),children:(0,u.jsxs)("div",{style:{paddingBottom:"20px",paddingTop:"20px"},children:[(0,u.jsxs)("div",{style:{display:"flex"},children:[(0,u.jsx)("div",{style:{paddingRight:"22px"},children:e}),(0,u.jsx)("h3",{style:{fontSize:"20px",color:"var(--ifm-color-primary)"},children:s})]}),(0,u.jsx)("p",{children:t})]})})}function p(){return(0,u.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",c.features),children:(0,u.jsx)("div",{className:"container",children:(0,u.jsx)("div",{className:"row",children:(0,u.jsx)("div",{className:"col col--11 col--offset-1",children:(0,u.jsx)("div",{className:"row",children:d.map(((e,s)=>(0,u.jsx)(h,{...e},s)))})})})})})}var g=t(7272),f=t(2912);const x={features:"features_SiWs",tableFlexBox:"tableFlexBox_k3lM",table:"table_LYOc"};var j=t(2051),b=t(1093),S=t(2157),k=t.n(S);(void 0!==t.g?t.g:window).Prism=k(),t(1256);const w=[{title:"Consumer",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/consumer.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { stream } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(stream.streamer(), Default::default()).await?;\n\n    let mut options = SeaConsumerOptions::new(ConsumerMode::RealTime);\n    options.set_auto_stream_reset(SeaStreamReset::Earliest);\n\n    let consumer: SeaConsumer = streamer\n        .create_consumer(stream.stream_keys(), options)\n        .await?;\n\n    loop {\n        let mess: SeaMessage = consumer.next().await?;\n        println!("[{}] {}", mess.timestamp(), mess.message().as_str()?);\n    }\n}'},{title:"Producer",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/producer.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { stream } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(stream.streamer(), Default::default()).await?;\n\n    let producer: SeaProducer = streamer\n        .create_producer(stream.stream_key()?, Default::default())\n        .await?;\n\n    for tick in 0..100 {\n        let message = format!(r#""tick {tick}""#);\n        eprintln!("{message}");\n        producer.send(message)?;\n        tokio::time::sleep(Duration::from_secs(1)).await;\n    }\n\n    producer.end().await?; // flush\n\n    Ok(())\n}'},{title:"Processor",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/processor.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { input, output } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(input.streamer(), Default::default()).await?;\n    let options = SeaConsumerOptions::new(ConsumerMode::RealTime);\n    let consumer: SeaConsumer = streamer\n        .create_consumer(input.stream_keys(), options)\n        .await?;\n\n    let streamer = SeaStreamer::connect(output.streamer(), Default::default()).await?;\n    let producer: SeaProducer = streamer\n        .create_producer(output.stream_key()?, Default::default())\n        .await?;\n\n    loop {\n        let message: SeaMessage = consumer.next().await?;\n        let message = process(message).await?;\n        eprintln!("{message}");\n        producer.send(message)?; // send is non-blocking\n    }\n}'},{title:"Running with Kafka",code:"# Produce some input\ncargo run --bin producer -- --stream kafka://localhost:9092/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input kafka://localhost:9092/hello1 --output kafka://localhost:9092/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream kafka://localhost:9092/hello2\n# Remember to stop the processes\nkill %1 %2"},{title:"Running with Redis",code:"# Produce some input\ncargo run --bin producer -- --stream redis://localhost:6379/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input redis://localhost:6379/hello1 --output redis://localhost:6379/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream redis://localhost:6379/hello2\n# Remember to stop the processes\nkill %1 %2"},{title:"Running with File",code:'# Create the file\nfile=/tmp/sea-streamer-$(date +%s)\ntouch $file && echo "File created at $file"\n# Produce some input\ncargo run --bin producer -- --stream file://$file/hello &\n# Replay the input\ncargo run --bin consumer -- --stream file://$file/hello\n# Start the processor, producing some output\ncargo run --bin processor -- --input file://$file/hello --output stdio:///hello'},{title:"Running with Stdio",code:"# Pipe the producer to the processor\ncargo run --bin producer -- --stream stdio:///hello1 | cargo run --bin processor -- --input stdio:///hello1 --output stdio:///hello2"}];function v(){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.A)(),{colorMode:s}=(0,b.G)(),[t,n]=(0,r.useState)(!1);(0,r.useEffect)((()=>{n(!0)}),[]);const a=e.theme,i=e.darkTheme;return(0,u.jsx)("section",{className:(0,l.A)("home-section",x.features),children:(0,u.jsx)("div",{className:"container",children:(0,u.jsx)("div",{className:"row",children:(0,u.jsx)("div",{className:(0,l.A)("col col--12"),children:(0,u.jsxs)("div",{className:"padding-horiz--md",children:[(0,u.jsx)("h2",{className:"text--center",children:"A quick taste of SeaStreamer"}),(0,u.jsx)(g.A,{className:(0,l.A)("aa"),defaultValue:w[0].title,values:w.map((({title:e,code:s})=>({label:e,value:e}))),children:w.map((({title:e,code:r,full_example:n},o)=>(0,u.jsxs)(f.A,{value:e,children:[n&&(0,u.jsxs)("p",{children:["Here is a basic stream ",e.toLowerCase(),", ",(0,u.jsx)("a",{href:n,children:"full example"}),":"]}),(0,u.jsx)(j.f4,{code:r,theme:"dark"==s?i:a,language:n?"rust":"shell",children:({className:e,tokens:s,getLineProps:t,getTokenProps:r})=>(0,u.jsx)("pre",{className:`${e}`,children:s.map(((e,s)=>(0,u.jsx)("div",{...t({line:e,key:s}),children:e.map(((e,s)=>(0,u.jsx)("span",{...r({token:e,key:s})})))})))})},t)]},o)))})]})})})})})}const _={features:"features_nemC",mascot:"mascot_Rqr3"};function y(){return(0,u.jsx)("section",{className:(0,l.A)("home-section","home-section-alt",_.features),children:(0,u.jsx)("div",{className:"container",children:(0,u.jsx)("div",{className:"row",children:(0,u.jsxs)("div",{className:(0,l.A)("col col--12"),children:[(0,u.jsx)("h2",{className:"text--center",children:"Meet Terres, our official mascot"}),(0,u.jsxs)("p",{className:"text--center",children:["A friend of ",(0,u.jsx)("a",{href:"https://www.rustacean.net/",children:"Ferris"}),", Terres the hermit crab is a member of the Rustacean family."]}),(0,u.jsx)("div",{className:"text--center padding-horiz--md",children:(0,u.jsx)("img",{className:_.mascot,src:"/SeaStreamer/img/Terres.png"})})]})})})})}function N(){const{siteConfig:e}=(0,o.A)();return(0,u.jsx)("header",{className:i.heroBanner,children:(0,u.jsxs)("div",{className:"container",children:[(0,u.jsx)("img",{className:i.homepageLogo,width:"90%",src:"/SeaStreamer/img/SeaStreamer logo.png"}),(0,u.jsx)("img",{className:i.homepageBanner,width:"90%",src:"/SeaStreamer/img/SeaStreamer banner.png"}),(0,u.jsx)("br",{}),(0,u.jsx)("br",{}),(0,u.jsx)("h2",{className:"hero__subtitle",children:e.tagline}),(0,u.jsx)("div",{className:i.buttons,children:(0,u.jsx)(a.A,{className:"button button--primary button--lg",to:"/docs/index",children:"Getting Started"})})]})})}function A(){const{siteConfig:e}=(0,o.A)();return(0,u.jsxs)(n.A,{description:e.tagline,children:[(0,u.jsx)(N,{}),(0,u.jsxs)("main",{children:[(0,u.jsx)(p,{}),(0,u.jsx)(v,{}),(0,u.jsx)(y,{})]})]})}}}]);