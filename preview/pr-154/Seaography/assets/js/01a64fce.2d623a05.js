"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[201],{2913:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"graphql-schema/relational-query","title":"Relational Queries","description":"Nested Relational Query","source":"@site/docs/03-graphql-schema/04-relational-query.md","sourceDirName":"03-graphql-schema","slug":"/graphql-schema/relational-query","permalink":"/preview/pr-154/Seaography/docs/graphql-schema/relational-query","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/docs/03-graphql-schema/04-relational-query.md","tags":[],"version":"current","lastUpdatedBy":"Billy Chan","lastUpdatedAt":1760952789000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Query Filters","permalink":"/preview/pr-154/Seaography/docs/graphql-schema/filters"},"next":{"title":"Mutations","permalink":"/preview/pr-154/Seaography/docs/graphql-schema/mutation"}}');var r=t(8790),i=t(8032);const s={},l="Relational Queries",o={},c=[{value:"Nested Relational Query",id:"nested-relational-query",level:2},{value:"Filter by Related Entity",id:"filter-by-related-entity",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"relational-queries",children:"Relational Queries"})}),"\n",(0,r.jsx)(n.h2,{id:"nested-relational-query",children:"Nested Relational Query"}),"\n",(0,r.jsxs)(n.p,{children:["You can perform deeply nested relational query with Seaography. ",(0,r.jsx)(n.code,{children:"async-graphql"}),"'s data loader is used to solve the N+1 problem."]}),"\n",(0,r.jsxs)(n.p,{children:["Junction tables can be skipped in many-to-many relations. For example, ",(0,r.jsx)(n.code,{children:"film"})," ",(0,r.jsx)(n.code,{children:"<->"})," ",(0,r.jsx)(n.code,{children:"actor"})," via the junction table ",(0,r.jsx)(n.code,{children:"film_actor"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"You can query films with their list of actors in one query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:"{\n  film {\n    nodes {\n      filmId\n      title\n      actor {\n        nodes {\n          firstName\n          lastName\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Results in:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "film": {\n    "nodes": [\n      {\n        "filmId": 3,\n        "title": "ADAPTATION HOLES",\n        "actor": {\n          "nodes": [\n            {\n              "firstName": "NICK",\n              "lastName": "WAHLBERG"\n            },\n            ..\n          ]\n        }\n      }\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"filter-by-related-entity",children:"Filter by Related Entity"}),"\n",(0,r.jsx)(n.p,{children:'The following query finds us all the documentaries starred by the actor "David" along with the stores having it in stock so that we can go rent it.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-graphql",children:'{\n  film(\n    # \u2b07 filter by related entity\n    having: { # \u2b05 where exists (..) AND (..)\n      actor: { firstName: { eq: "David" } }\n      category: { name: { eq: "Documentary" } }\n    }\n  ) {\n    nodes {\n      filmId\n      title\n      # \u2b07 skipped the film_actor junction\n      actor {\n        nodes {\n          firstName\n          lastName\n        }\n      }\n      # \u2b07 nested relational query\n      inventory {\n        nodes {\n          store {\n            address {\n              address\n              city {\n                city\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"There are two join paths in this query:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"film -> film_actor -> actor\n     -> inventory -> store -> address -> city\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8032:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var a=t(2374);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);