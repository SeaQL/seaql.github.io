"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[263],{5304:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var r=s(7525),t=s(4848),i=s(8453);const l={slug:"2022-10-31-whats-new-in-seaquery-0.27.0",title:"What's new in SeaQuery 0.27.0",author:"SeaQL Team",author_title:"Ivan Krivosheev",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},a=void 0,c={authorsImageUrls:[void 0]},d=[{value:"Dependency Upgrade",id:"dependency-upgrade",level:2},{value:"Drivers support",id:"drivers-support",level:2},{value:"Support sub-query operators: <code>EXISTS</code>, <code>ALL</code>, <code>ANY</code>, <code>SOME</code>",id:"support-sub-query-operators-exists-all-any-some",level:2},{value:"Support <code>ON CONFLICT WHERE</code>",id:"support-on-conflict-where",level:2},{value:"Changed cond_where chaining semantics",id:"changed-cond_where-chaining-semantics",level:2},{value:"Added <code>OnConflict::value</code> and <code>OnConflict::values</code>",id:"added-onconflictvalue-and-onconflictvalues",level:2},{value:"Improvement to <code>ColumnDef::default</code>",id:"improvement-to-columndefdefault",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Miscellaneous Enhancements",id:"miscellaneous-enhancements",level:2},{value:"Bug Fixes",id:"bug-fixes",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Community",id:"community",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["\ud83c\udf89 We are pleased to release SeaQuery ",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/releases/tag/0.27.0",children:(0,t.jsx)(n.code,{children:"0.27.0"})}),"! Here are some feature highlights \ud83c\udf1f:"]}),"\n",(0,t.jsx)(n.h2,{id:"dependency-upgrade",children:"Dependency Upgrade"}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/356",children:"#356"}),"] We have upgraded a major dependency:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Upgrade ",(0,t.jsx)(n.a,{href:"https://github.com/launchbadge/sqlx",children:(0,t.jsx)(n.code,{children:"sqlx"})})," to 0.6.1"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You might need to upgrade the corresponding dependency in your application as well."}),"\n",(0,t.jsx)(n.h2,{id:"drivers-support",children:"Drivers support"}),"\n",(0,t.jsxs)(n.p,{children:["We have reworked the way drivers work in SeaQuery: priori to ",(0,t.jsx)(n.code,{children:"0.27.0"}),", users have to invoke the ",(0,t.jsx)(n.code,{children:"sea_query_driver_*"})," macros. Now each driver ",(0,t.jsx)(n.code,{children:"sqlx"}),", ",(0,t.jsx)(n.code,{children:"postgres"})," & ",(0,t.jsx)(n.code,{children:"rusqlite"})," has their own supporting crate, which integrates tightly with the corresponding libraries. Checkout our integration examples below for more details."]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/383",children:"#383"}),"] Deprecate ",(0,t.jsx)(n.code,{children:"sea-query-driver"})," in favour of ",(0,t.jsx)(n.code,{children:"sea-query-binder"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/422",children:"#422"}),"] Rusqlite support is moved to ",(0,t.jsx)(n.code,{children:"sea-query-rusqlite"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/433",children:"#433"}),"] Postgres support is moved to ",(0,t.jsx)(n.code,{children:"sea-query-postgres"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// before\nsea_query::sea_query_driver_postgres!();\nuse sea_query_driver_postgres::{bind_query, bind_query_as};\n\nlet (sql, values) = Query::select()\n    .from(Character::Table)\n    .expr(Func::count(Expr::col(Character::Id)))\n    .build(PostgresQueryBuilder);\n\nlet row = bind_query(sqlx::query(&sql), &values)\n    .fetch_one(&mut pool)\n    .await\n    .unwrap();\n\n// now\nuse sea_query_binder::SqlxBinder;\n\nlet (sql, values) = Query::select()\n    .from(Character::Table)\n    .expr(Func::count(Expr::col(Character::Id)))\n    .build_sqlx(PostgresQueryBuilder);\n\nlet row = sqlx::query_with(&sql, values)\n    .fetch_one(&mut pool)\n    .await\n    .unwrap();\n\n// You can now make use of SQLx's `query_as_with` nicely:\nlet rows = sqlx::query_as_with::<_, StructWithFromRow, _>(&sql, values)\n    .fetch_all(&mut pool)\n    .await\n    .unwrap();\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"support-sub-query-operators-exists-all-any-some",children:["Support sub-query operators: ",(0,t.jsx)(n.code,{children:"EXISTS"}),", ",(0,t.jsx)(n.code,{children:"ALL"}),", ",(0,t.jsx)(n.code,{children:"ANY"}),", ",(0,t.jsx)(n.code,{children:"SOME"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/118",children:"#118"}),"] Added sub-query operators: ",(0,t.jsx)(n.code,{children:"EXISTS"}),", ",(0,t.jsx)(n.code,{children:"ALL"}),", ",(0,t.jsx)(n.code,{children:"ANY"}),", ",(0,t.jsx)(n.code,{children:"SOME"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'let query = Query::select()\n    .column(Char::Id)\n    .from(Char::Table)\n    .and_where(\n        Expr::col(Char::Id)\n            .eq(\n                Expr::any(\n                    Query::select().column(Char::Id).from(Char::Table).take()\n                )\n            )\n    )\n    .to_owned();\n\nassert_eq!(\n    query.to_string(MysqlQueryBuilder),\n    r#"SELECT `id` FROM `character` WHERE `id` = ANY(SELECT `id` FROM `character`)"#\n);\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"SELECT "id" FROM "character" WHERE "id" = ANY(SELECT "id" FROM "character")"#\n);\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"support-on-conflict-where",children:["Support ",(0,t.jsx)(n.code,{children:"ON CONFLICT WHERE"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/366",children:"#366"}),"] Added support to ",(0,t.jsx)(n.code,{children:"ON CONFLICT WHERE"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'let query = Query::insert()\n    .into_table(Glyph::Table)\n    .columns([Glyph::Aspect, Glyph::Image])\n    .values_panic(vec![\n        2.into(),\n        3.into(),\n    ])\n    .on_conflict(\n        OnConflict::column(Glyph::Id)\n            .update_expr((Glyph::Image, Expr::val(1).add(2)))\n            .target_and_where(Expr::tbl(Glyph::Table, Glyph::Aspect).is_null())\n            .to_owned()\n    )\n    .to_owned();\n\nassert_eq!(\n    query.to_string(MysqlQueryBuilder),\n    r#"INSERT INTO `glyph` (`aspect`, `image`) VALUES (2, 3) ON DUPLICATE KEY UPDATE `image` = 1 + 2"#\n);\nassert_eq!(\n    query.to_string(PostgresQueryBuilder),\n    r#"INSERT INTO "glyph" ("aspect", "image") VALUES (2, 3) ON CONFLICT ("id") WHERE "glyph"."aspect" IS NULL DO UPDATE SET "image" = 1 + 2"#\n);\nassert_eq!(\n    query.to_string(SqliteQueryBuilder),\n    r#"INSERT INTO "glyph" ("aspect", "image") VALUES (2, 3) ON CONFLICT ("id") WHERE "glyph"."aspect" IS NULL DO UPDATE SET "image" = 1 + 2"#\n);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"changed-cond_where-chaining-semantics",children:"Changed cond_where chaining semantics"}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/414",children:"#414"}),"] Changed cond_where chaining semantics"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// Before: will extend current Condition\nassert_eq!(\n    Query::select()\n        .cond_where(any![Expr::col(Glyph::Id).eq(1), Expr::col(Glyph::Id).eq(2)])\n        .cond_where(Expr::col(Glyph::Id).eq(3))\n        .to_owned()\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT WHERE "id" = 1 OR "id" = 2 OR "id" = 3"#\n);\n// Before: confusing, since it depends on the order of invocation:\nassert_eq!(\n    Query::select()\n        .cond_where(Expr::col(Glyph::Id).eq(3))\n        .cond_where(any![Expr::col(Glyph::Id).eq(1), Expr::col(Glyph::Id).eq(2)])\n        .to_owned()\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT WHERE "id" = 3 AND ("id" = 1 OR "id" = 2)"#\n);\n// Now: will always conjoin with `AND`\nassert_eq!(\n    Query::select()\n        .cond_where(Expr::col(Glyph::Id).eq(1))\n        .cond_where(any![Expr::col(Glyph::Id).eq(2), Expr::col(Glyph::Id).eq(3)])\n        .to_owned()\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT WHERE "id" = 1 AND ("id" = 2 OR "id" = 3)"#\n);\n// Now: so they are now equivalent\nassert_eq!(\n    Query::select()\n        .cond_where(any![Expr::col(Glyph::Id).eq(2), Expr::col(Glyph::Id).eq(3)])\n        .cond_where(Expr::col(Glyph::Id).eq(1))\n        .to_owned()\n        .to_string(PostgresQueryBuilder),\n    r#"SELECT WHERE ("id" = 2 OR "id" = 3) AND "id" = 1"#\n);\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"added-onconflictvalue-and-onconflictvalues",children:["Added ",(0,t.jsx)(n.code,{children:"OnConflict::value"})," and ",(0,t.jsx)(n.code,{children:"OnConflict::values"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] Implementation ",(0,t.jsx)(n.code,{children:"From<T>"})," for any ",(0,t.jsx)(n.code,{children:"Into<Value>"})," into ",(0,t.jsx)(n.code,{children:"SimpleExpr"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// Before: notice the tuple\nOnConflict::column(Glyph::Id).update_expr((Glyph::Image, Expr::val(1).add(2)))\n// After: it accepts `Value` as well as `SimpleExpr`\nOnConflict::column(Glyph::Id).value(Glyph::Image, Expr::val(1).add(2))\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"improvement-to-columndefdefault",children:["Improvement to ",(0,t.jsx)(n.code,{children:"ColumnDef::default"})]}),"\n",(0,t.jsxs)(n.p,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/347",children:"#347"}),"] ",(0,t.jsx)(n.code,{children:"ColumnDef::default"})," now accepts ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})," instead ",(0,t.jsx)(n.code,{children:"Into<Value>"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// Now we can write:\nColumnDef::new(Char::FontId)\n    .timestamp()\n    .default(Expr::current_timestamp())\n"})}),"\n",(0,t.jsx)(n.h2,{id:"breaking-changes",children:"Breaking Changes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/386",children:"#386"}),"] Changed ",(0,t.jsx)(n.code,{children:"in_tuples"})," interface to accept ",(0,t.jsx)(n.code,{children:"IntoValueTuple"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/320",children:"#320"}),"] Removed deprecated methods"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/440",children:"#440"}),"] ",(0,t.jsx)(n.code,{children:"CURRENT_TIMESTAMP"})," changed from being a function to keyword"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/375",children:"#375"}),"] Update SQLite ",(0,t.jsx)(n.code,{children:"boolean"})," type from ",(0,t.jsx)(n.code,{children:"integer to "}),"boolean`"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] Deprecated ",(0,t.jsx)(n.code,{children:"OnConflict::update_value"}),", ",(0,t.jsx)(n.code,{children:"OnConflict::update_values"}),", ",(0,t.jsx)(n.code,{children:"OnConflict::update_expr"}),", ",(0,t.jsx)(n.code,{children:"OnConflict::update_exprs"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] Deprecated ",(0,t.jsx)(n.code,{children:"InsertStatement::exprs"}),", ",(0,t.jsx)(n.code,{children:"InsertStatement::exprs_panic"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] Deprecated ",(0,t.jsx)(n.code,{children:"UpdateStatement::col_expr"}),", ",(0,t.jsx)(n.code,{children:"UpdateStatement::value_expr"}),", ",(0,t.jsx)(n.code,{children:"UpdateStatement::exprs"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] ",(0,t.jsx)(n.code,{children:"UpdateStatement::value"})," now accept ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"Into<Value>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/451",children:"#451"}),"] ",(0,t.jsx)(n.code,{children:"Expr::case"}),", ",(0,t.jsx)(n.code,{children:"CaseStatement::case"})," and ",(0,t.jsx)(n.code,{children:"CaseStatement::finally"})," now accepts ",(0,t.jsx)(n.code,{children:"Into<SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"Into<Expr>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/460",children:"#460"}),"] ",(0,t.jsx)(n.code,{children:"InsertStatement::values"}),", ",(0,t.jsx)(n.code,{children:"UpdateStatement::values"})," now accepts ",(0,t.jsx)(n.code,{children:"IntoIterator<Item = SimpleExpr>"})," instead of ",(0,t.jsx)(n.code,{children:"IntoIterator<Item = Value>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/409",children:"#409"}),"] Use native api from SQLx for SQLite to work with time"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/435",children:"#435"}),"] Changed type of ",(0,t.jsx)(n.code,{children:"ColumnType::Enum"})," from ",(0,t.jsx)(n.code,{children:"(String, Vec<String>)"})," to ",(0,t.jsx)(n.code,{children:"Enum { name: DynIden, variants: Vec<DynIden>}"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"miscellaneous-enhancements",children:"Miscellaneous Enhancements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/336",children:"#336"}),"] Added support one dimension Postgres array for SQLx"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/373",children:"#373"}),"] Support CROSS JOIN"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/457",children:"#457"}),"] Added support ",(0,t.jsx)(n.code,{children:"DROP COLUMN"})," for SQLite"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/466",children:"#466"}),"] Added ",(0,t.jsx)(n.code,{children:"YEAR"}),", ",(0,t.jsx)(n.code,{children:"BIT"})," and ",(0,t.jsx)(n.code,{children:"VARBIT"})," types"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/338",children:"#338"}),"] Handle Postgres schema name for schema statements"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/418",children:"#418"}),"] Added ",(0,t.jsx)(n.code,{children:"%"}),", ",(0,t.jsx)(n.code,{children:"<<"})," and ",(0,t.jsx)(n.code,{children:">>"})," binary operators"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/430",children:"#329"}),"] Added RAND function"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/425",children:"#425"}),"] Implements ",(0,t.jsx)(n.code,{children:"Display"})," for ",(0,t.jsx)(n.code,{children:"Value"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/427",children:"#427"}),"] Added ",(0,t.jsx)(n.code,{children:"INTERSECT"})," and ",(0,t.jsx)(n.code,{children:"EXCEPT"})," to UnionType"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/448",children:"#448"}),"] ",(0,t.jsx)(n.code,{children:"OrderedStatement::order_by_customs"}),", ",(0,t.jsx)(n.code,{children:"OrderedStatement::order_by_columns"}),", ",(0,t.jsx)(n.code,{children:"OverStatement::partition_by_customs"}),", ",(0,t.jsx)(n.code,{children:"OverStatement::partition_by_columns"})," now accepts ",(0,t.jsx)(n.code,{children:"IntoIterator<Item = T>"})," instead of ",(0,t.jsx)(n.code,{children:"Vec<T>"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/452",children:"#452"}),"] ",(0,t.jsx)(n.code,{children:"TableAlterStatement::rename_column"}),", ",(0,t.jsx)(n.code,{children:"TableAlterStatement::drop_column"}),", ",(0,t.jsx)(n.code,{children:"ColumnDef::new"}),", ",(0,t.jsx)(n.code,{children:"ColumnDef::new_with_type"})," now accepts ",(0,t.jsx)(n.code,{children:"IntoIden"})," instead of ",(0,t.jsx)(n.code,{children:"Iden"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/426",children:"#426"}),"] Cleanup ",(0,t.jsx)(n.code,{children:"IndexBuilder"})," trait methods"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/436",children:"#436"}),"] Introduce ",(0,t.jsx)(n.code,{children:"SqlWriter"})," trait"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/448",children:"#448"}),"] Remove unneeded ",(0,t.jsx)(n.code,{children:"vec!"})," from examples"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"bug-fixes",children:"Bug Fixes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/449",children:"#449"}),"] ",(0,t.jsx)(n.code,{children:"distinct_on"})," properly handles ",(0,t.jsx)(n.code,{children:"ColumnRef"})]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/461",children:"#461"}),"] Removed ",(0,t.jsx)(n.code,{children:"ON"})," for ",(0,t.jsx)(n.code,{children:"DROP INDEX"})," for SQLite"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/pull/468",children:"#468"}),"] Change datetime string format to include microseconds"]}),"\n",(0,t.jsxs)(n.li,{children:["[",(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/issues/452",children:"#452"}),"] ",(0,t.jsx)(n.code,{children:"ALTER TABLE"})," for PosgreSQL with ",(0,t.jsx)(n.code,{children:"UNIQUE"})," constraint"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,t.jsx)(n.p,{children:"SeaQuery plays well with the other crates in the rust ecosystem."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/postgres",children:"Postgres Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/rusqlite",children:"Rusqlite Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_any",children:"SQLx Any Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_postgres",children:"SQLx Postgres Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_mysql",children:"SQLx MySql Example"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/SeaQL/sea-query/tree/master/examples/sqlx_sqlite",children:"SQLx Sqlite Example"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"community",children:"Community"}),"\n",(0,t.jsx)(n.p,{children:"SeaQL is a community driven project. We welcome you to participate, contribute and together build for Rust's future."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},7525:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-154/blog/2022-10-31-whats-new-in-seaquery-0.27.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-10-31-whats-new-in-seaquery-0.27.0.md","source":"@site/blog/2022-10-31-whats-new-in-seaquery-0.27.0.md","title":"What\'s new in SeaQuery 0.27.0","description":"\ud83c\udf89 We are pleased to release SeaQuery 0.27.0! Here are some feature highlights \ud83c\udf1f:","date":"2022-10-31T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-154/blog/tags/news"}],"readingTime":6.62,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Ivan Krivosheev","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2022-10-31-whats-new-in-seaquery-0.27.0","title":"What\'s new in SeaQuery 0.27.0","author":"SeaQL Team","author_title":"Ivan Krivosheev","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/SeaORM/img/SeaQL.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Toggle Stacked Download Graph in crates.io","permalink":"/preview/pr-154/blog/2022-11-09-toggle-stacked-download-graph-in-crates-io"},"nextItem":{"title":"Getting Started with Seaography","permalink":"/preview/pr-154/blog/2022-09-27-getting-started-with-seaography"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);