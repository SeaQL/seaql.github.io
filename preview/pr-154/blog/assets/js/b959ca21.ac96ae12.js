"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[5881],{2394:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>c});var t=a(8216),s=a(4848),r=a(8453);const i={slug:"2025-09-24-sea-orm-2.0",title:"SeaORM 2.0: A closer look",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/blog/img/SeaQL.png",image:"https://www.sea-ql.org/blog/img/SeaORM%202.0%20Banner.png",tags:["news"]},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Overhauled <code>Entity::insert_many</code>",id:"overhauled-entityinsert_many",level:3},{value:"Overhauled <code>ConnectionTrait</code> API",id:"overhauled-connectiontrait-api",level:3},{value:"Better error handling in <code>UpdateOne</code> / <code>DeleteOne</code>",id:"better-error-handling-in-updateone--deleteone",level:3},{value:"Potential compile errors",id:"potential-compile-errors",level:4},{value:"Added <code>has_many_via</code> for reverse has many relation",id:"added-has_many_via-for-reverse-has-many-relation",level:3},{value:"Use of transaction with generic connections",id:"use-of-transaction-with-generic-connections",level:3},{value:"Removing panics from API",id:"removing-panics-from-api",level:3},{value:"Enhancements",id:"enhancements",level:2},{value:"Added shorthand for Postgres<code> = ANY</code>",id:"added-shorthand-for-postgres--any",level:3},{value:"Added <code>big_pk_auto</code>",id:"added-big_pk_auto",level:3},{value:"Added <code>chrono::Utc</code> to entity prelude",id:"added-chronoutc-to-entity-prelude",level:3},{value:"Breaking changes",id:"breaking-changes",level:2},{value:"Use <code>&amp;&#39;static str</code> in identifiers",id:"use-static-str-in-identifiers",level:3},{value:"<code>QueryBuilder</code> is no longer object safe",id:"querybuilder-is-no-longer-object-safe",level:3},{value:"Changed <code>Database Connection</code>",id:"changed-database-connection",level:3},{value:"Removed <code>Derive Custom Column</code>",id:"removed-derive-custom-column",level:3},{value:"Upgrades",id:"upgrades",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2},{value:"\ud83d\udda5\ufe0f SeaORM Pro: Professional Admin Panel",id:"\ufe0f-seaorm-pro-professional-admin-panel",level:2},{value:"More to come",id:"more-to-come",level:2},{value:"Sponsors",id:"sponsors",level:2},{value:"Gold Sponsor",id:"gold-sponsor",level:3},{value:"GitHub Sponsors",id:"github-sponsors",level:3},{value:"Rustacean Sticker Pack \ud83e\udd80",id:"rustacean-sticker-pack-",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("img",{alt:"SeaORM 2.0 Banner",src:"/blog/img/SeaORM%202.0%20Banner.png"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2025-09-16-sea-orm-2.0/",children:"previous blog post"}),", we highlighted some of the new features in SeaORM 2.0. In this post, we're going to take a closer look to some of the changes under the hood."]}),"\n",(0,s.jsxs)(n.h3,{id:"overhauled-entityinsert_many",children:["Overhauled ",(0,s.jsx)(n.code,{children:"Entity::insert_many"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2628",children:"#2628"})," We've received many issue reports around the ",(0,s.jsx)(n.code,{children:"insert_many"})," API. Previously, ",(0,s.jsx)(n.code,{children:"insert_many"})," shares the same helper struct with ",(0,s.jsx)(n.code,{children:"insert_one"}),", which led to an awkard API:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let res = Bakery::insert_many(std::iter::empty())\n    .on_empty_do_nothing() // <- you needed to add this,\n                           // otherwise insert empty [] would lead to error\n    .exec(db)\n    .await;\n\nassert!(matches!(res, Ok(TryInsertResult::Empty)));\n"})}),"\n",(0,s.jsx)(n.p,{children:"After careful consideration, we made a number of changes in 2.0:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["removed APIs (e.g. ",(0,s.jsx)(n.code,{children:"Insert::add"}),") that can panic"]}),"\n",(0,s.jsxs)(n.li,{children:["new helper struct ",(0,s.jsx)(n.code,{children:"InsertMany"}),", ",(0,s.jsx)(n.code,{children:"last_insert_id"})," is now ",(0,s.jsx)(n.code,{children:"Option<Value>"})]}),"\n",(0,s.jsxs)(n.li,{children:["on empty iterator, ",(0,s.jsx)(n.code,{children:"None"})," (for ",(0,s.jsx)(n.code,{children:"last_insert_id"}),") or ",(0,s.jsx)(n.code,{children:"vec![]"})," (when returning) is returned on execution"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"TryInsert"})," API is unchanged"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["i.e. now ",(0,s.jsx)(n.code,{children:"last_insert_id"})," is ",(0,s.jsx)(n.code,{children:"Option<Value>"})," for ",(0,s.jsx)(n.code,{children:"InsertMany"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"struct InsertManyResult<A: ActiveModelTrait>\n{\n    pub last_insert_id: Option<<PrimaryKey<A> as PrimaryKeyTrait>::ValueType>,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Which means the awkardness is removed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let res = Entity::insert_many::<ActiveModel, _>([]).exec(db).await;\n\nassert_eq!(res?.last_insert_id, None); // insert nothing return None\n\nlet res = Entity::insert_many([ActiveModel { id: Set(1) }, ActiveModel { id: Set(2) }])\n    .exec(db)\n    .await;\n\nassert_eq!(res?.last_insert_id, Some(2)); // insert something return Some\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Exec with returning now returns a ",(0,s.jsx)(n.code,{children:"Vec<Model>"}),", so it feels intuitive:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'assert!(\n    Entity::insert_many::<ActiveModel, _>([])\n        .exec_with_returning(db)\n        .await?\n        .is_empty() // no footgun, nice\n);\n\nassert_eq!(\n    Entity::insert_many([\n        ActiveModel {\n            id: NotSet,\n            value: Set("two".into()),\n        }\n    ])\n    .exec_with_returning(db)\n    .await\n    .unwrap(),\n    [\n        Model {\n            id: 2,\n            value: "two".into(),\n        }\n    ]\n);\n'})}),"\n",(0,s.jsx)(n.p,{children:"Same on conflict API as before:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let res = Entity::insert_many([ActiveModel { id: Set(3) }, ActiveModel { id: Set(4) }])\n    .on_conflict_do_nothing()\n    .exec(db)\n    .await;\n\nassert!(matches!(conflict_insert, Ok(TryInsertResult::Conflicted)));\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"overhauled-connectiontrait-api",children:["Overhauled ",(0,s.jsx)(n.code,{children:"ConnectionTrait"})," API"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2657",children:"#2657"}),"\nWe overhauled the ",(0,s.jsx)(n.code,{children:"ConnectionTrait"})," API. ",(0,s.jsx)(n.code,{children:"execute"}),", ",(0,s.jsx)(n.code,{children:"query_one"}),", ",(0,s.jsx)(n.code,{children:"query_all"}),", ",(0,s.jsx)(n.code,{children:"stream"})," now takes in SeaQuery statement instead of raw SQL statement."]}),"\n",(0,s.jsx)(n.p,{children:"So you don't have to access the backend to build the query yourself."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// old\nlet query: SelectStatement = Entity::find().filter(..).into_query();\nlet backend = self.db.get_database_backend();\nlet stmt = backend.build(&query);\nlet rows = self.db.query_all(stmt).await?;\n\n// new\nlet query: SelectStatement = Entity::find().filter(..).into_query();\nlet rows = self.db.query_all(&query).await?;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A new set of methods ",(0,s.jsx)(n.code,{children:"execute_raw"}),", ",(0,s.jsx)(n.code,{children:"query_one_raw"}),", ",(0,s.jsx)(n.code,{children:"query_all_raw"}),", ",(0,s.jsx)(n.code,{children:"stream_raw"})," is added, so you can still do the following:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let backend = self.db.get_database_backend();\nlet stmt = backend.build(&query);\n\n// new\nlet rows = self.db.query_all_raw(stmt).await?;\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"better-error-handling-in-updateone--deleteone",children:["Better error handling in ",(0,s.jsx)(n.code,{children:"UpdateOne"})," / ",(0,s.jsx)(n.code,{children:"DeleteOne"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2726",children:"#2726"})," ",(0,s.jsx)(n.code,{children:"UpdateOne"})," and ",(0,s.jsx)(n.code,{children:"DeleteOne"})," no longer implement ",(0,s.jsx)(n.code,{children:"QueryFilter"})," and ",(0,s.jsx)(n.code,{children:"QueryTrait"}),"\ndirectly. Those implementations could expose an incomplete SQL query with an incomplete condition that touches too many records."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// bad: the following is basically update all\nlet query: UpdateStatement = Update::one(cake::ActiveModel::default()).into_query();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To generate the right condition, we must make sure that the primary key is set on the input ",(0,s.jsx)(n.code,{children:"ActiveModel"})," by\ncalling the ",(0,s.jsx)(n.code,{children:"validate()"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"Update::one(active_model)\n  + .validate()? // checks the query; may yield PrimaryKeyNotSet error\n    .build(DbBackend::Postgres)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"potential-compile-errors",children:"Potential compile errors"}),"\n",(0,s.jsxs)(n.p,{children:["If you need to access the generated SQL query, convert into ",(0,s.jsx)(n.code,{children:"ValidatedUpdateOne"}),"/",(0,s.jsx)(n.code,{children:"ValidatedDeleteOne"})," first."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"error[E0599]: no method named `build` found for struct `query::update::UpdateOne` in the current scope\n   --\x3e src/entity/column.rs:607:22\n    |\n  > | /                 Update::one(active_model)\n  > | |                     .build(DbBackend::Postgres)\n    | |                     -^^^^^ method not found in `UpdateOne<A>`\n    | |_____________________|\n    |\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"added-has_many_via-for-reverse-has-many-relation",children:["Added ",(0,s.jsx)(n.code,{children:"has_many_via"})," for reverse has many relation"]}),"\n",(0,s.jsx)(n.p,{children:"Consider the following entities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "bakery")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n    pub manager_id: i32,\n    pub cashier_id: i32,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::worker::Entity",\n        from = "Column::ManagerId",\n        to = "super::worker::Column::Id"\n    )]\n    Manager,\n    #[sea_orm(\n        belongs_to = "super::worker::Entity",\n        from = "Column::CashierId",\n        to = "super::worker::Column::Id"\n    )]\n    Cashier,\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "worker")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"There exist two relations between them:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"Bakery -> Worker (Manager)\n       -> Worker (Cashier)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["It's now possible to define the inverse side of the relations in ",(0,s.jsx)(n.code,{children:"Worker"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "worker")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub name: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::bakery::Entity", via = "Relation::Manager")]\n    BakeryManager,\n    #[sea_orm(has_many = "super::bakery::Entity", via = "Relation::Cashier")]\n    BakeryCashier,\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"These relations can then be used in queries:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'assert_eq!(\n    worker::Entity::find().join(\n        JoinType::LeftJoin,\n        worker::Relation::BakeryManager.def(),\n    )\n    .build(DbBackend::Sqlite)\n    .to_string(),\n    r#"SELECT "worker"."id", "worker"."name" FROM "worker"\n       LEFT JOIN "bakery" ON "worker"."id" = "bakery"."manager_id""#\n);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-of-transaction-with-generic-connections",children:"Use of transaction with generic connections"}),"\n",(0,s.jsxs)(n.p,{children:["You can already use ",(0,s.jsx)(n.code,{children:"TransactionTrait"})," as a generic parameter to define functions accepting any connection object that can initiate transactions."]}),"\n",(0,s.jsxs)(n.p,{children:["In SeaORM 2.0, there are new database-connection-like objects: ",(0,s.jsx)(n.code,{children:"RestrictedConnection"})," and ",(0,s.jsx)(n.code,{children:"RestrictedTransaction"}),". They implement ",(0,s.jsx)(n.code,{children:"ConnectionTrait"})," and ",(0,s.jsx)(n.code,{children:"TransactionTrait"}),", and behaves just like normal ",(0,s.jsx)(n.code,{children:"DatabaseConnection"}),"s except that they performs additional checks on queries."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Connection type"}),(0,s.jsx)(n.th,{children:"Associated transaction type"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DatabaseConnection"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"DatabaseTransaction"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"RestrictedConnection"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"RestrictedTransaction"})})]})]})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// new connection type\npub struct RestrictedConnection {\n    conn: DatabaseConnection, // just a wrapper\n    user_id: UserId,\n}\n\nimpl TransactionTrait for RestrictedConnection {\n    type Transaction = RestrictedTransaction; // added associated type\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Meaning the following would continue to work:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// accepts any one of DatabaseConnection / DatabaseTransaction / RestrictedConnection / RestrictedTransaction.\n// nested transactions will be spawned for transaction objects\nasync fn perform_actions<C: TransactionTrait>(\n    db: &C,\n    actions: &[Action],\n) -> Result<(), DbErr> {\n    let txn = db.begin().await?;\n\n    for action in actions {\n        txn.execute(perform(action)).await?;\n    }\n\n    txn.commit().await\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"removing-panics-from-api",children:"Removing panics from API"}),"\n",(0,s.jsxs)(n.p,{children:["SeaORM has a large API surface. We've already removed a great number of ",(0,s.jsx)(n.code,{children:"unwrap"}),'s from the codebase in 1.0 release, but some panics due to "mis-use of API" can still happen.']}),"\n",(0,s.jsx)(n.p,{children:"Once again, we've tried to remove the remaining panics."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2630",children:"#2630"})," Added new error variant ",(0,s.jsx)(n.code,{children:"BackendNotSupported"}),'. Previously, it panics with e.g. "Database backend doesn\'t support RETURNING"']}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"let result = cake::Entity::insert_many([])\n    .exec_with_returning_keys(db)\n    .await;\n\nif db.support_returning() {\n    // Postgres and SQLite\n    assert_eq!(result.unwrap(), []);\n} else {\n    // MySQL\n    assert!(matches!(result, Err(DbErr::BackendNotSupported { .. })));\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2627",children:"#2627"})," Added new error variant ",(0,s.jsx)(n.code,{children:"PrimaryKeyNotSet"}),'. Previously, it panics with "PrimaryKey is not set"']}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"assert!(matches!(\n    Update::one(cake::ActiveModel {\n        ..Default::default()\n    })\n    .exec(&db)\n    .await,\n    Err(DbErr::PrimaryKeyNotSet { .. })\n));\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2634",children:"#2634"})," Remove panics in ",(0,s.jsx)(n.code,{children:"Schema::create_enum_from_active_enum"})]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// method can now return None\nfn create_enum_from_active_enum<A>(&self) -> Option<TypeCreateStatement>\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2628",children:"#2628"})," Remove panickable APIs from insert"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"    /// Add a Model to `Insert`\n    ///\n    /// # Panics\n    ///\n    /// Panics if the rows have different column sets from what've previously\n    /// been cached in the query statement\n  - pub fn add<M>(mut self, m: M) -> Self\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2637",children:"#2637"})," Remove panics in loader"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"enhancements",children:"Enhancements"}),"\n",(0,s.jsx)(n.p,{children:"These are small touch\u2011ups, but added up they can make a big difference."}),"\n",(0,s.jsxs)(n.h3,{id:"added-shorthand-for-postgres--any",children:["Added shorthand for Postgres",(0,s.jsx)(n.code,{children:" = ANY"})]}),"\n",(0,s.jsxs)(n.p,{children:["Added ",(0,s.jsx)(n.code,{children:"ColumnTrait::eq_any"})," as a shorthand for the ",(0,s.jsx)(n.code,{children:" = ANY"})," operator. Postgres only."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// old: have to import sea-query\nuse sea_orm::sea_query::{Expr, extension::postgres::PgFunc};\n\ncake::Entity::find()\n    .filter(\n        // have to qualify column manually\n        Expr::col((cake::Entity, cake::Column::Id)).eq(PgFunc::any(vec![4, 5]))\n    );\n\n// new: just use sea-orm\nassert_eq!(\n    cake::Entity::find()\n        .filter(cake::Column::Id.eq_any(vec![4, 5]))\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name" FROM "cake"\n       WHERE "cake"."id" = ANY(ARRAY [4,5])"#\n);\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"added-big_pk_auto",children:["Added ",(0,s.jsx)(n.code,{children:"big_pk_auto"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// old\npub fn pk_auto<T: IntoIden>(name: T) -> ColumnDef {\n    integer(name).auto_increment().primary_key().take()\n}\n\n// new: same as above but use big integer\npub fn big_pk_auto<T: IntoIden>(name: T) -> ColumnDef {\n    big_integer(name).auto_increment().primary_key().take()\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"added-chronoutc-to-entity-prelude",children:["Added ",(0,s.jsx)(n.code,{children:"chrono::Utc"})," to entity prelude"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pub type ChronoUtc = chrono::Utc;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We can now rely on ",(0,s.jsx)(n.code,{children:"sea-orm"}),"'s re-export:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// old: chrono has to be added in Cargo.toml\nlet ts: ChronoDateTimeUtc = chrono::Utc::now();\n// new: use sea-orm's re-export\nlet ts: ChronoDateTimeUtc = ChronoUtc::now();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,s.jsxs)(n.h3,{id:"use-static-str-in-identifiers",children:["Use ",(0,s.jsx)(n.code,{children:"&'static str"})," in identifiers"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2667",children:"#2667"})," Changed ",(0,s.jsx)(n.code,{children:"IdenStatic"})," and ",(0,s.jsx)(n.code,{children:"EntityName"})," definition. This change stemmed from the ",(0,s.jsxs)(n.a,{href:"https://www.sea-ql.org/blog/2025-08-30-sea-query-1.0/#revamped-iden-type-system",children:["revamp of the ",(0,s.jsx)(n.code,{children:"Iden"})," type system"]})," in SeaQuery, in which ",(0,s.jsx)(n.code,{children:"&'static str"})," now has slightly less overhead."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"trait IdenStatic {\n    fn as_str(&self) -> &'static str; // added static lifetime\n}\ntrait EntityName {\n    fn table_name(&self) -> &'static str; // added static lifetime\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"querybuilder-is-no-longer-object-safe",children:[(0,s.jsx)(n.code,{children:"QueryBuilder"})," is no longer object safe"]}),"\n",(0,s.jsxs)(n.p,{children:["Removed ",(0,s.jsx)(n.code,{children:"DbBackend::get_query_builder()"})," because ",(0,s.jsx)(n.code,{children:"QueryBuilder"})," is no longer object safe. This change improved query building performance by 5-10%."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"impl DbBackend {\n    // This is removed\n  - fn get_query_builder(&self) -> Box<dyn QueryBuilder>;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Previously ",(0,s.jsx)(n.code,{children:"dyn SqlWriter"})," is used everywhere."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fn prepare_table_create_statement(\n    &self,\n    create: &TableCreateStatement,\n    sql: &mut dyn SqlWriter,\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, it's a generic method:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"fn prepare_table_create_statement(\n    &self,\n    create: &TableCreateStatement,\n    sql: &mut impl SqlWriter, // note the impl\n);\n"})}),"\n",(0,s.jsx)(n.p,{children:"This change shouldn't impact most users because we have the following API:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pub trait StatementBuilder {\n    fn build(&self, db_backend: &DbBackend) -> Statement;\n}\n\n// implemented for SelectStatement, InsertStatement, UpdateStatement, DeleteStatement, etc\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"changed-database-connection",children:["Changed ",(0,s.jsx)(n.code,{children:"Database Connection"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2671",children:"#2671"})," ",(0,s.jsx)(n.code,{children:"DatabaseConnection"})," is changed from enum to struct. The original enum is moved into ",(0,s.jsx)(n.code,{children:"DatabaseConnection::inner"}),". The new enum is named ",(0,s.jsx)(n.code,{children:"DatabaseConnectionType"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["This allows ",(0,s.jsx)(n.code,{children:"DatabaseConnection"})," to hold additional metadata."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// old\npub enum DatabaseConnection {\n    SqlxMySqlPoolConnection(crate::SqlxMySqlPoolConnection),\n    SqlxPostgresPoolConnection(crate::SqlxPostgresPoolConnection),\n    SqlxSqlitePoolConnection(crate::SqlxSqlitePoolConnection),\n    ..\n}\n\n// new\npub struct DatabaseConnection {\n    pub inner: DatabaseConnectionType,\n    ..\n}\n\npub enum DatabaseConnectionType {\n    SqlxMySqlPoolConnection(crate::SqlxMySqlPoolConnection),\n    SqlxPostgresPoolConnection(crate::SqlxPostgresPoolConnection),\n    SqlxSqlitePoolConnection(crate::SqlxSqlitePoolConnection),\n    ..\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"removed-derive-custom-column",children:["Removed ",(0,s.jsx)(n.code,{children:"Derive Custom Column"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2667",children:"#2667"})," Removed ",(0,s.jsx)(n.code,{children:"DeriveCustomColumn"})," macro and ",(0,s.jsx)(n.code,{children:"default_as_str"})," trait method. This was a legacy of the expanded entity format."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// This is no longer supported:\n#[derive(Copy, Clone, Debug, EnumIter, DeriveCustomColumn)]\npub enum Column {\n    Id,\n    Name,\n}\n\nimpl IdenStatic for Column {\n    fn as_str(&self) -> &str {\n        match self {\n            Self::Name => "my_name",\n            _ => self.default_as_str(),\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// Do the following instead:\n#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]\npub enum Column {\n    Id,\n    #[sea_orm(column_name = "my_name")]\n    Name,\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"upgrades",children:"Upgrades"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"tokio"})," is now used in place of ",(0,s.jsx)(n.code,{children:"async-std"})," in sea-orm-cli and examples as async-std has been deprecated."]}),"\n",(0,s.jsxs)(n.li,{children:["Returning is now enabled for SQLite by default. SQLite introduced returning in ",(0,s.jsx)(n.code,{children:"3.35"})," which was released in 2021, it should be the default by now."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/pull/2596",children:"#2596"})," Upgraded Rust Edition to 2024"]}),"\n",(0,s.jsxs)(n.li,{children:["Upgraded ",(0,s.jsx)(n.code,{children:"strum"})," to ",(0,s.jsx)(n.code,{children:"0.27"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"sql-server-support",children:"SQL Server Support"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/SeaORM-X/",children:"SQL Server for SeaORM"})," offers the same SeaORM API for MSSQL. We ported all test cases and examples, complemented by MSSQL specific documentation. If you are building enterprise software, you can ",(0,s.jsx)(n.a,{href:"https://forms.office.com/r/1MuRPJmYBR",children:"request commercial access"}),". It is currently based on SeaORM 1.0, but we will offer free upgrade to existing users when SeaORM 2.0 is finalized."]}),"\n",(0,s.jsx)(n.h2,{id:"\ufe0f-seaorm-pro-professional-admin-panel",children:"\ud83d\udda5\ufe0f SeaORM Pro: Professional Admin Panel"}),"\n",(0,s.jsx)("img",{src:"/blog/img/sea-orm-pro-light.png#light"}),"\n",(0,s.jsx)("img",{src:"/blog/img/sea-orm-pro-dark.png#dark"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/sea-orm-pro/",children:"SeaORM Pro"})," is an admin panel solution allowing you to quickly and easily launch an admin panel for your application - frontend development skills not required, but certainly nice to have!"]}),"\n",(0,s.jsx)(n.p,{children:"SeaORM Pro will be updated to support the latest features in SeaORM 2.0."}),"\n",(0,s.jsx)(n.p,{children:"Features:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Full CRUD"}),"\n",(0,s.jsx)(n.li,{children:"Built on React + GraphQL"}),"\n",(0,s.jsx)(n.li,{children:"Built-in GraphQL resolver"}),"\n",(0,s.jsx)(n.li,{children:"Customize the UI with TOML config"}),"\n",(0,s.jsxs)(n.li,{children:["Custom GraphQL endpoints ",(0,s.jsx)(n.em,{children:"(new in 2.0)"})]}),"\n",(0,s.jsxs)(n.li,{children:["Role Based Access Control ",(0,s.jsx)(n.em,{children:"(new in 2.0)"})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"more-to-come",children:"More to come"}),"\n",(0,s.jsx)(n.p,{children:"SeaORM 2.0 is shaping up to be our most significant release yet - with a few breaking changes, plenty of enhancements, and a clear focus on developer experience. We'll dive into Role Based Access Control in the next post, so keep an eye out for the next update!"}),"\n",(0,s.jsxs)(n.p,{children:["SeaORM 2.0 will launch alongside SeaQuery 1.0. If you make extensive use of SeaORM's underlying query builder, we recommend checking out our earlier blog post on ",(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/blog/2025-08-30-sea-query-1.0/",children:"SeaQuery 1.0"})," to get familiar with the changes."]}),"\n",(0,s.jsxs)(n.p,{children:["SeaORM 2.0 has reached its release candidate phase. We'd love for you to try it out and help shape the final release by ",(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/discussions/2548",children:"sharing your feedback"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"sponsors",children:"Sponsors"}),"\n",(0,s.jsx)(n.p,{children:"If you feel generous, a small donation will be greatly appreciated, and goes a long way towards sustaining the organization."}),"\n",(0,s.jsx)(n.h3,{id:"gold-sponsor",children:"Gold Sponsor"}),"\n",(0,s.jsx)("a",{href:"https://qdx.co/",children:(0,s.jsx)("img",{src:"https://www.sea-ql.org/static/sponsors/QDX.svg",width:"128"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://qdx.co/",children:"QDX"})," pioneers quantum dynamics\u2013powered drug discovery, leveraging AI and supercomputing to accelerate molecular modeling.\nWe're grateful to QDX for sponsoring the development of SeaORM, the SQL toolkit that powers their data intensive applications."]}),"\n",(0,s.jsx)(n.h3,{id:"github-sponsors",children:"GitHub Sponsors"}),"\n",(0,s.jsxs)(n.p,{children:["A big shout out to our ",(0,s.jsx)(n.a,{href:"https://github.com/sponsors/SeaQL",children:"GitHub sponsors"})," \ud83d\ude07:"]}),"\n",(0,s.jsx)("div",{class:"row",children:(0,s.jsx)("div",{class:"col col--12 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--lg",href:"https://github.com/subscribepro",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/8466133?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Subscribe Pro"})})]})})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/holly-hacker",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/13605369?u=9566a44f2d869f337a4909836487bb4a29c23b72&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Variant9"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/ryanswrt",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/87781?u=10a9d256e741f905f3dd2cf641de8b325720732e&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Ryan Swart"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/OteroRafael",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/175388115?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"OteroRafael"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/higumachan",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1011298?u=de4c2f0d0929c2c6dc433981912f794d0e50f2cd&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Yuta Hinokuma"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/wh7f",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/59872041?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"wh7f"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/marcson909",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/16665353?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"MS"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/numeusxyz",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/82152211?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Numeus"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/data-intuitive",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/15045722?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Data Intuitive"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/caido-community",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/168573261?v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Caido Community"})})]})}),(0,s.jsx)("div",{class:"col col--6 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--md",href:"https://github.com/marcusbuffett",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/1834328?u=fd066d99cf4a6333bfb3927d1c756af4bb8baf7e&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Marcus Buffett"})})]})})]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsxs)("div",{class:"row",children:[(0,s.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/yuly3",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/25814001?u=4b57756e7d8060e48262a9edba687927fe7934a6&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"MasakiMiyazaki"})})]})}),(0,s.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/kallydev",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/36319157?u=5be882aa4dbe7eea97b1a80a6473857369146df6&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"KallyDev"})})]})}),(0,s.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/manfredcml",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/27536502?u=b71636bdabbc698458b32e2ac05c5771ad41097e&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Manfred Lee"})})]})}),(0,s.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tugascript",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/64930104?u=ad9f63e8e221dbe71bf23de59e3611c99cda1181&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Afonso Barracha"})})]})}),(0,s.jsx)("div",{class:"col col--4 margin-bottom--md",children:(0,s.jsxs)("div",{class:"avatar",children:[(0,s.jsx)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/deansheather",children:(0,s.jsx)("img",{src:"https://avatars.githubusercontent.com/u/11241812?u=260538c7d8b8c3c5350dba175ebb8294358441e0&v=4"})}),(0,s.jsx)("div",{class:"avatar__intro",children:(0,s.jsx)("div",{class:"avatar__name",children:"Dean Sheather"})})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"rustacean-sticker-pack-",children:"Rustacean Sticker Pack \ud83e\udd80"}),"\n",(0,s.jsx)(n.p,{children:"The Rustacean Sticker Pack is the perfect way to express your passion for Rust.\nOur stickers are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"}),"\n",(0,s.jsx)(n.p,{children:"Moreover, all proceeds contributes directly to the ongoing development of SeaQL projects."}),"\n",(0,s.jsx)(n.p,{children:"Sticker Pack Contents:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG"}),"\n",(0,s.jsx)(n.li,{children:"Mascot of SeaQL: Terres the Hermit Crab"}),"\n",(0,s.jsx)(n.li,{children:"Mascot of Rust: Ferris the Crab"}),"\n",(0,s.jsx)(n.li,{children:"The Rustacean word"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.sea-ql.org/sticker-pack/",children:"Support SeaQL and get a Sticker Pack!"})}),"\n",(0,s.jsx)("a",{href:"https://www.sea-ql.org/sticker-pack/",children:(0,s.jsx)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8216:e=>{e.exports=JSON.parse('{"permalink":"/preview/pr-154/blog/2025-09-24-sea-orm-2.0","editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2025-09-24-sea-orm-2.0.md","source":"@site/blog/2025-09-24-sea-orm-2.0.md","title":"SeaORM 2.0: A closer look","description":"In the previous blog post, we highlighted some of the new features in SeaORM 2.0. In this post, we\'re going to take a closer look to some of the changes under the hood.","date":"2025-09-24T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/preview/pr-154/blog/tags/news"}],"readingTime":14.67,"hasTruncateMarker":false,"authors":[{"name":"SeaQL Team","title":"Chris Tsang","url":"https://github.com/SeaQL","imageURL":"https://www.sea-ql.org/blog/img/SeaQL.png","key":null,"page":null}],"frontMatter":{"slug":"2025-09-24-sea-orm-2.0","title":"SeaORM 2.0: A closer look","author":"SeaQL Team","author_title":"Chris Tsang","author_url":"https://github.com/SeaQL","author_image_url":"https://www.sea-ql.org/blog/img/SeaQL.png","image":"https://www.sea-ql.org/blog/img/SeaORM%202.0%20Banner.png","tags":["news"]},"unlisted":false,"prevItem":{"title":"Role Based Access Control in SeaORM 2.0","permalink":"/preview/pr-154/blog/2025-09-30-sea-orm-rbac"},"nextItem":{"title":"A Sneak Peek at SeaORM 2.0","permalink":"/preview/pr-154/blog/2025-09-16-sea-orm-2.0"}}')},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);