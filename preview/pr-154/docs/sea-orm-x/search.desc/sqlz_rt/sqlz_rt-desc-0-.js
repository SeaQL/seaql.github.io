searchState.loadedDescShard("sqlz_rt", 0, "Core runtime support for SQLz. <strong>Semver-exempt</strong>, not for …\nAn async mutex.\nRead bytes asynchronously.\nExtension methods for <code>Read</code>.\nWrite bytes asynchronously.\nExtension methods for <code>Write</code>.\nA TCP stream between a local and a remote socket.\nA Unix stream socket.\nSpawns a task and blocks the current thread on its result.\nCreates a “by reference” adaptor for this instance of …\nCreates a “by reference” adaptor for this instance of …\nTransforms this <code>Read</code> instance to a <code>Stream</code> over its bytes.\nTransforms this <code>Read</code> instance to a <code>Stream</code> over its bytes.\nCreates an adaptor which will chain this stream with …\nCreates an adaptor which will chain this stream with …\nConnects to the socket to the specified address.\nCreates a new TCP stream connected to the specified …\nFlushes the stream to ensure that all buffered contents …\nFlushes the stream to ensure that all buffered contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::os::unix::net::UnixStream</code> into its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::net::TcpStream</code> into its asynchronous …\nFilesystem manipulation operations.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nReturns the socket address of the local half of this …\nReturns the local address that this stream is connected to.\nAcquires the mutex.\nAcquires the mutex and clones a reference to it.\nAcquires the mutex and clones a reference to it using the …\nAcquires the mutex using the blocking strategy.\nCreates a new async mutex.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nCreates an unnamed pair of connected sockets.\nReceives data on the socket from the remote address to …\nReturns the socket address of the remote half of this …\nReturns the remote address that this stream is connected …\nAttempt to close the object.\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nAttempt to write bytes from <code>bufs</code> into the object using …\nReads some bytes from the byte stream.\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes from the byte stream.\nReads all bytes from the byte stream.\nReads all bytes from the byte stream and appends them into …\nReads all bytes from the byte stream and appends them into …\nLike <code>read</code>, except that it reads into a slice of buffers.\nLike <code>read</code>, except that it reads into a slice of buffers.\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nShuts down the read, write, or both halves of this …\nShuts down the read, write, or both halves of this …\nSleeps for the specified amount of time.\nSpawns a task.\nCreates an adaptor which will read at most <code>limit</code> bytes …\nCreates an adaptor which will read at most <code>limit</code> bytes …\nSpawns a task and blocks the current thread on its result.\nAwaits a future or times out after a duration of time.\nAttempts to acquire the mutex.\nAttempts to acquire the mutex and clone a reference to it.\nGets the value of the <code>IP_TTL</code> option for this socket.\nWrites some bytes into the byte stream.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites an entire buffer into the byte stream.\nWrites a formatted string into this writer, returning any …\nWrites a formatted string into this writer, returning any …\nLike <code>write</code>, except that it writes from a slice of buffers.\nLike <code>write</code>, except that it writes from a slice of buffers.\nCooperatively gives up a timeslice to the task scheduler.\nA builder for creating directories with configurable …\nAn entry in a directory.\nAn open file on the filesystem.\nA structure representing a type of file with accessors for …\nMetadata information about a file.\nA builder for opening files with configurable options.\nRepresentation of the various permissions on a file.\nA stream of entries in a directory.\nReturns the last access time of this metadata.\nConfigures the option for append mode.\nReturns the canonical form of a path.\nCopies the contents and permissions of a file to a new …\nCreates a directory with the configured options.\nOpens a file in write-only mode.\nConfigures the option for creating a new file if it doesn…\nCreates a new directory.\nCreates a new directory and all of its parents if they are …\nConfigures the option for creating a new file or failing …\nReturns the creation time listed in this metadata.\nReturns the bare name of this entry without the leading …\nReads the file type for this entry.\nReturns the file type for this metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a hard link on the filesystem.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this metadata is for a directory. The …\nTests whether this file type represents a directory. The …\nReturns <code>true</code> if this metadata is for a regular file. The …\nTests whether this file type represents a regular file. …\nReturns <code>true</code> if this metadata is for a symbolic link.\nTests whether this file type represents a symbolic link. …\nReturns the size of the file, in bytes, this metadata is …\nReads metadata for a path.\nReads the metadata for this entry.\nReads the file’s metadata.\nReturns the last modification time listed in this metadata.\nCreates a blank set of options.\nCreates a blank set of options.\nOpens a file in read-only mode.\nOpens a file with the configured options.\nReturns the full path to this entry.\nReturns the permissions of the file this metadata is for.\nReads the entire contents of a file as raw bytes.\nConfigures the option for read mode.\nReturns a stream of entries in a directory.\nReads a symbolic link and returns the path it points to.\nReads the entire contents of a file as a string.\nReturns <code>true</code> if these permissions describe a readonly …\nSets the option for recursive mode.\nRemoves an empty directory.\nRemoves a directory and all of its contents.\nRemoves a file.\nRenames a file or directory to a new location.\nTruncates or extends the file.\nChanges the permissions of a file or directory.\nChanges the permissions on the file.\nModifies the readonly flag for this set of permissions. If …\nReads metadata for a path without following symbolic links.\nSynchronizes OS-internal buffered contents and metadata to …\nSynchronizes OS-internal buffered contents to disk.\nConfigures the option for truncating the previous file.\nWrites a slice of bytes as the new contents of a file.\nConfigures the option for write mode.")