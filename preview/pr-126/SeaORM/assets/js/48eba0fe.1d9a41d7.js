"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[22678],{48859:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>c});var n=t(76687);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),p=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),y=p(t),c=a,d=y["".concat(s,".").concat(c)]||y[c]||m[c]||o;return t?n.createElement(d,i(i({ref:r},u),{},{components:t})):n.createElement(d,i({ref:r},u))}));function c(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},45050:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=t(31308),a=(t(76687),t(48859));const o={},i="Newtype",l={unversionedId:"generate-entity/newtype",id:"version-0.11.x/generate-entity/newtype",title:"Newtype",description:"You can define a newtype and use it as model field. Following traits have to be implemented.",source:"@site/versioned_docs/version-0.11.x/04-generate-entity/05-newtype.md",sourceDirName:"04-generate-entity",slug:"/generate-entity/newtype",permalink:"/preview/pr-126/SeaORM/docs/0.11.x/generate-entity/newtype",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.11.x/04-generate-entity/05-newtype.md",tags:[],version:"0.11.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1722493025,formattedLastUpdatedAt:"Aug 1, 2024",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Enumeration",permalink:"/preview/pr-126/SeaORM/docs/0.11.x/generate-entity/enumeration"},next:{title:"Basic Schema",permalink:"/preview/pr-126/SeaORM/docs/0.11.x/basic-crud/basic-schema"}},s={},p=[],u={toc:p};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"newtype"},"Newtype"),(0,a.kt)("p",null,"You can define a newtype and use it as model field. Following traits have to be implemented."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Implements ",(0,a.kt)("inlineCode",{parentName:"li"},"From<newtype>")," for ",(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.28/sea_query/value/enum.Value.html"},(0,a.kt)("inlineCode",{parentName:"a"},"sea_query::Value"))),(0,a.kt)("li",{parentName:"ol"},"Implements ",(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/sea-orm/0.11/sea_orm/trait.TryGetable.html"},(0,a.kt)("inlineCode",{parentName:"a"},"sea_orm::TryGetable"))," for ",(0,a.kt)("inlineCode",{parentName:"li"},"newtype")),(0,a.kt)("li",{parentName:"ol"},"Implements ",(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.28/sea_query/value/trait.ValueType.html"},(0,a.kt)("inlineCode",{parentName:"a"},"sea_query::ValueType"))," for ",(0,a.kt)("inlineCode",{parentName:"li"},"newtype")),(0,a.kt)("li",{parentName:"ol"},"Implements ",(0,a.kt)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.28/sea_query/value/trait.Nullable.html"},(0,a.kt)("inlineCode",{parentName:"a"},"sea_query::Nullable"))," for ",(0,a.kt)("inlineCode",{parentName:"li"},"newtype"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::entity::prelude::*;\nuse sea_orm::{TryGetError, TryGetable};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub str_vec: Option<StringVec>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct StringVec(pub Vec<String>);\n\nimpl From<StringVec> for Value {\n    fn from(source: StringVec) -> Self {\n        Value::String(serde_json::to_string(&source).ok().map(Box::new))\n    }\n}\n\nimpl sea_orm::TryGetable for StringVec {\n    fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, TryGetError> {\n        let json_str: String = res.try_get_by(idx).map_err(TryGetError::DbErr)?;\n        serde_json::from_str(&json_str).map_err(|e| TryGetError::DbErr(DbErr::Json(e.to_string())))\n    }\n}\n\nimpl sea_query::ValueType for StringVec {\n    fn try_from(v: Value) -> Result<Self, sea_query::ValueTypeErr> {\n        match v {\n            Value::String(Some(x)) => Ok(StringVec(\n                serde_json::from_str(&x).map_err(|_| sea_query::ValueTypeErr)?,\n            )),\n            _ => Err(sea_query::ValueTypeErr),\n        }\n    }\n\n    fn type_name() -> String {\n        stringify!(StringVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::String\n    }\n\n    fn column_type() -> sea_query::ColumnType {\n        sea_query::ColumnType::String(None)\n    }\n}\n\nimpl sea_query::Nullable for StringVec {\n    fn null() -> Value {\n        Value::String(None)\n    }\n}\n')))}m.isMDXComponent=!0}}]);