"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[767],{9680:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>k});var n=a(6687);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var m=n.createContext({}),s=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=s(t.components);return n.createElement(m.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,m=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=s(a),k=l,c=d["".concat(m,".").concat(k)]||d[k]||u[k]||r;return a?n.createElement(c,i(i({ref:e},p),{},{components:a})):n.createElement(c,i({ref:e},p))}));function k(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,i=new Array(r);i[0]=d;var o={};for(var m in e)hasOwnProperty.call(e,m)&&(o[m]=e[m]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9629:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(1308),l=(a(6687),a(9680));const r={slug:"2024-07-25-whats-new-in-seaorm-1.0",title:"What's new in SeaORM 1.0",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/blog/img/SeaQL.png",image:"https://www.sea-ql.org/blog/img/SeaORM%201.0%20Banner.png",tags:["news"]},i=void 0,o={permalink:"/preview/pr-126/blog/2024-07-25-whats-new-in-seaorm-1.0",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-07-25-whats-new-in-seaorm-1.0.md",source:"@site/blog/2024-07-25-whats-new-in-seaorm-1.0.md",title:"What's new in SeaORM 1.0",description:"This blog post summarizes the new features and enhancements introduced in SeaORM 1.0:",date:"2024-07-25T00:00:00.000Z",formattedDate:"July 25, 2024",tags:[{label:"news",permalink:"/preview/pr-126/blog/tags/news"}],readingTime:10.445,hasTruncateMarker:!1,authors:[{name:"SeaQL Team",title:"Chris Tsang",url:"https://github.com/SeaQL",imageURL:"https://www.sea-ql.org/blog/img/SeaQL.png"}],frontMatter:{slug:"2024-07-25-whats-new-in-seaorm-1.0",title:"What's new in SeaORM 1.0",author:"SeaQL Team",author_title:"Chris Tsang",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/blog/img/SeaQL.png",image:"https://www.sea-ql.org/blog/img/SeaORM%201.0%20Banner.png",tags:["news"]},nextItem:{title:"Adding GraphQL Support to Loco with Seaography",permalink:"/preview/pr-126/blog/2024-07-01-graphql-support-with-loco-seaography"}},m={authorsImageUrls:[void 0]},s=[{value:"New Features",id:"new-features",level:2},{value:"Refreshed migration schema definition",id:"refreshed-migration-schema-definition",level:3},{value:"Reworked SQLite Type Mappings",id:"reworked-sqlite-type-mappings",level:3},{value:"Introduce <code>PrimaryKeyArity</code> with <code>ARITY</code> Constant",id:"introduce-primarykeyarity-with-arity-constant",level:3},{value:"Associate <code>ActiveModel</code> to <code>EntityTrait</code>",id:"associate-activemodel-to-entitytrait",level:3},{value:"Auto Generated ActiveEnum String Values and Model Column Names",id:"auto-generated-activeenum-string-values-and-model-column-names",level:3},{value:"Enhancements",id:"enhancements",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Bug Fixes",id:"bug-fixes",level:2},{value:"Upgrades",id:"upgrades",level:2},{value:"House Keeping",id:"house-keeping",level:2},{value:"Release Planning",id:"release-planning",level:2},{value:"SQL Server Support",id:"sql-server-support",level:2},{value:"Sponsor",id:"sponsor",level:2},{value:"Gold Sponsors",id:"gold-sponsors",level:4},{value:"GitHub Sponsors",id:"github-sponsors",level:4},{value:"Rustacean Sticker Pack \ud83e\udd80",id:"rustacean-sticker-pack-",level:2}],p={toc:s};function u(t){let{components:e,...a}=t;return(0,l.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("img",{alt:"SeaORM 1.0 Banner",src:"/blog/img/SeaORM%201.0%20Banner.png"}),(0,l.kt)("p",null,"This blog post summarizes the new features and enhancements introduced in SeaORM ",(0,l.kt)("inlineCode",{parentName:"p"},"1.0"),":"),(0,l.kt)("h2",{id:"new-features"},"New Features"),(0,l.kt)("h3",{id:"refreshed-migration-schema-definition"},"Refreshed migration schema definition"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/pull/2099"},"#2099")," We are aware that SeaORM's migration scripts can sometimes look verbose. Thanks to the clever design made by Loco, we've refreshed the schema definition syntax."),(0,l.kt)("p",null,"An old migration script looks like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(\n                        ColumnDef::new(Users::Id)\n                            .integer()\n                            .not_null()\n                            .auto_increment()\n                            .primary_key(),\n                    )\n                    .col(ColumnDef::new(Users::Pid).uuid().not_null())\n                    .col(ColumnDef::new(Users::Email).string().not_null().unique_key())\n                    // ...\n    }\n}\n")),(0,l.kt)("p",null,"Now, using the new schema helpers, you can define the schema with a simplified syntax!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"// Remember to import `sea_orm_migration::schema::*`\nuse sea_orm_migration::{prelude::*, schema::*};\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table(\n                Table::create()\n                    .table(Users::Table)\n                    .if_not_exists()\n                    .col(pk_auto(Users::Id)) // Primary key with auto-increment\n                    .col(uuid(Users::Pid)) // UUID column\n                    .col(string_uniq(Users::Email)) // String column with unique and not null constraint\n                    .col(string(Users::Password)) // String column\n                    .col(string(Users::ApiKey).unique_key())\n                    .col(string(Users::Name))\n                    .col(string_null(Users::ResetToken)) // Nullable string column\n                    .col(timestamp_null(Users::ResetSentAt)) // Nullable timestamp column\n                    .col(string_null(Users::EmailVerificationToken))\n                    .col(timestamp_null(Users::EmailVerificationSentAt))\n                    .col(timestamp_null(Users::EmailVerifiedAt))\n                    .to_owned(),\n            )\n            .await\n    }\n\n    // ...\n}\n")),(0,l.kt)("p",null,"There are three variants for each commonly used column type:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<COLUMN_TYPE>()")," helper function, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"string()"),", define a non-null string column"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<COLUMN_TYPE>_null()")," helper function, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"string_null()"),", define a nullable string column"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<COLUMN_TYPE>_uniq()")," helper function, e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"string_uniq()"),", define a non-null and unique string column")),(0,l.kt)("p",null,"The new schema helpers can be used by importing ",(0,l.kt)("inlineCode",{parentName:"p"},"sea_orm_migration::schema::*"),". The migration library is fully backward compatible, so there is no rush to migrate old scripts. The new syntax is recommended for new scripts, and all examples in the SeaORM repository have been updated for demonstration. For advanced use cases, the old SeaQuery syntax can still be used."),(0,l.kt)("h3",{id:"reworked-sqlite-type-mappings"},"Reworked SQLite Type Mappings"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/pull/2077"},"sea-orm#2077")," ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-query/pull/735"},"sea-query#735")," ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-schema/pull/117"},"sea-schema#117")," We've reworked the type mappings for SQLite across the SeaQL ecosystem, such that SeaQuery and SeaSchema are now reciprocal to each other. Migrations written with SeaQuery can be rediscovered by ",(0,l.kt)("inlineCode",{parentName:"p"},"sea-orm-cli")," and generate compatible entities! In other words, the roundtrip is complete."),(0,l.kt)("p",null,"Data types will be mapped to SQLite types with a custom naming scheme following SQLite's affinity rule:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"INTEGER"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"integer"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"tiny_integer"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"small_integer"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"big_integer")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"boolean")," are stored as ",(0,l.kt)("inlineCode",{parentName:"li"},"integer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"REAL"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"float"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"double"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"decimal")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"money")," are stored as ",(0,l.kt)("inlineCode",{parentName:"li"},"real")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BLOB"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"blob")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"varbinary_blob")," are stored as ",(0,l.kt)("inlineCode",{parentName:"li"},"blob")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"TEXT"),": all other data types are stored as ",(0,l.kt)("inlineCode",{parentName:"li"},"text"),", including ",(0,l.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"char"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"text"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"json"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"uuid"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"date"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"time"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"datetime"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"timestamp"),", etc.")),(0,l.kt)("p",null,"To illustrate,"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    Table::create()\n        .table(Alias::new("strange"))\n        .col(ColumnDef::new(Alias::new("id")).integer().not_null().auto_increment().primary_key())\n        .col(ColumnDef::new(Alias::new("int1")).integer())\n        .col(ColumnDef::new(Alias::new("int2")).tiny_integer())\n        .col(ColumnDef::new(Alias::new("int3")).small_integer())\n        .col(ColumnDef::new(Alias::new("int4")).big_integer())\n        .col(ColumnDef::new(Alias::new("string1")).string())\n        .col(ColumnDef::new(Alias::new("string2")).string_len(24))\n        .col(ColumnDef::new(Alias::new("char1")).char())\n        .col(ColumnDef::new(Alias::new("char2")).char_len(24))\n        .col(ColumnDef::new(Alias::new("text_col")).text())\n        .col(ColumnDef::new(Alias::new("json_col")).json())\n        .col(ColumnDef::new(Alias::new("uuid_col")).uuid())\n        .col(ColumnDef::new(Alias::new("decimal1")).decimal())\n        .col(ColumnDef::new(Alias::new("decimal2")).decimal_len(12, 4))\n        .col(ColumnDef::new(Alias::new("money1")).money())\n        .col(ColumnDef::new(Alias::new("money2")).money_len(12, 4))\n        .col(ColumnDef::new(Alias::new("float_col")).float())\n        .col(ColumnDef::new(Alias::new("double_col")).double())\n        .col(ColumnDef::new(Alias::new("date_col")).date())\n        .col(ColumnDef::new(Alias::new("time_col")).time())\n        .col(ColumnDef::new(Alias::new("datetime_col")).date_time())\n        .col(ColumnDef::new(Alias::new("boolean_col")).boolean())\n        .col(ColumnDef::new(Alias::new("binary2")).binary_len(1024))\n        .col(ColumnDef::new(Alias::new("binary3")).var_binary(1024))\n        .to_string(SqliteQueryBuilder),\n    [\n        r#"CREATE TABLE "strange" ("#,\n            r#""id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,"#,\n            r#""int1" integer,"#,\n            r#""int2" tinyint,"#,\n            r#""int3" smallint,"#,\n            r#""int4" bigint,"#,\n            r#""string1" varchar,"#,\n            r#""string2" varchar(24),"#,\n            r#""char1" char,"#,\n            r#""char2" char(24),"#,\n            r#""text_col" text,"#,\n            r#""json_col" json_text,"#,\n            r#""uuid_col" uuid_text,"#,\n            r#""decimal1" real,"#,\n            r#""decimal2" real(12, 4),"#,\n            r#""money1" real_money,"#,\n            r#""money2" real_money(12, 4),"#,\n            r#""float_col" float,"#,\n            r#""double_col" double,"#,\n            r#""date_col" date_text,"#,\n            r#""time_col" time_text,"#,\n            r#""datetime_col" datetime_text,"#,\n            r#""boolean_col" boolean,"#,\n            r#""binary2" blob(1024),"#,\n            r#""binary3" varbinary_blob(1024)"#,\n        r#")"#,\n    ]\n    .join(" ")\n);\n')),(0,l.kt)("p",null,"The full type mapping table is ",(0,l.kt)("a",{parentName:"p",href:"https://docs.rs/sea-query/0.31.0-rc.4/sea_query/table/enum.ColumnType.html"},"documented here"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"ColumnType"),(0,l.kt)("th",{parentName:"tr",align:null},"MySQL data type"),(0,l.kt)("th",{parentName:"tr",align:null},"PostgreSQL data type"),(0,l.kt)("th",{parentName:"tr",align:null},"SQLite data type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Char"),(0,l.kt)("td",{parentName:"tr",align:null},"char"),(0,l.kt)("td",{parentName:"tr",align:null},"char"),(0,l.kt)("td",{parentName:"tr",align:null},"char")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"String"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Text"),(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TinyInteger"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SmallInteger"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Integer"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BigInteger"),(0,l.kt)("td",{parentName:"tr",align:null},"bigint"),(0,l.kt)("td",{parentName:"tr",align:null},"bigint"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TinyUnsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint unsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SmallUnsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint unsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"smallint")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Unsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"int unsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BigUnsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"bigint unsigned"),(0,l.kt)("td",{parentName:"tr",align:null},"bigint"),(0,l.kt)("td",{parentName:"tr",align:null},"integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Float"),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"real"),(0,l.kt)("td",{parentName:"tr",align:null},"float")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Double"),(0,l.kt)("td",{parentName:"tr",align:null},"double"),(0,l.kt)("td",{parentName:"tr",align:null},"double precision"),(0,l.kt)("td",{parentName:"tr",align:null},"double")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"real")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DateTime"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp without time zone"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TimestampWithTimeZone"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp with time zone"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp_with_timezone_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Time"),(0,l.kt)("td",{parentName:"tr",align:null},"time"),(0,l.kt)("td",{parentName:"tr",align:null},"time"),(0,l.kt)("td",{parentName:"tr",align:null},"time_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Date"),(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null},"date_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Year"),(0,l.kt)("td",{parentName:"tr",align:null},"year"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Interval"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"interval"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Binary"),(0,l.kt)("td",{parentName:"tr",align:null},"binary"),(0,l.kt)("td",{parentName:"tr",align:null},"bytea"),(0,l.kt)("td",{parentName:"tr",align:null},"blob")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"VarBinary"),(0,l.kt)("td",{parentName:"tr",align:null},"varbinary"),(0,l.kt)("td",{parentName:"tr",align:null},"bytea"),(0,l.kt)("td",{parentName:"tr",align:null},"varbinary_blob")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Bit"),(0,l.kt)("td",{parentName:"tr",align:null},"bit"),(0,l.kt)("td",{parentName:"tr",align:null},"bit"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"VarBit"),(0,l.kt)("td",{parentName:"tr",align:null},"bit"),(0,l.kt)("td",{parentName:"tr",align:null},"varbit"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Money"),(0,l.kt)("td",{parentName:"tr",align:null},"decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"money"),(0,l.kt)("td",{parentName:"tr",align:null},"real_money")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Json"),(0,l.kt)("td",{parentName:"tr",align:null},"json"),(0,l.kt)("td",{parentName:"tr",align:null},"json"),(0,l.kt)("td",{parentName:"tr",align:null},"json_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"JsonBinary"),(0,l.kt)("td",{parentName:"tr",align:null},"json"),(0,l.kt)("td",{parentName:"tr",align:null},"jsonb"),(0,l.kt)("td",{parentName:"tr",align:null},"jsonb_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Uuid"),(0,l.kt)("td",{parentName:"tr",align:null},"binary(16)"),(0,l.kt)("td",{parentName:"tr",align:null},"uuid"),(0,l.kt)("td",{parentName:"tr",align:null},"uuid_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Enum"),(0,l.kt)("td",{parentName:"tr",align:null},"ENUM(...)"),(0,l.kt)("td",{parentName:"tr",align:null},"ENUM_NAME"),(0,l.kt)("td",{parentName:"tr",align:null},"enum_text")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Array"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"DATA_TYPE[]"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Cidr"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"cidr"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Inet"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"inet"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MacAddr"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"macaddr"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"LTree"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A"),(0,l.kt)("td",{parentName:"tr",align:null},"ltree"),(0,l.kt)("td",{parentName:"tr",align:null},"N/A")))),(0,l.kt)("h3",{id:"introduce-primarykeyarity-with-arity-constant"},"Introduce ",(0,l.kt)("inlineCode",{parentName:"h3"},"PrimaryKeyArity")," with ",(0,l.kt)("inlineCode",{parentName:"h3"},"ARITY")," Constant"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/pull/2185"},"#2185")," Introduce ",(0,l.kt)("inlineCode",{parentName:"p"},"PrimaryKeyArity")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"ARITY")," constant"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"fn get_arity_of<E: EntityTrait>() -> usize {\n    E::PrimaryKey::iter().count() // before; runtime\n    <<E::PrimaryKey as PrimaryKeyTrait>::ValueType as PrimaryKeyArity>::ARITY // now; compile-time\n}\n")),(0,l.kt)("h3",{id:"associate-activemodel-to-entitytrait"},"Associate ",(0,l.kt)("inlineCode",{parentName:"h3"},"ActiveModel")," to ",(0,l.kt)("inlineCode",{parentName:"h3"},"EntityTrait")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/pull/2186"},"#2186")," Associate ",(0,l.kt)("inlineCode",{parentName:"p"},"ActiveModel")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"EntityTrait")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-diff"},"pub trait EntityTrait: EntityName {\n    type Model: ModelTrait<Entity = Self> + FromQueryResult;\n\n+   type ActiveModel: ActiveModelBehavior<Entity = Self>;\n\n    type Column: ColumnTrait;\n\n    type Relation: RelationTrait;\n\n    type PrimaryKey: PrimaryKeyTrait + PrimaryKeyToColumn<Column = Self::Column>;\n\n    // ...\n}\n")),(0,l.kt)("h3",{id:"auto-generated-activeenum-string-values-and-model-column-names"},"Auto Generated ActiveEnum String Values and Model Column Names"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/pull/2170"},"#2170")," Added ",(0,l.kt)("inlineCode",{parentName:"p"},"rename_all")," attribute to ",(0,l.kt)("inlineCode",{parentName:"p"},"DeriveEntityModel")," & ",(0,l.kt)("inlineCode",{parentName:"p"},"DeriveActiveEnum")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(DeriveEntityModel)]\n#[sea_orm(table_name = "user", rename_all = "camelCase")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    id: i32,\n    first_name: String, // firstName\n    #[sea_orm(column_name = "lAsTnAmE")]\n    last_name: String, // lAsTnAmE\n}\n\n#[derive(EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)", rename_all = "camelCase")]\npub enum TestEnum {\n    DefaultVariant, // defaultVariant\n    #[sea_orm(rename = "kebab-case")]\n    VariantKebabCase, // variant-kebab-case\n    #[sea_orm(rename = "snake_case")]\n    VariantSnakeCase, // variant_snake_case\n    #[sea_orm(string_value = "CuStOmStRiNgVaLuE")]\n    CustomStringValue, // CuStOmStRiNgVaLuE\n}\n')),(0,l.kt)("h2",{id:"enhancements"},"Enhancements"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2137"},"#2137")," ",(0,l.kt)("inlineCode",{parentName:"li"},"DerivePartialModel")," macro attribute ",(0,l.kt)("inlineCode",{parentName:"li"},"entity")," now supports ",(0,l.kt)("inlineCode",{parentName:"li"},"syn::Type"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(DerivePartialModel)]\n#[sea_orm(entity = "<entity::Model as ModelTrait>::Entity")]\nstruct EntityNameNotAIdent {\n    #[sea_orm(from_col = "foo2")]\n    _foo: i32,\n    #[sea_orm(from_col = "bar2")]\n    _bar: String,\n}\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2146"},"#2146")," Added ",(0,l.kt)("inlineCode",{parentName:"li"},"RelationDef::from_alias()"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name` FROM `cake`",\n        "LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`",\n        "LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`",\n    ]\n    .join(" ")\n);\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"QuerySelect::tbl_col_as")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2256"},"#2256"),"Added non-TLS runtime"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2244"},"#2244"),"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"Insert::on_conflict_do_nothing")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2255"},"#2255"),"Migration schema nullable column set NULL explicitly"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2194"},"#2194"),"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"ActiveValue::set_if_not_equals()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2197"},"#2197"),"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"ActiveValue::try_as_ref()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2228"},"#2228"),"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"QuerySelect::order_by_with_nulls")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2233"},"#2233"),"Expose ",(0,l.kt)("inlineCode",{parentName:"li"},"get_xxx_connection_pool")," by default"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2148"},"#2148")," Added ",(0,l.kt)("inlineCode",{parentName:"li"},"QueryResult::column_names")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2199"},"#2199")," ","[sea-orm-macro]"," Add ",(0,l.kt)("inlineCode",{parentName:"li"},"@generated")," in generated code"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/1665"},"#1665")," ","[sea-orm-macro]"," Qualify traits in ",(0,l.kt)("inlineCode",{parentName:"li"},"DeriveActiveModel")," macro"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2064"},"#2064")," ","[sea-orm-cli]"," Fix ",(0,l.kt)("inlineCode",{parentName:"li"},"migrate generate")," on empty ",(0,l.kt)("inlineCode",{parentName:"li"},"mod.rs")," files")),(0,l.kt)("h2",{id:"breaking-changes"},"Breaking Changes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2145"},"#2145")," Renamed ",(0,l.kt)("inlineCode",{parentName:"li"},"ConnectOptions::pool_options()")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"ConnectOptions::sqlx_pool_options()")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2145"},"#2145")," Made ",(0,l.kt)("inlineCode",{parentName:"li"},"sqlx_common")," private, hiding ",(0,l.kt)("inlineCode",{parentName:"li"},"sqlx_error_to_xxx_err")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2077"},"#2077"),", ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2078"},"#2078")," Rework SQLite type mappings"),(0,l.kt)("li",{parentName:"ul"},"MySQL ",(0,l.kt)("inlineCode",{parentName:"li"},"money")," type maps to ",(0,l.kt)("inlineCode",{parentName:"li"},"decimal")),(0,l.kt)("li",{parentName:"ul"},"MySQL ",(0,l.kt)("inlineCode",{parentName:"li"},"blob")," types moved to ",(0,l.kt)("inlineCode",{parentName:"li"},"extension::mysql::MySqlType"),"; ",(0,l.kt)("inlineCode",{parentName:"li"},"ColumnDef::blob()")," now takes no parameters")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    Table::create()\n        .table(BinaryType::Table)\n        .col(ColumnDef::new(BinaryType::BinaryLen).binary_len(32))\n        .col(ColumnDef::new(BinaryType::Binary).binary())\n        .col(ColumnDef::new(BinaryType::Blob).custom(MySqlType::Blob))\n        .col(ColumnDef::new(BinaryType::TinyBlob).custom(MySqlType::TinyBlob))\n        .col(ColumnDef::new(BinaryType::MediumBlob).custom(MySqlType::MediumBlob))\n        .col(ColumnDef::new(BinaryType::LongBlob).custom(MySqlType::LongBlob))\n        .to_string(MysqlQueryBuilder),\n    [\n        "CREATE TABLE `binary_type` (",\n            "`binlen` binary(32),",\n            "`bin` binary(1),",\n            "`b` blob,",\n            "`tb` tinyblob,",\n            "`mb` mediumblob,",\n            "`lb` longblob",\n        ")",\n    ]\n    .join(" ")\n);\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColumnDef::binary()")," sets column type as ",(0,l.kt)("inlineCode",{parentName:"li"},"binary")," with default length of ",(0,l.kt)("inlineCode",{parentName:"li"},"1")),(0,l.kt)("li",{parentName:"ul"},"Removed ",(0,l.kt)("inlineCode",{parentName:"li"},"BlobSize")," enum"),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"StringLen")," to represent length of ",(0,l.kt)("inlineCode",{parentName:"li"},"varchar")," / ",(0,l.kt)("inlineCode",{parentName:"li"},"varbinary"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"/// Length for var-char/binary; default to 255\npub enum StringLen {\n    /// String size\n    N(u32),\n    Max,\n    #[default]\n    None,\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ValueType::columntype()")," of ",(0,l.kt)("inlineCode",{parentName:"li"},"Vec<u8>")," maps to ",(0,l.kt)("inlineCode",{parentName:"li"},"VarBinary(StringLen::None)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ValueType::columntype()")," of ",(0,l.kt)("inlineCode",{parentName:"li"},"String")," maps to ",(0,l.kt)("inlineCode",{parentName:"li"},"String(StringLen::None)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColumnType::Bit")," maps to ",(0,l.kt)("inlineCode",{parentName:"li"},"bit")," for Postgres"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColumnType::Binary")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"ColumnType::VarBinary")," map to ",(0,l.kt)("inlineCode",{parentName:"li"},"bytea")," for Postgres"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Value::Decimal")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"Value::BigDecimal")," map to ",(0,l.kt)("inlineCode",{parentName:"li"},"real")," for SQLite"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ColumnType::Year(Option<MySqlYear>)")," changed to ",(0,l.kt)("inlineCode",{parentName:"li"},"ColumnType::Year"))),(0,l.kt)("h2",{id:"bug-fixes"},"Bug Fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2241"},"#2241")," Set schema search path in Postgres without enclosing single quote"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2254"},"#2254")," ","[sea-orm-cli]"," Generate ",(0,l.kt)("inlineCode",{parentName:"li"},"has_one")," relation for foreign key of unique index / constraint")),(0,l.kt)("h2",{id:"upgrades"},"Upgrades"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2267"},"#2267")," Upgrade ",(0,l.kt)("inlineCode",{parentName:"li"},"time")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.3.36")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2088"},"#2088")," Upgrade ",(0,l.kt)("inlineCode",{parentName:"li"},"strum")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.26")),(0,l.kt)("li",{parentName:"ul"},"Upgrade ",(0,l.kt)("inlineCode",{parentName:"li"},"sea-schema")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.15.0")),(0,l.kt)("li",{parentName:"ul"},"Upgrade ",(0,l.kt)("inlineCode",{parentName:"li"},"sea-query-binder")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.6.0")),(0,l.kt)("li",{parentName:"ul"},"Upgrade ",(0,l.kt)("inlineCode",{parentName:"li"},"sea-query")," to ",(0,l.kt)("inlineCode",{parentName:"li"},"0.31.0"))),(0,l.kt)("h2",{id:"house-keeping"},"House Keeping"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2177"},"#2177")," Reduce warnings in integration tests"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2140"},"#2140")," Improved Actix example to return 404 not found on unexpected inputs"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2154"},"#2154")," Deprecated Actix v3 example"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm/pull/2136"},"#2136")," Re-enabled ",(0,l.kt)("inlineCode",{parentName:"li"},"rocket_okapi")," example")),(0,l.kt)("h2",{id:"release-planning"},"Release Planning"),(0,l.kt)("p",null,"After the stablization, we hope that SeaORM can offer a stable API surface that developers can use in production for the years to come."),(0,l.kt)("p",null,"We'd not have more than 2 major releases in a year, and each major release will be maintained for at least 1 year. It's still tentative, but that's what we have in mind for now. Moreoever, it will actually allow us to ship new features more frequently!"),(0,l.kt)("h2",{id:"sql-server-support"},"SQL Server Support"),(0,l.kt)("p",null,"We've been planning ",(0,l.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaORM-X/"},"SQL Server for SeaORM")," for a while, but it was put aside in 2023 (which I regretted). Anyway SQL Server support is coming soon! It will first be offered as a closed beta to our partners. If you are interested, please join our ",(0,l.kt)("a",{parentName:"p",href:"https://forms.office.com/r/1MuRPJmYBR"},"waiting list"),"."),(0,l.kt)("h2",{id:"sponsor"},"Sponsor"),(0,l.kt)("p",null,"If you feel generous, a small donation will be greatly appreciated, and goes a long way towards sustaining the organization."),(0,l.kt)("p",null,"A big shout out to our ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/sponsors/SeaQL"},"sponsors")," \ud83d\ude07:"),(0,l.kt)("h4",{id:"gold-sponsors"},"Gold Sponsors"),(0,l.kt)("a",{href:"https://osmos.io/"},(0,l.kt)("img",{src:"https://www.sea-ql.org/static/sponsors/Osmos.svg#light",width:"238"}),(0,l.kt)("img",{src:"https://www.sea-ql.org/static/sponsors/Osmos-dark.svg#dark",width:"238"})),(0,l.kt)("h4",{id:"github-sponsors"},"GitHub Sponsors"),(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/tugascript"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/64930104?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Afonso Barracha")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/deansheather"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/11241812?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Dean Sheather")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/marcusbuffett"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/1834328?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Marcus Buffett")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/trevormerritt"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/3418965?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Trevor Merritt")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/ktanaka101"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/10344925?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Kentaro Tanaka")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/siketyan"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/12772118?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Naoki Ikeguchi")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/data-intuitive"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/15045722?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Data Intuitive")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/mmuellersoppart"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/16762461?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Marlon Mueller-Soppart")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/anshap1719"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/19164745?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Anshul Sanghi")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/yuly3"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/25814001?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"MasakiMiyazaki")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/manfredcml"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/27536502?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Manfred Lee")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/kallydev"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/36319157?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"KallyDev")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/ellik159"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/46644287?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"ul")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/caido"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/78991750?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Caido")))),(0,l.kt)("div",{class:"col col--6 margin-bottom--md"},(0,l.kt)("div",{class:"avatar"},(0,l.kt)("a",{class:"avatar__photo-link avatar__photo avatar__photo--sm",href:"https://github.com/Coolpany-SE"},(0,l.kt)("img",{src:"https://avatars.githubusercontent.com/u/96304487?v=4"})),(0,l.kt)("div",{class:"avatar__intro"},(0,l.kt)("div",{class:"avatar__name"},"Coolpany SE"))))),(0,l.kt)("h2",{id:"rustacean-sticker-pack-"},"Rustacean Sticker Pack \ud83e\udd80"),(0,l.kt)("p",null,"The Rustacean Sticker Pack is the perfect way to express your passion for Rust.\nOur stickers are made with a premium water-resistant vinyl with a unique matte finish.\nStick them on your laptop, notebook, or any gadget to show off your love for Rust!"),(0,l.kt)("p",null,"Moreover, all proceeds contributes directly to the ongoing development of SeaQL projects."),(0,l.kt)("p",null,"Sticker Pack Contents:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Logo of SeaQL projects: SeaQL, SeaORM, SeaQuery, Seaography, FireDBG"),(0,l.kt)("li",{parentName:"ul"},"Mascot of SeaQL: Terres the Hermit Crab"),(0,l.kt)("li",{parentName:"ul"},"Mascot of Rust: Ferris the Crab"),(0,l.kt)("li",{parentName:"ul"},"The Rustacean word")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://www.sea-ql.org/sticker-pack/"},"Support SeaQL and get a Sticker Pack!")),(0,l.kt)("a",{href:"https://www.sea-ql.org/sticker-pack/"},(0,l.kt)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})))}u.isMDXComponent=!0}}]);