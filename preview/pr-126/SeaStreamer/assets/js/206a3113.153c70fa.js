"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[6549],{8859:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>p});var a=r(6687);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),m=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=m(r),p=n,f=d["".concat(l,".").concat(p)]||d[p]||u[p]||s;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function p(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var m=2;m<s;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7077:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>m});var a=r(1308),n=(r(6687),r(8859));const s={},o="SeaStreamer Concepts",i={unversionedId:"introduction/sea-streamer",id:"introduction/sea-streamer",title:"SeaStreamer Concepts",description:"Streamer",source:"@site/docs/01-introduction/03-sea-streamer.md",sourceDirName:"01-introduction",slug:"/introduction/sea-streamer",permalink:"/preview/pr-126/SeaStreamer/docs/next/introduction/sea-streamer",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaStreamer/docs/01-introduction/03-sea-streamer.md",tags:[],version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1722493025,formattedLastUpdatedAt:"Aug 1, 2024",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Async Programming in Rust",permalink:"/preview/pr-126/SeaStreamer/docs/next/introduction/async-programming"},next:{title:"Configuring Features",permalink:"/preview/pr-126/SeaStreamer/docs/next/getting-started/configuration"}},l={},m=[{value:"Streamer",id:"streamer",level:2},{value:"Cluster",id:"cluster",level:3},{value:"Stream",id:"stream",level:2},{value:"Stream URL",id:"stream-url",level:3},{value:"Consumer",id:"consumer",level:2},{value:"Consumer Mode",id:"consumer-mode",level:3},{value:"Producer",id:"producer",level:2},{value:"Processor",id:"processor",level:2},{value:"Stream Semantics",id:"stream-semantics",level:2}],c={toc:m};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"seastreamer-concepts"},"SeaStreamer Concepts"),(0,n.kt)("h2",{id:"streamer"},"Streamer"),(0,n.kt)("p",null,"The streaming server. It is identified by an URI where all producers and consumers can connect to."),(0,n.kt)("h3",{id:"cluster"},"Cluster"),(0,n.kt)("p",null,"The streaming server is assumed to be a cluster: it can scale horizontally across multiple nodes."),(0,n.kt)("h2",{id:"stream"},"Stream"),(0,n.kt)("p",null,"A stream consists of a series of messages sharing the same key (known as ",(0,n.kt)("inlineCode",{parentName:"p"},"topic")," in Kafka). Each message has a timestamp, sequence number (known as ",(0,n.kt)("inlineCode",{parentName:"p"},"offset")," in Kafka), shard id (known as ",(0,n.kt)("inlineCode",{parentName:"p"},"partition number")," in Kafka), and payload. A message is uniquely identified by the (stream key, shard id, sequence number) tuple."),(0,n.kt)("h3",{id:"stream-url"},"Stream URL"),(0,n.kt)("p",null,"In SeaStreamer streams are resources, and can be accessed through a URL comprising (protocol, host, stream). An example stream URL is ",(0,n.kt)("inlineCode",{parentName:"p"},"kafka://streamer.sea-ql.org:12345/my_stream"),"."),(0,n.kt)("h2",{id:"consumer"},"Consumer"),(0,n.kt)("p",null,"A stream consumer subscribes to one or more streams and receive messages from one or more nodes in the cluster."),(0,n.kt)("p",null,"A consumer can rewind a stream to any point (addressed by timestamp or sequence number) and continue streaming."),(0,n.kt)("h3",{id:"consumer-mode"},"Consumer Mode"),(0,n.kt)("p",null,"There are three consuming modes:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Real-time: we only care about the latest messages and would be okay to miss old data"),(0,n.kt)("li",{parentName:"ol"},"Resumable: when the consumer resubscribes, it will resume from the last consumed message"),(0,n.kt)("li",{parentName:"ol"},"Load-balanced: like Resumable, but with multiple consumers sharing the same set of streams")),(0,n.kt)("h2",{id:"producer"},"Producer"),(0,n.kt)("p",null,"A stream producer send messages to a streaming server, where the server would store the messages within the cluster, and deliver them to clients."),(0,n.kt)("p",null,"A producer can send a message with any stream key, but in SeaStreamer we recommend you to anchor each producer to a particular stream key."),(0,n.kt)("h2",{id:"processor"},"Processor"),(0,n.kt)("p",null,"A stream processor is a consumer and producer at the same time. It consumes messages, transforms them and produces another stream."),(0,n.kt)("p",null,"SeaStreamer aims to make it easy and flexible to develop and operate stream processors."),(0,n.kt)("h2",{id:"stream-semantics"},"Stream Semantics"),(0,n.kt)("p",null,"Advanced concepts, like sharding, load-balancing and transactions are backend-specific and you should read the relevant documentation of the streaming backend."))}u.isMDXComponent=!0}}]);