searchState.loadedDescShard("polling", 0, "Portable interface to epoll, kqueue, event ports, and IOCP.\nA resource with a raw file descriptor.\nA resource with a borrowed file descriptor.\nPoll in edge-triggered mode.\nPoll in both edge-triggered and oneshot mode.\nIndicates that a file descriptor or socket can read or …\nA container for I/O events.\nPoll in level-triggered mode.\nPoll in oneshot mode.\nThe mode in which the poller waits for I/O events.\nWaits for I/O events.\nAdds a file descriptor or socket to the poller.\nAdds a file descriptor or socket to the poller in the …\nAll kinds of events (readable and writable).\nGet the total capacity of the list.\nDelete all of the events in the container.\nRemove any extra information from this event.\nRemoves a file descriptor or socket from the poller.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTells if this event is the result of a connection failure.\nReturns <code>true</code> if the container contains no events.\nTells if this event is the result of a connection failure.\nTell if this event is the result of an interrupt …\nTell if this event is the result of a priority …\nCreate a new iterator over I/O events.\nKey identifying the file descriptor or socket.\nReturns the number of events in the container.\nModifies the interest in a file descriptor or socket.\nModifies interest in a file descriptor or socket to the …\nCreates a new poller.\nCreate a new container for events, using the default …\nCreate a new event.\nNo events.\nWakes up the current or the following invocation of <code>wait()</code>.\nPlatform-specific functionality.\nReturns the raw file descriptor.\nOnly the readable event.\nCan it do a read operation without blocking?\nAdd interruption events to this interest.\nAdd priority events to this interest.\nReturns the borrowed file descriptor.\nTell whether or not this <code>Poller</code> supports edge-triggered …\nTell whether or not this <code>Poller</code> supports level-triggered …\nWaits for at least one I/O event and returns the number of …\nCreate a new container with the provided capacity.\nAdd interruption events to this interest.\nGet a version of this event with no extra information.\nAdd priority events to this interest.\nOnly the writable event.\nCan it do a write operation without blocking?\nFunctionality that is only available for <code>kqueue</code>-based …\nThe process executed a new process.\nThe process exited.\nA filter that can be registered into a <code>kqueue</code>.\nThe process was forked.\nFunctionality that is only available for <code>kqueue</code>-based …\nMonitor a child process.\nThe operations that a monitored process can perform.\nMonitor this signal number.\nWait for a timeout to expire.\nAdd a filter to the poller.\nRemove a filter from the poller.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Process</code> from a PID.\nIdentifier for the timer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModify a filter in the poller.\nMonitor a child process.\nThe timeout to wait for.")