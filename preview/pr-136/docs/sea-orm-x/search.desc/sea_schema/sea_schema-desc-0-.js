searchState.loadedDescShard("sea_schema", 0, "This module handles discovery of a schema from an SQLite …\nTo represent MS SQL’s schema definitions\nTo query &amp; parse MS SQL’s INFORMATION_SCHEMA and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTo parse MS SQL’s INFORMATION_SCHEMA\nTo query MS SQL’s INFORMATION_SCHEMA\nTo write [<code>mssql::Schema</code>] to SQL statements\nApplies to: SQL Server 2014 (12.x) and later.\nRef: …\nThe synonym for double precision is float(53).\nThe synonym for double precision is float(53).\nSize in bytes\nApplies to: SQL Server 2012 (11.x) and later.\n<code>NONCLUSTERED HASH</code> indexes are supported only on …\nThe synonym for real is float(24).\nThe synonym for real is float(24).\nMS SQL data types\nSort tables by name.\nBackward-compatible binary sort order.\nBinary sort order that uses code-point comparison …\nThe type of the column with additional definitions, e.g. …\nThe unique name for the collation if the column is …\nName of this column\nThe columns composing this foreign key\nColumn comment\nDefault value expression for this column, if any\ngeneration expression\ndatetime: fractional seconds precision; time: fractional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the identity property set\nIndex is part of a PRIMARY KEY constraint\nIndex is part of a UNIQUE constraint\nthe number of bits that are used to store the mantissa of …\nThe name of the column\nThe name of the foreign key\nName of the index\nThe name of the table\nCan this column contains null\nDelete rule\nUpdate rule\nOrder of this index part\nThe parts composing this index\nThe maximum total number of decimal digits to be stored.\nThe columns composing the index of the referenced table\nReferenced table name\nThe number of decimal digits that are stored to the right …\nSort tables by topological order, considering foreign key …\nThere are some indices cannot be created in the same …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nForeignKeyReferenceQueryResult must be sorted by …\nIndexQueryResult must be sorted by (TableName, IndexName, …\nRef: …\nRef: …\nRef: …\nRef: …\nRef: …\nRef: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo represent MySQL’s schema definitions\nTo query &amp; parse MySQL’s INFORMATION_SCHEMA and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTo parse MySQL’s INFORMATION_SCHEMA\nTo query MySQL’s INFORMATION_SCHEMA\nTo write [<code>mysql::Schema</code>] to SQL statements\nRef: …\nRef: …\nThis column is the first column of a non-unique key\nThis column is not the first column of any key\nThis column is part of the primary key\nAll built-in types of MySQL, excluding synonyms\nThis column is the first column of a unique key\nAuto increment\nThe type of the column with additional definitions, e.g. …\nIdentifier for this column. If functional is true, may …\nThe columns composing this foreign key\nUser comments\nUser comments\nNumber of decimal digits.\nDefault value expression for this column, if any\nThis column has a default value expression\ngeneration expression\nThe generation expression if this is a generated column\nExtra definitions for this column, e.g. auto_increment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrue if part of the index is computed\nThis is a generated column\nBTree (the default), full-text etc\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the system is MariaDB\nReturn true if the system is not MariaDB\nIs this column indexed\nFor integer types, M is the maximum display width …\nThe name of the column\nThe name of the foreign key\nThe name of the index\nThe name of the table\nCan this column contains null\nDoes this index allow null values\nAction on delete\nAction on update\nOnly applies to timestamp or datetime\nAscending, descending or unordered\nThe parts composing this index\nThe columns composing the index of the referenced table\nReferenced table name\nIf the whole column is indexed, this value is null. …\nAdditional suffix\nThe system string. it may be: <code>0ubuntu0.*</code> or <code>MariaDB</code>\nDoes this index requires unique values\nWhether this number is unsigned\nThe version number converted to integer using the …\nReturn the version version as string. e.g. 8.0.1\nDeprecated. Prefix 0 up to Z number of digits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nForeignKeyQueryResult must be sorted by (TableName, …\nIndexQueryResult must be sorted by (TableName, IndexName, …\nRef: …\nRef: …\nRef: …\nRef: …\nRef: …\nRef: …\nRef: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo query &amp; parse MySQL’s INFORMATION_SCHEMA and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe precision (number of significan digits) and scale (the …\nVariable-length multidimensional array\nVariable-length multidimensional array\nDefines an enum for the PostgreSQL module\n64 bit integer\n64 bit integer\n64 bit autoincrementing integer\n64 bit autoincrementing integer\nFixed length bit string\nFixed length bit string\nOne byte boolean value\nOne byte boolean value\nRectangular box\nRectangular box\nVariable length binary string\nVariable length binary string\nFixed-length character array; blank padded\nFixed-length character array; blank padded\nA constraint which states that a value must satisfy the …\nIPv4 and IPv6 networks\nIPv4 and IPv6 networks\nCircle composed of a center point and radius\nCircle composed of a center point and radius\nAn enum consisting of all constraints\nDate without time of day\nDate without time of day\nRange of a date\nRange of a date\nUser-specified precision number\nUser-specified precision number\n64 bit floating-point\n64 bit floating-point\nDefines an PostgreSQL\nDefines an PostgreSQL\nDefines an enum for the PostgreSQL module\nA constraint that ensures that, if any two rows are …\nIPPv4 and IPv6 hosts and networks\nIPPv4 and IPv6 hosts and networks\nRange of an integer\nRange of an integer\nRange of a bigint\nRange of a bigint\n32 bit integer\n32 bit integer\nTime interval\nTime interval\nJSON data checked for validity and with additional …\nJSON data checked for validity and with additional …\nJSON data stored in a decomposed binary format that can be …\nJSON data stored in a decomposed binary format that can be …\nInfinite line\nInfinite line\nFinite line segment\nFinite line segment\n6 byte MAC address\n6 byte MAC address\n8 byte MAC address in EUI-64 format\n8 byte MAC address in EUI-64 format\nCurrency amount; 64 bits with a fractional precision …\nCurrency amount; 64 bits with a fractional precision …\nThe constraint that a value must not be null\nRange of a numeric\nRange of a numeric\nUser-specified precision number\nUser-specified precision number\nClosed or open path\nClosed or open path\nA log sequence number\nA log sequence number\nPoint on a plane\nPoint on a plane\nPolygon (similar to a closed path)\nPolygon (similar to a closed path)\nA constraint stating that the given columns act as a …\n32 bit floating-point\n32 bit floating-point\nA constraint that column references the values appearing …\n32 bit autoincrementing integer\n32 bit autoincrementing integer\n16 bit integer\n16 bit integer\n16 bit autoincrementing integer\n16 bit autoincrementing integer\nInformation relating to the table, but not its individual …\nVariable, unlimited length character array\nVariable, unlimited length character array\nTime without date\nTime without date\nDate and time\nDate and time\nA list of lexemes that are to be searched for, and can be …\nA list of lexemes that are to be searched for, and can be …\nRange of a timestamp without time zone\nRange of a timestamp without time zone\nRange of a timestamp with time zone\nRange of a timestamp with time zone\nA sorted list of distinct lexemes which are words that …\nA sorted list of distinct lexemes which are words that …\nAll built-in types of PostgreSQL, excluding synonyms\nThat each set of values for these columns must be unique …\nA universally unique identifier as defined by RFC 4122, …\nA universally unique identifier as defined by RFC 4122, …\nVariable length bit string\nVariable length bit string\nVariable-length character array with limit\nVariable-length character array with limit\nXML data checked for well-formedness and with additional …\nXML data checked for well-formedness and with additional …\nThe type of the column with any additional definitions …\nArray type\nThe default value experssion for this column, if any\nThe Boolean expression that must be satisfied\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe generation expression for this column, if it is a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the column\nIf marked with NO INHERIT, the constraint will not …\nThe number of significant digits in the number; a maximum …\nThe count of decimal digits in the fractional part; …\nDefines the name of the PostgreSQL enum identifier\nHolds the fields of the <code>ENUM</code>\nConverts the EnumDef to a TypeCreateStatement\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssumed to be ordered by table name, then constraint name, …\nThis column is null\nRef: …\nThis column is null\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRef: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn SQLite column definition\nThe default types for an SQLite <code>dflt_value</code>\nIndexes the actions performed on the foreign keys of a …\nIndexes the foreign keys\nMaps the index and all columns in the index which is the …\nMaps to the SQLite <code>MATCH</code> actions\nDefines a table for SQLite\nWhether the primary key should autoincrement\nA list of all the columns and their types\nA list of UNIQUE and PRIMARY KEY constraints on the table\nA list of foreign keys in the table\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a list of all the columns in the table mapped as …\nGet a list of most of the UNIQUE and PRIMARY KEY …\nGet a list of all the foreign keys in the table\nGet a list of all the indexes in the table. Note that this …\nA list of the indexes in the table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe table name\nCheck if the primary key in the table is set to …\nIs it a SQLindex\nWrite all the discovered index into a IndexCreateStatement\nThis type simplifies error handling\nContains the error value\nContains the success value\nPerforms all the methods for schema discovery of a SQLite …\nDiscover all the tables in a SQLite database\nDiscover table indexes\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInstantiate a new database connection to the database …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")