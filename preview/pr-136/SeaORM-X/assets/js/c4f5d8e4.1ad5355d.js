"use strict";(self.webpackChunksea_orm_x=self.webpackChunksea_orm_x||[]).push([[195],{4652:(e,n,t)=>{t.r(n),t.d(n,{default:()=>R});var a=t(6687),o=t(4231),l=t(6945),r=t(1421);const i="heroBanner_qdFl",s="buttons_AeoN",c="homepageBanner_mBTI",d="homepageLogo_ewR0";var m=t(1308),u=t(4923);const _="features_xdhU";var p=t(8901);const y=[{title:"Async",icon:a.createElement(p.V5G,{size:26}),description:a.createElement(a.Fragment,null,"Relying on SQLx and tiberius, SeaORM X is a new library with async support from day 1.")},{title:"Dynamic",icon:a.createElement(p.Ktg,{size:26}),description:a.createElement(a.Fragment,null,"Built upon SeaQuery X, SeaORM X allows you to build complex dynamic queries.")},{title:"Testable",icon:a.createElement(p.ZSR,{size:26}),description:a.createElement(a.Fragment,null,"Use mock connections and/or SQLite to write tests for your application logic.")},{title:"Service Oriented",icon:a.createElement(p.x_i,{size:26}),description:a.createElement(a.Fragment,null,"Quickly build services that join, filter, sort and paginate data in REST, GraphQL and gRPC APIs.")}];function f(e){let{icon:n,title:t,description:o}=e;return a.createElement("div",{className:(0,u.Z)("col col--6")},a.createElement("div",{style:{paddingBottom:"20px",paddingTop:"20px"}},a.createElement("div",{style:{display:"flex"}},a.createElement("div",{style:{paddingRight:"22px"}},n),a.createElement("h3",{style:{fontSize:"20px",color:"var(--ifm-color-primary)"}},t)),a.createElement("p",null,o)))}function g(){return a.createElement("section",{className:(0,u.Z)("home-section","home-section-alt",_)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:"col col--11 col--offset-1"},a.createElement("div",{className:"row"},y.map(((e,n)=>a.createElement(f,(0,m.Z)({key:n},e)))))))))}var h=t(3344),E=t(4609);const v="features_SiWs";var S=t(9798),N=t(8495),b=t(8963);(void 0!==t.g?t.g:window).Prism=b.Z,t(2928);const C=[{title:"Query Builder",code:'// A table create statement\nlet table = Table::create()\n    .table(Glyph::Table)\n    .col(ColumnDef::new(Glyph::Id).integer().not_null().auto_increment().primary_key())\n    .col(ColumnDef::new(Glyph::Aspect).integer().not_null())\n    .col(ColumnDef::new(Glyph::Image).string().not_null())\n    .foreign_key(\n        ForeignKey::create()\n            .name("FK_2e303c3a712662f1fc2a4d0aad6")\n            .from(Glyph::Table, Glyph::Id)\n            .to(CharGlyph::Table, CharGlyph::GlyphId)\n            .on_delete(ForeignKeyAction::Cascade)\n            .on_update(ForeignKeyAction::Cascade)\n    )\n    .to_owned();\n\nassert_eq!(\n    table.to_string(MsSqlQueryBuilder),\n    [\n        r#"CREATE TABLE [glyph] ("#,\n            r#"[id] int NOT NULL IDENTITY PRIMARY KEY,"#,\n            r#"[aspect] int NOT NULL,"#,\n            r#"[image] nvarchar(255) NOT NULL,"#,\n            r#"CONSTRAINT [FK_2e303c3a712662f1fc2a4d0aad6]"#,\n                r#"FOREIGN KEY ([id]) REFERENCES [character_glyph] ([glyph_id])"#,\n                r#"ON DELETE CASCADE ON UPDATE CASCADE"#,\n        r#")"#,\n    ].join(" ")\n);\n\n// A prepared select statement\nassert_eq!(\n    Query::select()\n        .column(Glyph::Image)\n        .from(Glyph::Table)\n        .and_where(Expr::col(Glyph::Image).like("A"))\n        .and_where(Expr::col(Glyph::Id).is_in([1, 2, 3]))\n        .build(MsSqlQueryBuilder),\n    (\n        "SELECT [image] FROM [glyph] WHERE [image] LIKE @P1 AND [id] IN (@P2, @P3, @P4)"\n            .to_owned(),\n        Values(vec![\n            Value::String(Some(Box::new("A".to_owned()))),\n            Value::Int(Some(1)),\n            Value::Int(Some(2)),\n            Value::Int(Some(3))\n        ])\n    )\n);\n\n// A raw select statement\nassert_eq!(\n    Query::select()\n        .column(Glyph::Id)\n        .from(Glyph::Table)\n        .cond_where(\n            Cond::any()\n                .add(\n                    Cond::all()\n                        .add(Expr::col(Glyph::Aspect).is_null())\n                        .add(Expr::col(Glyph::Image).is_null())\n                )\n                .add(\n                    Cond::all()\n                        .add(Expr::col(Glyph::Aspect).is_in([3, 4]))\n                        .add(Expr::col(Glyph::Image).like("A%"))\n                )\n        )\n        .to_string(MsSqlQueryBuilder),\n    [\n        r#"SELECT [id] FROM [glyph]"#,\n        r#"WHERE ([aspect] IS NULL AND [image] IS NULL)"#,\n        r#"OR ([aspect] IN (3, 4) AND [image] LIKE \'A%\')"#,\n    ]\n    .join(" ")\n);'},{title:"Schema Discovery",code:'let options: MsSqlConnectOptions = "mssql://sa:YourStrong()Passw0rd@localhost/AdventureWorksLT2016".parse()?;\nlet connection = MsSqlPool::connect_with(options).await?;\n// Set the target schema: "SalesLT" or None (defaults to "dbo")\nlet schema_discovery = SchemaDiscovery::new(connection, Some("SalesLT"));\n\nassert_eq!(\n    schema_discovery.discover().await?,\n    Schema {\n        database: "AdventureWorksLT2016",\n        schema: "SalesLT",\n        version: Version {\n            name: "Microsoft SQL Server 2017",\n            service_pack: "RTM-CU31-GDR",\n            version: "14.0.3465.1",\n            edition: "Developer Edition",\n        },\n        tables: vec![\n            TableDef {\n                name: "Address",\n                columns: vec![\n                    ColumnInfo {\n                        name: "AddressID",\n                        col_type: Int,\n                        null: false,\n                        is_identity: true,\n                        collation: None,\n                        default: None,\n                        comment: Some("Primary key for Address records."),\n                    },\n                    ColumnInfo {\n                        name: "AddressLine1",\n                        col_type: Nvarchar(N(60)),\n                        null: false,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: Some("First street address line."),\n                    },\n                    ColumnInfo {\n                        name: "AddressLine2",\n                        col_type: Nvarchar(N(60)),\n                        null: true,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: Some("Second street address line."),\n                    },\n                    ColumnInfo {\n                        name: "City",\n                        col_type: Nvarchar(N(30)),\n                        null: false,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: Some("Name of the city."),\n                    },\n                    ColumnInfo {\n                        name: "StateProvince",\n                        col_type: Nvarchar(N(50)),\n                        null: false,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: Some("Name of state or province."),\n                    },\n                    ColumnInfo {\n                        name: "CountryRegion",\n                        col_type: Nvarchar(N(50)),\n                        null: false,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: None,\n                    },\n                    ColumnInfo {\n                        name: "PostalCode",\n                        col_type: Nvarchar(N(15)),\n                        null: false,\n                        is_identity: false,\n                        collation: Some(Collation("SQL_Latin1_General_CP1_CI_AS")),\n                        default: None,\n                        comment: Some("Postal code for the street address."),\n                    },\n                    ColumnInfo {\n                        name: "rowguid",\n                        col_type: UniqueIdentifier,\n                        null: false,\n                        is_identity: false,\n                        collation: None,\n                        default: Some(NewId),\n                        comment: Some("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample."),\n                    },\n                    ColumnInfo {\n                        name: "ModifiedDate",\n                        col_type: DateTime,\n                        null: false,\n                        is_identity: false,\n                        collation: None,\n                        default: Some(GetDate),\n                        comment: Some("Date and time the record was last updated."),\n                    },\n                ],\n                indexes: vec![\n                    IndexInfo {\n                        is_primary_key: false,\n                        is_unique: true,\n                        name: "AK_Address_rowguid",\n                        index_type: NonClustered,\n                        parts: vec![\n                            IndexPart { column: "rowguid", order: Ascending },\n                        ],\n                    },\n                    IndexInfo {\n                        is_primary_key: false,\n                        is_unique: false,\n                        name: "IX_Address_AddressLine1_AddressLine2_City_StateProvince_PostalCode_CountryRegion",\n                        index_type: NonClustered,\n                        parts: vec![\n                            IndexPart { column: "AddressLine1", order: Ascending },\n                            IndexPart { column: "AddressLine2", order: Ascending },\n                            IndexPart { column: "City", order: Ascending },\n                            IndexPart { column: "StateProvince", order: Ascending },\n                            IndexPart { column: "PostalCode", order: Ascending },\n                            IndexPart { column: "CountryRegion", order: Ascending },\n                        ],\n                    },\n                    IndexInfo {\n                        is_primary_key: false,\n                        is_unique: false,\n                        name: "IX_Address_StateProvince",\n                        index_type: NonClustered,\n                        parts: vec![\n                            IndexPart { column: "StateProvince", order: Ascending },\n                        ],\n                    },\n                    IndexInfo {\n                        is_primary_key: true,\n                        is_unique: true,\n                        name: "PK_Address_AddressID",\n                        index_type: Clustered,\n                        parts: vec![\n                            IndexPart { column: "AddressID", order: Ascending },\n                        ],\n                    },\n                ],\n                foreign_keys: vec![],\n                comment: Some("Street address information for customers."),\n            },\n            // ...\n        ],\n    }\n);'},{title:"Entity Generation",lang:"shell",code:'# Generate entity file from database schema\n$ sea-orm-cli generate entity --database-url "mssql://sa:YourStrong()Passw0rd@localhost/AdventureWorksLT2016" --database-schema "SalesLT"\n\nConnecting to MSSQL ...\nDiscovering schema ...\n... discovered.\nGenerating address.rs\n    > Column `AddressID`: i32, auto_increment, not_null\n    > Column `AddressLine1`: String, not_null\n    > Column `AddressLine2`: Option<String>\n    > Column `City`: String, not_null\n    > Column `StateProvince`: String, not_null\n    > Column `CountryRegion`: String, not_null\n    > Column `PostalCode`: String, not_null\n    > Column `rowguid`: Uuid, not_null, unique\n    > Column `ModifiedDate`: DateTime, not_null\n...\n\n\n# Inside the generated entity file\n$ cat address.rs\n\nuse sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]\n#[sea_orm(schema_name = "SalesLT", table_name = "Address")]\npub struct Model {\n    #[sea_orm(column_name = "AddressID", primary_key)]\n    pub address_id: i32,\n    #[sea_orm(column_name = "AddressLine1")]\n    pub address_line1: String,\n    #[sea_orm(column_name = "AddressLine2")]\n    pub address_line2: Option<String>,\n    #[sea_orm(column_name = "City")]\n    pub city: String,\n    #[sea_orm(column_name = "StateProvince")]\n    pub state_province: String,\n    #[sea_orm(column_name = "CountryRegion")]\n    pub country_region: String,\n    #[sea_orm(column_name = "PostalCode")]\n    pub postal_code: String,\n    #[sea_orm(unique)]\n    pub rowguid: Uuid,\n    #[sea_orm(column_name = "ModifiedDate")]\n    pub modified_date: DateTime,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}'},{title:"CRUD Operations",code:'// Insert\nlet apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default() // no need to set primary key\n};\n\nlet pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default()\n};\n\n// Insert one\nlet pear = pear.insert(db).await?;\n\n// Insert many\nFruit::insert_many([apple, pear]).exec(db).await?;\n\n\n\n// Find all models\nlet cakes: Vec<cake::Model> = Cake::find().all(db).await?;\n\n// Find and filter\nlet chocolate: Vec<cake::Model> = Cake::find()\n    .filter(cake::Column::Name.contains("chocolate"))\n    .all(db)\n    .await?;\n\n// Find one model\nlet cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\nlet cheese: cake::Model = cheese.unwrap();\n\n// Find related models (lazy)\nlet fruits: Vec<fruit::Model> = cheese.find_related(Fruit).all(db).await?;\n\n// Find related models (eager)\nlet cake_with_fruits: Vec<(cake::Model, Vec<fruit::Model>)> =\n    Cake::find().find_with_related(Fruit).all(db).await?;\n\n\n\n// Update\nlet pear: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet mut pear: fruit::ActiveModel = pear.unwrap().into();\n\npear.name = Set("Sweet pear".to_owned());\n\n// Update one\nlet pear: fruit::Model = pear.update(db).await?;\n\n// Update many\nFruit::update_many()\n    .col_expr(fruit::Column::CakeId, Expr::value(Value::Int(None)))\n    .filter(fruit::Column::Name.contains("Apple"))\n    .exec(db)\n    .await?;\n\n\n\n// Save\nlet banana = fruit::ActiveModel {\n    id: NotSet,\n    name: Set("Banana".to_owned()),\n    ..Default::default()\n};\n\n// Create, because primary key `id` is `NotSet`\nlet mut banana = banana.save(db).await?;\n\nbanana.name = Set("Banana Mongo".to_owned());\n\n// Update, because primary key `id` is `Set`\nlet banana = banana.save(db).await?;\n\n\n\n// Delete one\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\nfruit::Entity::delete(orange.into_active_model())\n    .exec(db)\n    .await?;\n\n// Or simply\nlet orange: Option<fruit::Model> = Fruit::find_by_id(1).one(db).await?;\nlet orange: fruit::Model = orange.unwrap();\norange.delete(db).await?;\n\n// Delete many: DELETE FROM "fruit" WHERE "fruit"."name" LIKE \'Orange\'\nfruit::Entity::delete_many()\n    .filter(fruit::Column::Name.contains("Orange"))\n    .exec(db)\n    .await?;'},{title:"Identity Insert",code:'// Insert an active model with a specific primary key value.\n// For MSSQL, SeaORM X will automatically enable `IDENTITY INSERT` when inserting a row with primary key value,\n// and then disable the `IDENTITY INSERT` once the insert finished.\n\nlet pear = fruit::ActiveModel {\n    id: Set(1),\n    name: Set("Pear".to_owned()),\n    cake_id: NotSet,\n};\n\n// `IDENTITY INSERT` behind the hood\nlet pear: fruit::Model = pear.insert(db).await?;'},{title:"Nested Transaction",code:'assert_eq!(Bakery::find().all(txn).await?.len(), 0);\n\nctx.db.transaction::<_, _, DbErr>(|txn| {\n    Box::pin(async move {\n        let _ = bakery::ActiveModel {..}.save(txn).await?;\n        let _ = bakery::ActiveModel {..}.save(txn).await?;\n        assert_eq!(Bakery::find().all(txn).await?.len(), 2);\n\n        // Try nested transaction committed\n        txn.transaction::<_, _, DbErr>(|txn| {\n            Box::pin(async move {\n                let _ = bakery::ActiveModel {..}.save(txn).await?;\n                assert_eq!(Bakery::find().all(txn).await?.len(), 3);\n\n                // Try nested-nested transaction rollbacked\n                assert!(txn.transaction::<_, _, DbErr>(|txn| {\n                        Box::pin(async move {\n                            let _ = bakery::ActiveModel {..}.save(txn).await?;\n                            assert_eq!(Bakery::find().all(txn).await?.len(), 4);\n\n                            Err(DbErr::Query(RuntimeErr::Internal(\n                                "Force Rollback!".to_owned(),\n                            )))\n                        })\n                    })\n                    .await\n                    .is_err()\n                );\n\n                assert_eq!(Bakery::find().all(txn).await?.len(), 3);\n\n                // Try nested-nested transaction committed\n                txn.transaction::<_, _, DbErr>(|txn| {\n                    Box::pin(async move {\n                        let _ = bakery::ActiveModel {..}.save(txn).await?;\n                        assert_eq!(Bakery::find().all(txn).await?.len(), 4);\n\n                        Ok(())\n                    })\n                })\n                .await;\n\n                assert_eq!(Bakery::find().all(txn).await?.len(), 4);\n\n                Ok(())\n            })\n        })\n        .await;\n\n        Ok(())\n    })\n})\n.await;\n\nassert_eq!(Bakery::find().all(txn).await?.len(), 4);'}];function w(){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,r.Z)(),{colorMode:n}=(0,N.I)(),[t,o]=(0,a.useState)(!1);(0,a.useEffect)((()=>{o(!0)}),[]);const l=e.theme,i=e.darkTheme;return a.createElement("section",{className:(0,u.Z)("home-section","home-section-alt",v)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("div",{className:"padding-horiz--md"},a.createElement("h2",{className:"text--center"},"A quick taste of SeaORM X"),a.createElement(h.Z,{className:(0,u.Z)("aa"),defaultValue:C[0].title,values:C.map((e=>{let{title:n,code:t}=e;return{label:n,value:n}}))},C.map(((e,o)=>{let{title:r,code:s,lang:c}=e;return a.createElement(E.Z,{key:o,value:r},a.createElement(S.ZP,(0,m.Z)({},S.lG,{code:s,key:t,theme:"dark"==n?i:l,language:c??"rust"}),(e=>{let{className:n,tokens:t,getLineProps:o,getTokenProps:l}=e;return a.createElement("pre",{className:`${n}`},t.map(((e,n)=>a.createElement("div",o({line:e,key:n}),e.map(((e,n)=>a.createElement("span",l({token:e,key:n}))))))))})))}))))))))}t(5098);const I=[{url:"https://caido.io/",logo:"img/other/caido-logo.png",desc:"A lightweight web security auditing toolkit",logoClassName:null},{url:"https://mydatamyconsent.com/",logo:"img/other/mydatamyconsent-logo.png",desc:"Online data sharing simplified",logoClassName:"mydatamyconsentLogo_dng9"},{url:"https://prefix.dev/",logo:"img/other/prefixdev-logo.png",desc:"Rethinking Package Management",logoClassName:"prefixdevLogo_ARcE"},{url:"https://www.svix.com/",logo:"img/other/svix-logo.svg",desc:"The enterprise ready webhooks service",logoClassName:"svixLogo_ZdR9"},{url:"https://upvpn.app/",logo:"img/other/upvpn-logo.png",desc:"Serverless Pay as you go VPN",logoClassName:"upvpnLogo_kFbJ"}];Math.floor(Math.random()*I.length);const A={buttons:"buttons_RYFm"};function x(){return a.createElement("section",{className:(0,u.Z)("home-section","home-section-alt",A.features)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("div",{className:A.buttons},a.createElement(l.Z,{className:"button button--primary button--lg",to:"https://forms.office.com/r/1MuRPJmYBR"},"Request Access"))))))}const k="features_nemC",L="mascot_Rqr3";function M(){return a.createElement("section",{className:(0,u.Z)("home-section",k)},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},a.createElement("div",{className:(0,u.Z)("col col--12")},a.createElement("h2",{className:"text--center"},"Meet Terres, our official mascot"),a.createElement("p",{className:"text--center"},"A friend of ",a.createElement("a",{href:"https://www.rustacean.net/"},"Ferris"),", Terres the hermit crab is a member of the Rustacean family."),a.createElement("div",{className:"text--center padding-horiz--md"},a.createElement("img",{className:L,src:"/SeaORM-X/img/Terres.png"}))))))}function T(){const{siteConfig:e}=(0,r.Z)();return a.createElement("header",{className:i},a.createElement("div",{className:"container"},a.createElement("img",{className:d,width:"90%",src:"/SeaORM-X/img/SeaORM logo.png"}),a.createElement("img",{className:c,width:"90%",src:"/SeaORM-X/img/SeaORM X banner.png"}),a.createElement("h2",{className:"hero__subtitle"},e.tagline),a.createElement("br",null),a.createElement("div",{className:s},a.createElement(l.Z,{className:"button button--primary button--lg",to:"/docs/index"},"Documentation"))))}function R(){const{siteConfig:e}=(0,r.Z)();return a.createElement(o.Z,{description:e.tagline},a.createElement(T,null),a.createElement("main",null,a.createElement(g,null),a.createElement(w,null),a.createElement(x,null),a.createElement(M,null)))}}}]);