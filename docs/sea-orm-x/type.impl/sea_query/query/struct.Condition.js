(function() {
    var type_impls = Object.fromEntries([["sea_query",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Condition\" class=\"impl\"><a href=\"#impl-Clone-for-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.83.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sea_query::query::condition::Cond"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Condition\" class=\"impl\"><a href=\"#impl-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.add\" class=\"fn\">add</a>&lt;C&gt;(self, condition: C) -&gt; Self<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"sea_query/query/enum.ConditionExpression.html\" title=\"enum sea_query::query::ConditionExpression\">ConditionExpression</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add a condition to the set.</p>\n<p>If it’s an <a href=\"sea_query/query/struct.Condition.html#method.any\" title=\"associated function sea_query::query::Condition::any\"><code>Condition::any</code></a>, it will be separated from the others by an <code>\" OR \"</code> in the query. If it’s\nan <a href=\"sea_query/query/struct.Condition.html#method.all\" title=\"associated function sea_query::query::Condition::all\"><code>Condition::all</code></a>, it will be separated by an <code>\" AND \"</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>statement = Query::select()\n    .column(Glyph::Id)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::all()\n            .add(Expr::col(Glyph::Aspect).eq(<span class=\"number\">0</span>).into_condition().not())\n            .add(Expr::col(Glyph::Id).eq(<span class=\"number\">0</span>).into_condition().not()),\n    )\n    .to_string(PostgresQueryBuilder);\n<span class=\"macro\">assert_eq!</span>(\n    statement,\n    <span class=\"string\">r#\"SELECT \"id\" FROM \"glyph\" WHERE (NOT \"aspect\" = 0) AND (NOT \"id\" = 0)\"#\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_option\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.add_option\" class=\"fn\">add_option</a>&lt;C&gt;(self, other: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.83.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;C&gt;) -&gt; Self<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"enum\" href=\"sea_query/query/enum.ConditionExpression.html\" title=\"enum sea_query::query::ConditionExpression\">ConditionExpression</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add an optional condition to the set.</p>\n<p>Shorthand for <code>if o.is_some() { self.add(o) }</code></p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>query = Query::select()\n    .column(Glyph::Image)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::all()\n            .add_option(<span class=\"prelude-val\">Some</span>(Expr::col((Glyph::Table, Glyph::Image)).like(<span class=\"string\">\"A%\"</span>)))\n            .add_option(<span class=\"prelude-val\">None</span>::&lt;SimpleExpr&gt;),\n    )\n    .to_owned();\n\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MsSqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT [image] FROM [glyph] WHERE [glyph].[image] LIKE 'A%'\"#\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MysqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT `image` FROM `glyph` WHERE `glyph`.`image` LIKE 'A%'\"#\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.any\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.any\" class=\"fn\">any</a>() -&gt; <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h4></section></summary><div class=\"docblock\"><p>Create a condition that is true if any of the conditions is true.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{<span class=\"kw-2\">*</span>, tests_cfg::<span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>query = Query::select()\n    .column(Glyph::Image)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::any()\n            .add(Expr::col((Glyph::Table, Glyph::Aspect)).is_in([<span class=\"number\">3</span>, <span class=\"number\">4</span>]))\n            .add(Expr::col((Glyph::Table, Glyph::Image)).like(<span class=\"string\">\"A%\"</span>))\n    )\n    .to_owned();\n\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MsSqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT [image] FROM [glyph] WHERE [glyph].[aspect] IN (3, 4) OR [glyph].[image] LIKE 'A%'\"#\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MysqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT `image` FROM `glyph` WHERE `glyph`.`aspect` IN (3, 4) OR `glyph`.`image` LIKE 'A%'\"#\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.all\" class=\"fn\">all</a>() -&gt; <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h4></section></summary><div class=\"docblock\"><p>Create a condition that is false if any of the conditions is false.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{<span class=\"kw-2\">*</span>, tests_cfg::<span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>query = Query::select()\n    .column(Glyph::Image)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::all()\n            .add(Expr::col((Glyph::Table, Glyph::Aspect)).is_in([<span class=\"number\">3</span>, <span class=\"number\">4</span>]))\n            .add(Expr::col((Glyph::Table, Glyph::Image)).like(<span class=\"string\">\"A%\"</span>))\n    )\n    .to_owned();\n\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MsSqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT [image] FROM [glyph] WHERE [glyph].[aspect] IN (3, 4) AND [glyph].[image] LIKE 'A%'\"#\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MysqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT `image` FROM `glyph` WHERE `glyph`.`aspect` IN (3, 4) AND `glyph`.`image` LIKE 'A%'\"#\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Negates a condition.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>query = Query::select()\n    .column(Glyph::Image)\n    .from(Glyph::Table)\n    .cond_where(\n        Cond::all()\n            .not()\n            .add(Expr::col((Glyph::Table, Glyph::Aspect)).is_in([<span class=\"number\">3</span>, <span class=\"number\">4</span>]))\n            .add(Expr::col((Glyph::Table, Glyph::Image)).like(<span class=\"string\">\"A%\"</span>))\n    )\n    .to_owned();\n\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MsSqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT [image] FROM [glyph] WHERE NOT ([glyph].[aspect] IN (3, 4) AND [glyph].[image] LIKE 'A%')\"#\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MysqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT `image` FROM `glyph` WHERE NOT (`glyph`.`aspect` IN (3, 4) AND `glyph`.`image` LIKE 'A%')\"#\n</span>);</code></pre></div>\n<h5 id=\"more-examples\"><a class=\"doc-anchor\" href=\"#more-examples\">§</a>More Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>query = Query::select()\n    .column(Glyph::Id)\n    .cond_where(\n        Cond::all()\n            .add(\n                Cond::all()\n                    .not()\n                    .add(Expr::val(<span class=\"number\">1</span>).eq(<span class=\"number\">1</span>))\n                    .add(Expr::val(<span class=\"number\">2</span>).eq(<span class=\"number\">2</span>)),\n            )\n            .add(Cond::any().add(Expr::val(<span class=\"number\">3</span>).eq(<span class=\"number\">3</span>)).add(Expr::val(<span class=\"number\">4</span>).eq(<span class=\"number\">4</span>))),\n    )\n    .to_owned();\n\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MsSqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT [id] WHERE (NOT (1 = 1 AND 2 = 2)) AND (3 = 3 OR 4 = 4)\"#\n</span>);\n<span class=\"macro\">assert_eq!</span>(\n    query.to_string(MysqlQueryBuilder),\n    <span class=\"string\">r#\"SELECT `id` WHERE (NOT (1 = 1 AND 2 = 2)) AND (3 = 3 OR 4 = 4)\"#\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether or not any condition has been added</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>is_empty = Cond::all().is_empty();\n\n<span class=\"macro\">assert!</span>(is_empty);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a href=\"sea_query/query/struct.Condition.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>How many conditions were added</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>sea_query::{tests_cfg::<span class=\"kw-2\">*</span>, <span class=\"kw-2\">*</span>};\n\n<span class=\"kw\">let </span>len = Cond::all().len();\n\n<span class=\"macro\">assert_eq!</span>(len, <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>",0,"sea_query::query::condition::Cond"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Condition\" class=\"impl\"><a href=\"#impl-Debug-for-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.83.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.83.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sea_query::query::condition::Cond"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoCondition-for-Condition\" class=\"impl\"><a href=\"#impl-IntoCondition-for-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"sea_query/query/trait.IntoCondition.html\" title=\"trait sea_query::query::IntoCondition\">IntoCondition</a> for <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.into_condition\" class=\"method trait-impl\"><a href=\"#method.into_condition\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sea_query/query/trait.IntoCondition.html#tymethod.into_condition\" class=\"fn\">into_condition</a>(self) -&gt; <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h4></section></div></details>","IntoCondition","sea_query::query::condition::Cond"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Condition\" class=\"impl\"><a href=\"#impl-PartialEq-for-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.83.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.83.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.83.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","sea_query::query::condition::Cond"],["<section id=\"impl-StructuralPartialEq-for-Condition\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-Condition\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.83.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"sea_query/query/struct.Condition.html\" title=\"struct sea_query::query::Condition\">Condition</a></h3></section>","StructuralPartialEq","sea_query::query::condition::Cond"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[19512]}