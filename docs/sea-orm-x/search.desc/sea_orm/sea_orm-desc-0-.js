searchState.loadedDescShard("sea_orm", 0, "This is proprietary software. If you are granted an “…\nAccess mode\nColumn Index, used by <code>TryGetable</code>. Implemented for <code>&amp;str</code> and …\nThe INSERT operation did not insert any valid value\nDefines the configuration options of a database\nA Database connection error\nThe generic API for a database connection that can perform …\nCursor pagination\nA trait for any type that can be turn into a cursor\nDefines a database\nThe type of database backend for real world databases. …\nHandle a database connection depending on the backend …\nDefines a database transaction, whether it is an open …\nThe same as DatabaseBackend just shorter :)\nThe same as a DatabaseConnection\nA database error was encountered as defined in crate::DbErr\nThe result of a DELETE operation\nHandles DELETE operations in a ActiveModel using …\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveMigrationName derive macro will implement …\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement …\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nThe connection to the database has been severed\nThe connection to the database has been severed\nThe INSERT statement did not have any value to insert\nCreates a new type that iterates of the variants of an …\nDefines the result of executing an operation\nConvert a query result into the corresponding Model.\nIdentifier\nThe result of an INSERT operation on an ActiveModel\nSuccessfully inserted\nDefines a structure to perform INSERT operations in an …\nA trait to get a MockRow from a type useful for testing in …\nIsolation level\nDefine a structure containing the numbers of items and …\nDefines a Mock database suitable for testing\nDefines a connection for the MockDatabase\nCreate a Mock database connection useful for testing\nCreate a Mock database connection useful for testing\nDefines a database driver for the MockDatabase\nA Trait for any type wanting to perform operations on the …\nDefines the results obtained from a MockDatabase\nDefines the structure of a test Row for the MockDatabase …\nA MSSQL backend\nA MSSQL backend\nA MySQL backend\nA MySQL backend\nA null value was encountered\nDefines a transaction that is has not been committed\nDefined a structure to handle pagination of a result from …\nA Trait for any type that can paginate results\nPin a Model so that stream operations can be performed on …\nA PostgreSQL backend\nA PostgreSQL backend\nDefines a connection for the [ProxyDatabase]\nCreate a Proxy database connection useful for proxying\nCreate a Proxy database connection useful for proxying\nDefines a database driver for the [ProxyDatabase]\nDefines the ProxyDatabaseTrait to save the functions\nDefines the results obtained from a [ProxyDatabase]\nDefines the structure of a Row for the [ProxyDatabase] …\nDefines the result of a query operation on a Model\nThe self-referencing struct.\nEach consistent read, even within the same transaction, …\nData can’t be modified in this transaction\nSELECT statements are performed in a nonlocking fashion, …\nData can be modified in this transaction (default)\nConsistent reads within the same transaction read the …\nGet tuple from query result based on column index\nGet tuple from query result based on a list of column …\nDefines a type to get a Model\nDefines a type to get two Models\nDefines a type to do <code>SELECT</code> operations through a …\nSelect operation\nSelect operation\nPerforms a raw <code>SELECT</code> operation on a model\nA Trait for any type that can perform SELECT queries\nAll statements of the current transaction can only see …\nA SQLite backend\nA SQLite backend\nDefines the sqlx::mysql connector\nType surrogate\nDefines a sqlx MySQL pool\nCreate a MYSQL database connection and pool\nCreate a MYSQL database connection and pool\nDefines the sqlx::postgres connector\nType surrogate\nDefines a sqlx PostgreSQL pool\nCreate a PostgreSQL database connection and pool\nCreate a PostgreSQL database connection and pool\nDefines the sqlx::sqlite connector\nType surrogate\nDefines a sqlx SQLite pool\nCreate a SQLite database connection and pool\nCreate a SQLite database connection and pool\nDefines the sqlz::mssql connector\nType surrogate\nDefines a sqlz MSSQL pool\nCreate a MSSQL database connection and pool\nCreate a MSSQL database connection and pool\nDefines an SQL statement\nAny type that can build a Statement\nCreate a stream for the QueryResult\nStream query results\nDefines a database transaction as it holds a Vec&lt;Statement&gt;\nAn error occurring when doing database transactions\nDefines errors for handling transaction failures\nThe self-referencing struct.\nSpawn database transaction\nTry to convert a type to a u64\nAn error from trying to get a row from a Model\nAn interface to get a value from the query result\nAn interface to get an array of values from the query …\nAn interface to get a JSON from the query result\nAn interface to get a tuple value from the query result\nThe types of results for an INSERT operation\nThe result of an update operation on an ActiveModel\nDefines an update operation\nValue variants\nCheck if the database URI given and the DatabaseBackend …\nCheck if the database URI given and the DatabaseBackend …\nCheck if the URI provided corresponds to <code>mysql://</code> for a …\nCheck if the URI provided corresponds to <code>postgres://</code> for a …\nCheck if the URI provided corresponds to <code>sqlite:</code> for a …\nCheck if the URI provided corresponds to <code>mssql:</code> for a …\nSet the maximum amount of time to spend waiting for …\nFilter paginated result with corresponding column greater …\nFetch the paginated result\nGet all items from the Select query\nGet all items from the Select query\nAdd some DbErrs to <code>exec_results</code>\nAdd some MockExecResults to <code>exec_results</code>\nAdd some DbErrs to <code>query_results</code>\nAdd some Values to <code>query_results</code>\nGenerate a database connection for testing the Mock …\nGet the null variant of self\nGenerate a database connection for testing the Proxy …\nBasically a no-op; only to satisfy trait bounds\nBasically a no-op; only to satisfy trait bounds\nBasically a no-op; only to satisfy trait bounds\nBasically a no-op; only to satisfy trait bounds\nSelf must be <code>&amp;str</code>, return <code>None</code> otherwise\nSelf must be <code>usize</code>, return <code>None</code> otherwise\nUse ascending sort order\nFilter paginated result with corresponding column less …\nCreate a transaction that can be committed atomically\nExecute SQL <code>BEGIN</code> transaction. Returns a Transaction that …\nBegin a transaction in the [ProxyDatabase]\nBegin a transaction in the [ProxyDatabase]\nCreate a statement block  of SQL statements that execute …\nCreate a statement block  of SQL statements that execute …\nBundle a set of SQL statements that execute together.\nBundle a set of SQL statements that execute together.\nBundle a set of SQL statements that execute together.\nBundle a set of SQL statements that execute together.\nExecute SQL <code>BEGIN</code> transaction with isolation level and/or …\nA getter for database dependent boolean value\nA getter for database dependent boolean value\nMethod to call in order to build a Statement\nBuild an SQL Statement\nBuild an SQL Statement\nCheck if a record exists on the ActiveModel to perform the …\nExplicitly close the database connection\nExplicitly close the MySQL connection\nExplicitly close the Postgres connection\nExplicitly close the SQLite connection\nExplicitly close the MSSQL connection\nRetrieves the names of the columns in the result set\nCommit a successful transaction atomically into the …\nCommit a transaction atomically\nCommit a transaction in the [ProxyDatabase]\nCommit a transaction in the [ProxyDatabase]\nCommit a transaction atomically to the database\nCommit a transaction atomically to the database\nMethod to create a DatabaseConnection on a database. This …\nConnect to the MockDatabase\nConnect to the [ProxyDatabase]\nAdd configuration options for the MySQL database\nAdd configuration options for the PostgreSQL database\nAdd configuration options for the SQLite database\nAdd configuration options for the MSSQL database\nIf set to <code>true</code>, the db connection pool will be created …\nMethod to create a DatabaseConnection on a proxy database\nSet the timeout duration when acquiring a connection\nPerform a count on the paginated results\nPerform a count on the paginated results\nGet current page number\nThe database backend this statement is constructed for. …\nNon-debug version\nHelper to get a raw SQL string from an object that impl …\nHelper to get a <code>Statement</code> from an object that impl …\nUse descending sort order\nGet all logs from a MockDatabase and return a Transaction\nModule for the Entity type and operations\nError types for all database operations\nExecute a DELETE operation\nExecute an insert operation, returning the last inserted id\nExecute an update operation\nExecute an insert operation and return the inserted model …\nExecute an insert operation\nExecute a statement in the MockDatabase\nExecute a Statement\nExecute a command in the [ProxyDatabase], and report the …\nExecute the SQL statement in the MockDatabase\nExecute the SQL statement in the [ProxyDatabase]\nExecute a Statement on a MySQL backend\nExecute a Statement on a PostgreSQL backend\nExecute a Statement on a SQLite backend\nExecute a Statement on a MSSQL backend\nExecute a unprepared Statement\nExecute an unprepared SQL statement on a MySQL backend\nExecute an unprepared SQL statement on a PostgreSQL backend\nExecute an unprepared SQL statement on a SQLite backend\nExecute an unprepared SQL statement on a MSSQL backend\nReturn QueryResults  from a multi-query operation\nFetch the current page\nFetch one page and increment the page counter\nFetch a specific page; page index starts from zero\nLimit result set to only first N rows in ascending order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a Vec from an Array of Json\nGet a Vec from an Array of Json\nConvert QueryResult to ProxyRow\nThe method to perform a query on a Model\nGet the Values from s raw SQL statement depending on the …\nCreate a SQL statement from a crate::DatabaseBackend, a …\nInstantiate a sqlx pool connection to a DatabaseConnection\nInstantiate a sqlx pool connection to a DatabaseConnection\nInstantiate a sqlx pool connection to a DatabaseConnection\nInstantiate a sqlz pool connection to a DatabaseConnection\nSelect a custom Model from a raw SQL Statement.\nCreate a Statement from a crate::DatabaseBackend and a raw …\nGet the maximum amount of time to spend waiting for …\nGet whether DB connections will be established when the …\nGet the timeout duration when acquiring a connection, if …\nGet the backend being used in the MockDatabase\nFetch the database backend as specified in DbBackend. This …\nGet the DatabaseBackend being used by the MockDatabase\nGet the DatabaseBackend being used by the [ProxyDatabase]\nGet the idle duration before closing a connection, if set\nGet the maximum number of connections of the pool, if set\nGet the maximum lifetime of individual connections, if set\nGet the minimum number of connections of the pool, if set\nGet sqlz::MsSqlPool\nGet sqlx::MySqlPool\nGet sqlx::PgPool\nA helper for building SQL queries\nA helper for building SQL queries\nFor MSSQL only. Get database schema that specified in the …\nGet database schema that specified in the connection string\nGet sqlx::SqlitePool\nGet whether SQLx statement logging is enabled\nGet the level of SQLx statement logging\nGet the SQLx slow statements logging settings\nGet the database URL of the pool\nSet the idle duration before closing a connection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the keys and values of a mock row\nAn iterator over the keys and values of a proxy row\nCreate a database connection\nConstruct a Cursor that fetch JSON value\nThe method to perform this operation\nConstruct a Cursor that fetch any custom struct\nReturn a [Selector] from <code>Self</code> that wraps a SelectModel …\nGet the SQL statement\nGet the SQL statement\nConvert self into an async stream\nGet the transaction log as a collection Vec&lt;…\nGet tuple from query result based on column index\nCheck if the connection is a test connection for the Mock …\nCheck if the connection is a test connection for the Mock …\nCheck if the URI is the same as the specified database …\nCheck if the URI is the same as the specified database …\nLimit result set to only last N rows in ascending order of …\nGet the last id after <code>AUTOINCREMENT</code> is done on the primary …\nThe last inserted id on auto-increment\nThe last inserted id on auto-increment\nThe id performed when AUTOINCREMENT was performed on the …\nCreate a Transaction with many statements\nSet the maximum number of connections of the pool\nSet the maximum lifetime of individual connections\nHolds types and methods to perform metric collection\nSet the minimum number of connections of the pool\nInstantiate a mock database with a DbBackend to simulate …\nCreate a new ProxyExecResult from the last inserted id and …\nCreate a new ProxyRow from a BTreeMap&lt;String, Value&gt;\nCreate new ConnectOptions for a Database by passing in a …\nCreate a connection to the MockDatabase\nCreate a connection to the [ProxyDatabase]\nCreate a new cursor\nInstantiate a new Deleter by passing it a DeleteStatement\nInstantiate a new insert operation\nInstantiate an update using an UpdateStatement\nIncrement the page counter\nGet the total number of items\nGet the total number of items and pages\nGet the total number of pages\nThe total number of items of a paginator\nThe total number of pages of a paginator\nCreate a Transaction with one statement\nGet an item from the Select query\nGet an item from the Select query\nPaginate the result of a select operation.\nPing the MockDatabase\nChecks if a connection to the database is still valid.\nPing the [ProxyDatabase], it should return an error if the …\nPing the [ProxyDatabase], it should return an error if the …\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nHolds types and methods to perform queries\nExecute a SQL query in the MockDatabase\nExecute a query in the [ProxyDatabase], and return the …\nExecute a Statement and return a collection Vec&lt;QueryResult…\nReturn all QueryResults if the query was successful\nReturn all QueryResults if the query was successful\nGet the results of a query returning them as a Vec&lt;…\nGet the results of a query returning them as a Vec&lt;…\nGet the results of a query returning them as a Vec&lt;…\nGet the results of a query returning them as a Vec&lt;…\nExecute a Statement and return a query\nReturn one QueryResult if the query was successful\nReturn one QueryResult if the query was successful\nGet one result from a SQL query. Returns Option::None if …\nGet one result from a SQL query. Returns Option::None if …\nGet one result from a SQL query. Returns Option::None if …\nGet one result from a SQL query. Returns Option::None if …\nRoll back a transaction since errors were encountered\nrolls back a transaction in case error are encountered …\nRollback a transaction in the [ProxyDatabase]\nRollback a transaction in the [ProxyDatabase]\nRoll back a faulty transaction\nRoll back a faulty transaction\nGet the number of rows affected by the operation\nThe number of rows affected by the database operation\nThe number of rows affected by the database operation\nThe number of rows affected by the DELETE operation\nThe rows affected by the update operation\nHolds types that defines the schemas of an Entity\nSets a callback to metric this connection\nSet schema search path (PostgreSQL only)\nSet the cursor ordering for another table when dealing …\nThe SQL query\nset key for sqlcipher\nEnable SQLx statement logging (default true)\nSet SQLx statement logging level (default INFO). (ignored …\nConvert ConnectOptions into sqlx::pool::PoolOptions\nSet SQLx slow statements logging level and duration …\nConverts an sqlz::error error to a DbErr\nConverts an sqlz::error connection error to a DbErr\nConverts an sqlz::error execution error to a DbErr\nConverts an sqlz::error query error to a DbErr\nConverts an sqlz::error error to a DbErr\nConvert ConnectOptions into sqlz::pool::PoolOptions\nExecute a Statement and return a stream of results\nStream the results of executing a SQL query\nStream the results of executing a SQL query\nStream the results of executing a SQL query\nStream the results of executing a SQL query\nStream the results of the Select operation\nStream the results of the Select operation\nCheck if the database supports <code>RETURNING</code> syntax on insert …\nCheck if the connection supports <code>RETURNING</code> syntax on …\nCheck if the connection supports <code>RETURNING</code> syntax on …\nCheck if the database supports <code>RETURNING</code> syntax on insert …\nIf true, the connection will be pinged upon acquiring from …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nCreate a MySQL transaction\nCreate a PostgreSQL transaction\nCreate a MySQL transaction\nCreate a MySQL transaction\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction with isolation …\nThe method to convert the type to a u64\nGet a value from the query result with prefixed column name\nGet a value from the query result with prefixed column name\nGet a value from the MockRow\nGet a value from the ProxyRow\nGet a value from the query result with prefixed column name\nGet a value from the query result with an ColIdx\nJust a delegate\nGet a value from the query result with an ColIdx\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a JSON from the query result with prefixed column name\nGet a JSON from the query result with prefixed column name\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result based on the order …\nGet a tuple value from the query result based on the order …\nThe values of the single row\nThe values for the SQL statement’s parameters\nCreate <code>Selector</code> from Statement and columns. Executing this …\nCreate <code>SelectorRaw</code> from Statement and columns. Executing …\nWrap each Statement as a single-statement Transaction\nArity of the Primary Key\nA Rust representation of enum defined in database.\nThe Rust Value backing ActiveEnums\nA Trait for overriding the ActiveModel behavior\nA Trait for ActiveModel to perform Create, Update or …\nDefines a stateful value used in ActiveModel.\nColumn identifier consists of 2 columns\nDefines a Column for an Entity\nAPI for working with a <code>Column</code>. Mostly a wrapper of the …\nAll column types\nSeaORM’s utility methods that act on ColumnType\nThe Entity this ActiveModel belongs to\nA Trait for mapping an Entity to a database table\nAn abstract base class for defining Entities.\nAction to perform on a foreign key whenever there are …\nA Trait for implementing a QueryResult\nAn Entity has many relationships\nAn Entity has one relationship\nEnsure the identifier for an Entity can be converted to a …\nList of column identifier\nCheck the Identity of an Entity\nA Trait for any type that can be converted into an …\nAny type that can be converted into an ActiveValue\nPerforms a conversion into an Identity\nThis trait designates that an <code>Enum</code> can be iterated over. …\nSame as RelationDef\nA Trait for links between Entities\nColumn identifier consists of more than 3 columns\nA Trait for a Model\nAn undefined Value\nA trait for a part of Model\nHow many columns this Primary Key comprises\nHow to map a Primary Key to a column\nA Trait for to be used to define a Primary Key.\nChecks if Entities are related\nDefines a helper to build a relation\nDefines a relationship\nDefines the relations of an Entity\nDefines the type of relationship\nDefines a set operation on an ActiveValue\nA defined Value actively being set\nColumn identifier consists of 3 columns\nA Trait for any type that can be converted into an Model\nColumn identifier consists of 1 column\nDefines an unchanged operation on an ActiveValue\nA defined Value remain unchanged\nDefines an not set operation on an ActiveValue\nValue variants\nDefine the Rust type that each enum variant corresponds.\nThis has no purpose. It will be removed in the next major …\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::insert</code>, …\nWill be called after <code>ActiveModel::insert</code>, …\nget the name of the entity the column belongs to\nget the name of the entity the column belongs to\nConstruct a enum expression with casting\nConstruct a enum expression with casting\nPanics\nMethod to call to get the static string identity\nMethod to call to perform <code>AUTOINCREMENT</code> operation on a …\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::insert</code>, …\nWill be called before <code>ActiveModel::insert</code>, …\nCheck if the relation belongs to an Entity\nCheck if the relation belongs to an Entity\nMethod to get the comment for the schema, defaults to …\nMethod to get the comment for the schema, defaults to …\nSet column comment\nSet the condition type of join on expression\nSet the condition type of join on expression\nCondition type of join on expression\nCondition type of join on expression\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the database column definition of this active enum.\nDefine a column for an Entity\nInstantiate a new ColumnDef\nThe method to call\nThe default implementation of the ActiveModel\nCreate an ActiveValue::NotSet\nSet the default value or expression of a column\nSet the default value\nDelete an model from database\nDelete an model from database\nDelete an active model by its primary key\nDelete an active model by its primary key\nDelete a model\nDelete a model\nDelete a model based on primary key\nDelete a model based on primary key\nDelete many models from database\nDelete many models from database\nGet the name of the entity the column belongs to\nGet the name of the entity the column belongs to\nGet the enum name of the column type\nGet the enum name of the column type\nConstruct select statement to find one / all models\nConstruct select statement to find one / all models\nFind a model by primary key\nFind a model by primary key\nFind all the Entities that are linked to the Entity\nFind all the Entities that are linked to the Entity\nFind linked Models\nFind linked Models\nFind related Entities\nFind related Entities\nFind related Models\nFind related Models\nSet the name of foreign key constraint\nThe name of foreign key constraint\nThe name of foreign key constraint\nReturns the argument unchanged.\nBuild a relationship from an Entity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpress the relation from a table alias.\nReference to from a Column\nReference to from a Column\nMethod to map a primary key from a column in an Entity\nCreate ActiveModel from a JSON value\nCreate ActiveModel from a JSON value\nInstantiate a Model from a QueryResult\nTransform the error from instantiating a Model from a …\nTransform the error from instantiating a Model from a …\nReference from another Entity\nReference from another Entity\nGet a immutable ActiveValue from an ActiveModel\nGet the Value of a column from an Entity\nGet Option as reference\nGet ColumnType as reference\nGet the name of the enum if this is a enum column\nGet the primary key of the ActiveModel\nGet the primary key of the ActiveModel\nCheck if the Entity has many relations\nCheck if the Entity has many relations\nCheck if the entity has at least one relation\nCheck if the entity has at least one relation\nMethod to call to perform this check\nPerform an operation if the column is null\nPerform an operation if the column is null\nSet the <code>indexed</code> field  to <code>true</code>\nInsert an model into database\nInsert an model into database\nPerform an <code>INSERT</code> operation on the ActiveModel\nPerform an <code>INSERT</code> operation on the ActiveModel\nInsert many models into database\nInsert many models into database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod to call to perform the conversion\nMethod to perform the conversion\nMethod to map a primary key to a column in an Entity\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nMethod to perform the conversion\nConstruct a returning <code>Expr</code>.\nConstruct a returning <code>Expr</code>.\nConvert an owned enum variant into the corresponding value.\nConvert an owned enum variant into the corresponding value.\nCheck if a Value exists or not\nWrap the Value into a <code>ActiveValue&lt;Value&gt;</code>\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nCheck the state of a ActiveValue\nCheck if the ActiveValue is ActiveValue::NotSet\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nReturns true if the column is nullable\nDefines the owner of the Relation\nDefines the owner of the Relation\nCheck if the ActiveValue is ActiveValue::Set\nCheck if the ActiveValue is ActiveValue::Unchanged\nLink for an Entity\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the module from the invoking …\nGet the name of the module from the invoking …\nGet the name of enum\nCreate a new ActiveModel with default values. Also used by …\nCreate a new ActiveModel with default values. Also used by …\nSet the state of an ActiveValue to the not set state\nCreate an ActiveValue::NotSet\nMark the column as nullable\nMark the column as nullable\nSet custom join ON condition.\nSet custom join ON condition.\nCustom join ON condition\nCustom join ON condition\nAn operation to perform on a foreign key when a delete …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nAn operation to perform on a foreign key when an update …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nRe-export common types from the entity\nThe type of relationship defined in RelationType\nThe type of relationship defined in RelationType\nReset the value from ActiveValue::Unchanged to …\nReset the value from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nReverse this relation (swap from and to)\nInsert the model if primary key is <code>NotSet</code>, update …\nInsert the model if primary key is <code>NotSet</code>, update …\nCast value of a column into the correct type for database …\nCast value of a column into the correct type for database …\nCast value of an enum column as enum type; do nothing if …\nCast value of an enum column as enum type; do nothing if …\nMethod to get the name for the schema, defaults to …\nMethod to get the name for the schema, defaults to …\nCast column expression used in select statement. It only …\nCast column expression used in select statement. It only …\nSelect specific columns this [PartialModel] needs\nCast enum column as text; do nothing if <code>self</code> is not an …\nCast enum column as text; do nothing if <code>self</code> is not an …\nSet the Value into an ActiveModel\nSet the Value of a column in an Entity\nCreate an ActiveValue::Set\nSet the corresponding attributes in the ActiveModel from a …\nSet the corresponding attributes in the ActiveModel from a …\n<code>Set(value)</code>, except when <code>self.is_unchanged()</code> and <code>value</code> …\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the table\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet a mutable ActiveValue from an ActiveModel\nGet the mutable value an ActiveValue also setting itself …\nCheck if an entity is related to another entity\nBuild a relationship to an Entity\nReference to another column\nReference to another column\nReference to another ENtity\nReference to another ENtity\nConvert enum variant into the corresponding value.\nGet the inner value, unless <code>self</code> is NotSet.\nTry to convert the corresponding value into enum variant.\nFor getting an array of enum. Postgres only\nMethod to call to perform the conversion\nCreate an ActiveValue::Unchanged\nMarks the column as <code>UNIQUE</code>\nGet an owned value of the ActiveValue\nUpdate an model in database\nUpdate an model in database\nPerform the <code>UPDATE</code> operation on an ActiveModel\nPerform the <code>UPDATE</code> operation on an ActiveModel\nUpdate many models in database\nUpdate many models in database\nGet the name of all enum variants\nGet the name of all enum variants\nCheck if an entity is related through another entity\nCheck if an entity is related through another entity\nRepresents a JSON array.\nA big decimal type.\nRepresents a JSON boolean.\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nDate time represented in local time\nDate time represented in UTC\nDate time with fixed offset\nISO 8601 time without timezone. Allows for the nanosecond …\nAll column types\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nDate time represented in local time\nDate time represented in UTC\nDate time with fixed offset\n<code>Decimal</code> represents a 128 bit representation of a …\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement …\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nA constant representing Euler’s number (e) as …\nA constant representing the inverse of Euler’s number …\nCreates a new type that iterates of the variants of an …\nHelper to build a <code>SimpleExpr</code>.\nA constant representing π/2 as …\nIdentifier\nRepresents any valid JSON value.\nThe largest value that can be represented by this decimal …\nThe maximum valid <code>Date</code>.\nThe maximum possible <code>NaiveDate</code> (December 31, 262142 CE).\nThe maximum possible <code>NaiveDateTime</code>.\nThe largest value that can be represented by …\nCreate a <code>Time</code> that is exactly midnight.\nThe smallest value that can be represented by this decimal …\nThe minimum valid <code>Date</code>.\nThe minimum possible <code>NaiveDate</code> (January 1, 262144 BCE).\nThe minimum possible <code>NaiveDateTime</code>.\nThe earliest possible <code>NaiveTime</code>\nThe smallest value that can be represented by …\nString size\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nA constant representing -1.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nA constant representing 1.\nA constant representing 100.\nA constant representing 1000.\nRepresents a JSON object.\nOverride table name if database schema is set\nA constant representing π as …\nA constant representing π/4 as …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nRepresents a JSON string.\nLength for var-char/binary; default to 255\nA constant representing 10.\nA constant representing 2.\nA constant representing 2π as …\nISO 8601 time without timezone. Allows for the nanosecond …\nDate in the proleptic Gregorian calendar.\nCombined date and time.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nThe clock time within a given date. Nanosecond precision.\nThe Unix Epoch, 1970-01-01 00:00:00.\nMidnight, 1 January, 1970 (UTC).\nA Universally Unique Identifier (UUID).\nValue variants\nA constant representing 0.\nComputes the absolute value of <code>self</code>.\nCompute the absolute value of number\nExpress an arithmetic addition operation.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nAdd the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…\nAdd the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …\nPanics\nPanics\nPanics\nPanics\nExpress a <code>ALL</code> sub-query expression.\nReturns a reference to the underlying allocator.\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nMakes a new <code>NaiveDateTime</code> from the current date, hour, …\nConverts the <code>NaiveDateTime</code> into a timezone-aware …\nMakes a new <code>NaiveDateTime</code> from the current date and given …\nConverts the <code>NaiveDateTime</code> into the timezone-aware …\nExpress a <code>ANY</code> sub-query expression.\nReturn the internal big integer value and an exponent. …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nExpress a <code>AS enum</code> expression.\nReturns the four field values of the UUID.\nGet the clock hour, minute, and second.\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nGet the clock hour, minute, second, and nanosecond.\nGet a borrowed <code>Hyphenated</code> formatter.\nProvides a raw pointer to the data.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nConverts to <code>Arc&lt;T&gt;</code>.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nAssuming that the existing <code>PrimitiveDateTime</code> represents a …\nExpress a <code>BETWEEN</code> expression.\nCreate any binary operation\nGet a <code>Braced</code> formatter.\nAdds new <code>CASE WHEN</code> to existing case statement.\nExpress a <code>CAST AS</code> expression.\nTake the cube root of the number, using default context\nTake cube root of self, using properties of context\nReturns the smallest integer greater than or equal to a …\nChecked addition. Computes <code>self + other</code>, returning <code>None</code> if …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nAdd a duration in <code>Days</code> to the date\nAdd a duration in <code>Days</code> to the date part of the …\nAdd a duration in <code>Months</code> to the date\nAdds given <code>Months</code> to the current date and time.\nAdds given <code>FixedOffset</code> to the current datetime. Returns …\nAdds the number of whole days in the given <code>TimeDelta</code> to …\nAdds given <code>TimeDelta</code> to the current date and time.\nComputes <code>self + duration</code>, returning <code>None</code> if an overflow …\nChecked division. Computes <code>self / other</code>, returning <code>None</code> if …\nChecked multiplication. Computes <code>self * other</code>, returning …\nChecked remainder. Computes <code>self % other</code>, returning <code>None</code> …\nChecked subtraction. Computes <code>self - other</code>, returning <code>None</code> …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nSubtract a duration in <code>Days</code> from the date\nSubtract a duration in <code>Days</code> from the date part of the …\nSubtract a duration in <code>Months</code> from the date\nSubtracts given <code>Months</code> from the current date and time.\nSubtracts given <code>FixedOffset</code> from the current datetime. …\nSubtracts the number of whole days in the given <code>TimeDelta</code> …\nSubtracts given <code>TimeDelta</code> from the current date and time.\nComputes <code>self - duration</code>, returning <code>None</code> if an overflow …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nExpress the target column without table prefix.\nExpress a <code>COUNT</code> function.\nExpress a <code>COUNT</code> function with the DISTINCT modifier.\nCube a decimal: <em>x³</em>\nKeyword <code>CURRENT_DATE</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nExpress any custom expression in <code>&amp;str</code>.\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>Value</code>. Use this if your …\nCustom keyword.\nRetrieves a date component.\nGet the <code>Date</code> in the stored offset.\nGet the <code>Date</code> component of the <code>PrimitiveDateTime</code>.\nGet the day of the month.\nReturns the day of month starting from 1.\nReturns the day of month starting from 1.\nGet the day of the date in the stored offset.\nGet the day of the date.\nReturns the day of month starting from 0.\nReturns the day of month starting from 0.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nReturns the default value for a <code>Decimal</code> (equivalent to …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty <code>[T]</code> inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty str inside an Arc\nDeserializes the given bytes into a decimal number. The …\nNumber of digits in the non-scaled integer representation\nExpress an arithmetic division operation.\nMultiply decimal by 2 (efficiently)\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nExpress an equal (<code>=</code>) expression.\nEquality for two <code>Arc</code>s.\nExpress a equal expression between two table columns, you …\nExpress a <code>EXISTS</code> sub-query expression.\nEvaluate the natural-exponential function ex\nWrap a <code>SimpleExpr</code> and perform some operation on it.\nReturns the largest integer less than or equal to a number.\nFormat the <code>Date</code> using the provided format description.\nFormats the date with the specified format string. See the …\nFormats the combined date and time with the specified …\nFormats the time with the specified format string. See the …\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nFormat the <code>Time</code> using the provided format description.\nFormat the <code>Date</code> using the provided format description.\nFormat the <code>OffsetDateTime</code> using the provided format …\nFormat the <code>PrimitiveDateTime</code> using the provided format …\nFormat the <code>Time</code> using the provided format description.\nFormats the date with the specified formatting items. …\nFormats the combined date and time with the specified …\nFormats the time with the specified formatting items. …\nReturns a new <code>Decimal</code> representing the fractional portion …\nReturns the scale of the BigDecimal, the total number of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NaiveDate</code> to a <code>NaiveDateTime</code> of the same date …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts an atomically reference-counted string slice into …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nConverts a Path into a Rc by copying the Path data into a …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nMove a boxed object to a new, reference-counted allocation.\nCreates an atomically reference-counted pointer from a …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nAllocates a reference-counted slice and fills it by …\nConstruct BigDecimal from BigInt and a scale\nConstruct positive BigDecimal from BigUint and a scale\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nAttempt to create a <code>Date</code> from the year, month, and day.\nParses a 32-bit float into a Decimal number whilst …\nParses a 64-bit float into a Decimal number whilst …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nAttempt to create a <code>Time</code> from the hour, minute, and second.\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nAttempt to create a <code>Time</code> from the hour, minute, second, …\nMakes a new <code>NaiveTime</code> from hour, minute, second and …\nMakes a new <code>NaiveTime</code> from hour, minute and second.\nCreates a <code>Decimal</code> using a 128 bit signed <code>m</code> representation …\nAttempt to create a <code>Date</code> from the ISO year, week, and …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nMakes a new <code>NaiveDate</code> from the ISO week date (year, week …\nTakes each element in the <code>Iterator</code> and collects it into an …\nCreate a <code>Date</code> from the Julian day.\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveDate</code> from a day’s number in the …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nMakes a new <code>NaiveTime</code> from the number of seconds since …\nAttempt to create a <code>Date</code> from the year and ordinal day …\nReturns a <code>Decimal</code> using the instances constituent parts.\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nReturns a <code>Result</code> which if successful contains the <code>Decimal</code> …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nParses a string slice into a decimal. If the value …\nConverts a string slice in a given base to a decimal.\nCreates and initializes a BigDecimal.\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nCreates a new NaiveDateTime from microseconds since the …\nCreates a new NaiveDateTime from milliseconds since the …\nCreates a new NaiveDateTime from nanoseconds since the …\nMakes a new <code>NaiveDateTime</code> corresponding to a UTC date and …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nCreate an <code>OffsetDateTime</code> from the provided Unix timestamp. …\nConstruct an <code>OffsetDateTime</code> from the provided Unix …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> by counting the number of …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the calendar date (year, month …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\nMakes a new <code>NaiveDate</code> from the ordinal date (year and day …\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nExpress a greater than (<code>&gt;</code>) expression.\nGreater-than comparison for two <code>Arc</code>s.\nExpress a greater than or equal (<code>&gt;=</code>) expression.\nDivide decimal by 2 (efficiently)\nReturns the hour number from 0 to 23.\nReturns the hour number from 0 to 23.\nGet the clock hour in the stored offset.\nGet the clock hour.\nGet the clock hour.\nGet a <code>Hyphenated</code> formatter.\nExpress a <code>IF NULL</code> function.\nExpress a <code>IN</code> sub-query expression.\nExpress a <code>IN</code> sub expression.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into the internal big integer value and an …\nConsumes self and returns the underlying byte value of the …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nCompute the reciprical of the number: x-1\nReturn inverse of self, rounding with ctx\nExpress a <code>IS</code> expression.\nExpress a <code>IN</code> expression.\nReturns true if this Decimal number has zero fractional …\nReturn true if this number has zero fractional part (is …\nTests if the UUID is max (all ones).\nReturns <code>true</code> if the decimal is negative.\nTests if the UUID is nil (all zeros).\nExpress a <code>IS NOT</code> expression.\nExpress a <code>NOT IN</code> expression.\nExpress a <code>IS NOT NULL</code> expression.\nExpress a <code>IS NULL</code> expression.\nReturns <code>true</code> if the decimal is positive.\nReturns <code>true</code> if the sign bit of the decimal is negative.\nReturns <code>true</code> if the sign bit of the decimal is positive.\nReturns true if this Decimal number is equivalent to zero.\nGet the ISO week number.\nGet the ISO week number of the date in the stored offset.\nGet the ISO week number.\nReturns an iterator that steps by days across all …\nReturns an iterator that steps by weeks across all …\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nReturns <code>true</code> if this is a leap year.\nExpress a bitwise left shift.\nExpress a <code>LIKE</code> expression.\nExpress a less than (<code>&lt;</code>) expression.\nLess-than comparison for two <code>Arc</code>s.\nExpress a less than or equal (<code>&lt;=</code>) expression.\nMakes a mutable reference into the given <code>Arc</code>.\nReturns the mantissa of the decimal number.\nThe ‘max UUID’ (all ones).\nReturns the maximum of the two numbers.\nExpress a <code>MAX</code> function.\nReturns the maximum possible number that <code>Decimal</code> can …\nGet the microseconds within the second in the stored …\nGet the microseconds within the second.\nGet the microseconds within the second.\nCreate a <code>PrimitiveDateTime</code> using the existing date. The …\nGet the milliseconds within the second in the stored …\nGet the milliseconds within the second.\nGet the milliseconds within the second.\nReturns the minimum of the two numbers.\nExpress a <code>MIN</code> function.\nReturns the minimum possible number that <code>Decimal</code> can …\nReturns the minute number from 0 to 59.\nReturns the minute number from 0 to 59.\nGet the minute within the hour in the stored offset.\nGet the minute within the hour.\nGet the minute within the hour.\nExpress an arithmetic modulo operation.\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the month.\nReturns the month number starting from 1.\nReturns the month number starting from 1.\nGet the month of the date in the stored offset.\nGet the month of the date.\nReturns the month number starting from 0.\nReturns the month number starting from 0.\nExpress an arithmetic multiplication operation.\nReturns the number of nanoseconds since the whole non-leap …\nReturns the number of nanoseconds since the whole non-leap …\nGet the nanoseconds within the second in the stored offset.\nGet the nanoseconds within the second.\nGet the nanoseconds within the second.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nInequality for two <code>Arc</code>s.\nReturns a <code>Decimal</code> with a 64 bit <code>m</code> representation and …\nCreates and initializes a <code>BigDecimal</code>.\nMakes a new <code>NaiveDateTime</code> from date and time components. …\nCreate a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code>, <code>Time</code>, and …\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nCreate a new <code>OffsetDateTime</code> with the given <code>Date</code> and <code>Time</code> …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nGet the next calendar date.\nCalculates the first occurrence of a weekday that is …\nThe ‘nil UUID’ (all zeros).\nStrips any trailing zero’s from a <code>Decimal</code> and converts …\nAn in place version of <code>normalize</code>. Strips any trailing zero…\nNegates an expression with <code>NOT</code>.\nExpress a <code>NOT BETWEEN</code> expression.\nExpress a not equal expression between two table columns, …\nExpress a <code>NOT IN</code> sub-query expression.\nExpress a <code>NOT LIKE</code> expression.\nCreate a new <code>OffsetDateTime</code> with the current date and time …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nCalculates the <code>n</code>th occurrence of a weekday that is …\nReturns the number of non-leap seconds past the last …\nGet the <code>UtcOffset</code>.\nGet the day of the year.\nReturns the day of year starting from 1.\nReturns the day of year starting from 1.\nGet the day of the year of the date in the stored offset.\nGet the day of the year.\nReturns the day of year starting from 0.\nReturns the day of year starting from 0.\nAdds given <code>TimeDelta</code> to the current time, and also returns …\nSubtracts given <code>TimeDelta</code> from the current time, and also …\nOverride table name if database schema is set\nOverride table name if database schema is set\nParse a <code>Date</code> from the input using the provided format …\nParse an <code>OffsetDateTime</code> from the input using the provided …\nParse a <code>PrimitiveDateTime</code> from the input using the …\nParse a <code>Time</code> from the input using the provided format …\nParses a string from a user-specified format into a new …\nParses a string with the specified format string and …\nParses a string from a user-specified format into a new …\nCreates and initializes a <code>BigDecimal</code>.\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nParses a string with the specified format string and …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nMakes a new <code>NaiveDate</code> for the previous calendar date.\nCalculates the first occurrence of a weekday that is …\nGet the previous calendar date.\nPanics if out-of-bounds\nPanics if out-of-bounds\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nReplace the date, which is assumed to be in the stored …\nReplace the date, preserving the time.\nReplace the date and time, which are assumed to be in the …\nReplace the day of the month.\nReplace the day of the month.\nReplace the day of the month.\nReplace the clock hour.\nReplace the clock hour.\nReplace the clock hour.\nReplace the microseconds within the second.\nReplace the microseconds within the second.\nReplace the microseconds within the second.\nReplace the milliseconds within the second.\nReplace the milliseconds within the second.\nReplace the milliseconds within the second.\nReplace the minutes within the hour.\nReplace the minutes within the hour.\nReplace the minutes within the hour.\nReplace the month of the year.\nReplace the month of the year.\nReplace the month of the year.\nReplace the nanoseconds within the second.\nReplace the nanoseconds within the second.\nReplace the nanoseconds within the second.\nReplace the offset. The date and time components remain …\nReplace the day of the year.\nReplace the day of the year.\nReplace the day of the year.\nReplace the seconds within the minute.\nReplace the seconds within the minute.\nReplace the seconds within the minute.\nReplace the time, which is assumed to be in the stored …\nReplace the time, preserving the date.\nReplace the year. The month and day will be unchanged.\nReplace the year. The month and day will be unchanged.\nReplace the year. The month and day will be unchanged.\nModifies the <code>Decimal</code> towards the desired scale, attempting …\nExpress a bitwise right shift.\nReturns a new <code>Decimal</code> number with no fractional portion …\nReturn given number rounded to ‘round_digits’ …\nReturns a new <code>Decimal</code> number with the specified number of …\nReturns a new <code>Decimal</code> number with the specified number of …\nReturns <code>Some(Decimal)</code> number rounded to the specified …\nReturns <code>Some(Decimal)</code> number rounded to the specified …\nSaturating addition. Computes <code>self + other</code>, saturating at …\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self + duration</code>, saturating value on overflow.\nComputes <code>self + duration</code>, saturating value on overflow.\nSaturating multiplication. Computes <code>self * other</code>, …\nSaturating subtraction. Computes <code>self - other</code>, saturating …\nComputes <code>self - duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nComputes <code>self - duration</code>, saturating value on overflow.\nReturns the scale of the decimal number, otherwise known …\nReturns the second number from 0 to 59.\nReturns the second number from 0 to 59.\nGet the second within the minute in the stored offset.\nGet the second within the minute.\nGet the second within the minute.\nReturns a serialized version of the decimal number. The …\nAn optimized method for changing the scale of a decimal …\nAn optimized method for changing the sign of a decimal …\nAn optimized method for changing the sign of a decimal …\nAn optimized method for changing the sign of a decimal …\nReturn the sign of the <code>BigDecimal</code> as <code>num::bigint::Sign</code>.\nSubtracts another <code>NaiveDate</code> from the current date. Returns …\nSubtracts another <code>NaiveDateTime</code> from the current date and …\nSubtracts another <code>NaiveTime</code> from the current time. Returns …\nGet a <code>Simple</code> formatter.\nExpress a <code>SOME</code> sub-query expression.\nTake the square root of the number\nTake the square root of the number, using context for …\nSquare a decimal: <em>x²</em>\nGets the number of strong (<code>Arc</code>) pointers to this …\nExpress an arithmetic subtraction operation.\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nPanics\nSubtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …\nSubtract the sub-day time of the <code>std::time::Duration</code> from …\nSubtract two <code>Time</code>s, returning the <code>Duration</code> between. This …\nPanics\nPanics\nPanics\nPanics\nMakes a new <code>NaiveDate</code> for the next calendar date.\nMakes a new <code>NaiveDate</code> for the next calendar date.\nExpress a <code>SUM</code> function.\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nGet the week number where week 1 begins on the first …\nRetrieves a time component.\nGet the <code>Time</code> in the stored offset.\nGet the <code>Time</code> component of the <code>PrimitiveDateTime</code>.\nReturns the number of non-leap seconds since the midnight …\nReturns the number of non-leap <em>microseconds</em> since midnight …\nReturns the number of non-leap <em>milliseconds</em> since midnight …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of non-leap <em>nanoseconds</em> since midnight …\nReturns the number of microseconds since the last whole …\nReturns the number of milliseconds since the last whole …\nReturns the number of nanoseconds since the last whole …\nReturns the bytes of the UUID in little-endian order.\nGet the year, month, and day.\nGet the year, month, and day.\nGet the year, month, and day.\nCreate string of this bigdecimal in engineering notation\nReturns the four field values of the UUID in little-endian …\nGet the clock hour, minute, and second.\nGet the clock hour, minute, second, and microsecond.\nGet the clock hour, minute, second, and millisecond.\nGet the clock hour, minute, second, and nanosecond.\nGet the ISO 8601 year, week number, and weekday.\nGet the ISO 8601 year, week number, and weekday.\nGet the ISO 8601 year, week number, and weekday.\nGet the Julian day for the date.\nGet the Julian day for the date. The time is not taken …\nGet the Julian day for the date. The time is not taken …\nConvert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …\nGet the year and ordinal day number.\nGet the year and ordinal day number.\nGet the year and ordinal day number.\nMake a BigDecimalRef of this value\nCreate string of this bigdecimal in scientific notation\nReturns a 128bit little-endian value containing the value.\nReturns a new <code>Decimal</code> integral with no fractional portion. …\nReturns a new <code>Decimal</code> with the fractional portion …\nChecked version of <code>Decimal::from_i128_with_scale</code>. Will …\nChecked version of <code>Decimal::new</code>. Will return <code>Err</code> instead …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nWraps tuple of <code>SimpleExpr</code>, can be used for tuple comparison\nGet the Unix timestamp.\nGet the Unix timestamp in nanoseconds.\nConvert <code>Decimal</code> to an internal representation of the …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGet a <code>Urn</code> formatter.\nExpress a <code>Value</code>, returning a <code>Expr</code>.\nExpress a <code>Value</code>, returning a <code>SimpleExpr</code>.\nGets the number of <code>Weak</code> pointers to this allocation.\nReturns the <code>NaiveWeek</code> that the date belongs to, starting …\nGet the weekday.\nReturns the day of week.\nReturns the day of week.\nGet the weekday of the date in the stored offset.\nGet the weekday.\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nMakes a new <code>NaiveDate</code> with the day of month (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of month (starting …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nAttempt to create a <code>PrimitiveDateTime</code> using the existing …\nMakes a new <code>NaiveDateTime</code> with the hour number changed.\nMakes a new <code>NaiveTime</code> with the hour number changed.\nMakes a new <code>NaiveDateTime</code> with the minute number changed.\nMakes a new <code>NaiveTime</code> with the minute number changed.\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDate</code> with the month number (starting from …\nMakes a new <code>NaiveDateTime</code> with the month number (starting …\nMakes a new <code>NaiveDateTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveTime</code> with nanoseconds since the whole …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nMakes a new <code>NaiveDate</code> with the day of year (starting from …\nMakes a new <code>NaiveDateTime</code> with the day of year (starting …\nReturn a new BigDecimal object with precision set to new …\nReturn this BigDecimal with the given precision, rounding …\nReturn a new BigDecimal object equivalent to self, with …\nReturn a new BigDecimal after shortening the digits and …\nMakes a new <code>NaiveDateTime</code> with the second number changed.\nMakes a new <code>NaiveTime</code> with the second number changed.\nCreate a <code>PrimitiveDateTime</code> using the existing date and the …\nMakes a new <code>NaiveDate</code> with the year number changed, while …\nMakes a new <code>NaiveDateTime</code> with the year number changed, …\nWrite bigdecimal in engineering notation to writer <code>w</code>\nWrite bigdecimal in scientific notation to writer <code>w</code>\nGet the year of the date.\nReturns the year number in the calendar date.\nReturns the year number in the calendar date.\nGet the year of the date in the stored offset.\nGet the year of the date.\nReturns the number of whole years from the given <code>base</code> …\nError occurred within the <code>Any</code> driver mapping to/from the …\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nError occurred while decoding a value from a specific …\nError during <code>impl FromStr for Entity::Column</code>\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nThere was a problem with the database connection\nConnection Acquire error\nThis error can happen when the connection pool is …\nConnection closed\nType error: the specified type cannot be converted from …\nA custom error\nError returned from the database.\nAn error from unsuccessful database operations\nError occurred while decoding a value.\nError occured while encoding a value.\nAn operation did not execute successfully\nError for Foreign key constraint\nError generated from within SeaORM\nError communicating with the database backend.\nError occurred while parsing json value as target type\nA migration error\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nAn error occurred while performing a query\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nNo rows returned by a query that expected to return at …\nRuntime error\nAn error from unsuccessful SQL query\nRepresents all the ways a method can fail within SQLx.\nSQLx Error\nAn error returned from the MySQL database.\nAn error returned from the PostgreSQL database.\nSQLz Error\nConnection pool timed out\nError occurred while attempting to establish a TLS …\nRuntime type conversion error\nError occurred while parsing value as target type\nType in query doesn’t exist. Likely due to typo or …\nError for duplicate record in unique field or primary key …\nAfter an insert statement it was impossible to retrieve …\nWhen updating, a model should know its primary key to check\nA background worker has crashed.\nThe SQLSTATE code for this error.\nThe SQLSTATE code for this error.\nThe extended result code.\nIf the error is with a specific table column, the name of …\nIf the error is with a specific constraint, the name of …\nIf the error is with a specific data type, the name of the …\nAn optional secondary error message carrying more detail …\nThe file name of the source-code location where this error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn optional suggestion what to do about the problem. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line number of the source-code location where this …\nThe human-readable error message.\nThe primary human-readable error message. This should be …\nThe number for this error.\nIndicates an error cursor position as an index into the …\nThe name of the source-code routine reporting this error.\nIf this error is with a specific database object, the name …\nConvert generic DbErr by sqlx to SqlErr, return none if …\nIf this error is with a specific table, the name of the …\nAn indication of the context in which the error occurred. …\nFrom type\nInto type\nTryError\nQuery execution infos\nQuery executiuon duration\nQuery execution failed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery data\nRepresents a JSON array.\nRepresents a JSON boolean.\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nThis structure provides debug capabilities\nDefines the structure for a delete operation\nPerform a delete operation on multiple models\nPerform a delete operation on a model\nEntity, or a Select; to be used as parameters in …\nPerforms INSERT operations on a ActiveModel\nPerforms a conversion to SimpleExpr\nJoin types\nRepresents any valid JSON value.\nThis trait implements the Data Loader API\nSource model\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nOrdering options\nPerform a FILTER opertation on a statement\nPerforms ORDER BY operations\nAbstract API for performing queries\nConstrain the QueryStatement to QueryStatementBuilder trait\nA Trait for any type performing queries on a Model or …\nDefines a structure to perform select operations\nImplements the traits Iden and IdenStatic for a type\nImplements the traits Iden and IdenStatic for a type\nSelect specific column for partial model queries\nDefines a structure to perform a SELECT operation on two …\nDefines a structure to perform a SELECT operation on many …\nRepresents a JSON string.\nPerforms INSERT operations on a ActiveModel, will do …\nDefines a structure to perform UPDATE query operations on …\nDefines an UPDATE operation on multiple ActiveModels\nDefines an UPDATE operation on one ActiveModel\nValue variants\nAdd a condition to the set.\nAdd a Model to Self\nAdd many Models to Self\nAdd an optional condition to the set.\nCreate a condition that is false if any of the conditions …\nGet all Models from the SELECT query\nGet all Models from the Select query\nGet all Models from the select operation\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nOptional and where, short hand for …\nCreate a condition that is true if any of the conditions …\nApply an operation on the QueryTrait::QueryStatement if …\nApply an operation on the QueryTrait::QueryStatement if …\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nGet an immutable ref to the query builder\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nApply a where condition using the model’s primary key\nApply a where condition using the model’s primary key\nPerform a check to determine table belongs to a Model …\nPerform a check to determine table belongs to a Model …\nBuild the query as <code>Statement</code>\nBuild the query as <code>Statement</code>\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nClear order expressions\nCreates a SimpleExpr from a column\nAdd a select column\nAdd a select column\nAdd a select column with alias\nAdd a select column with alias\nSelect columns\nSelect columns\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nConvert into a cursor\nConvert into a cursor using column of first entity\nConvert into a cursor using column of second entity\nHelper to get a raw SQL string from an object that impl …\nHelper to get a <code>Statement</code> from an object that impl …\nAdd a DISTINCT expression\nAdd a DISTINCT expression\nAdd a DISTINCT ON expression NOTE: this function is only …\nAdd a DISTINCT ON expression NOTE: this function is only …\nAllow insert statement return safely if inserting nothing. …\nExecute a DELETE operation on one ActiveModel\nExecute a DELETE operation on many ActiveModels\nExecute an insert operation\nExecute an insert operation\nExecute an update operation on an ActiveModel\nExecute an update operation on multiple ActiveModels\nExecute an insert operation and return the inserted model …\nExecute an insert operation and return the inserted model …\nExecute an update operation and return the updated model …\nExecute an insert operation without returning (don’t use …\nExecute an insert operation without returning (don’t use …\nAdd an expression to the select expression list.\nAdd an expression to the select expression list.\nSelect column.\nSelect column.\nSame as <code>expr_as</code>. Here for legacy reasons.\nSame as <code>expr_as</code>. Here for legacy reasons.\nAdd select expressions from vector of <code>SelectExpr</code>.\nAdd select expressions from vector of <code>SelectExpr</code>.\nAdd an AND WHERE expression\nAdd an AND WHERE expression\nLeft Join with a Linked Entity and select both Entity.\nLeft Join with a Related Entity and select both Entity.\nLeft Join with a Linked Entity and select Entity as a <code>Vec</code>.\nLeft Join with a Related Entity and select the related …\nDisplay a JSON value as a string.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nReturns the argument unchanged.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nPerform a Select operation on a Model using a Statement\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nAdd a group by column\nAdd a group by column\nAdd an AND HAVING expression\nAdd an AND HAVING expression\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nInner Join with a Related Entity.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet a selectable Model as a JsonValue for SQL JSON …\nConvert the Models into JsonValue\nConvert the results to JSON\nReturn a Selector from <code>Self</code> that wraps a SelectModel\nPerform a conversion into a SelectTwoModel\nReturn a Selector from <code>Self</code> that wraps a SelectModel with …\nPerform a conversion into a SelectTwoModel with …\nTake ownership of the query builder\nMethod to perform the conversion\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nWhether or not any condition has been added\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nLeft Join with a Related Entity.\nHow many conditions were added\nAdd a limit expression. Passing in None would remove the …\nAdd a limit expression. Passing in None would remove the …\nUsed to eager load has_many relations\nUsed to eager load many_to_many relations\nUsed to eager load has_one relations\nSelect lock\nSelect lock\nSelect lock exclusive\nSelect lock exclusive\nSelect lock shared\nSelect lock shared\nRow locking with behavior (if supported).\nRow locking with behavior (if supported).\nDelete many ActiveModel\nInsert many Model or ActiveModel\nUpdate many ActiveModel\nNegates a condition.\nAdd an offset expression. Passing in None would remove the …\nAdd an offset expression. Passing in None would remove the …\nOn conflict\nSet ON CONFLICT on primary key do nothing, but with MySQL …\nalias to do_nothing\nDelete one Model or ActiveModel\nInsert one Model or ActiveModel\nGet one Model from the SELECT query\nGet one Model from the Select query\nUpdate one ActiveModel\nOrder by column.\nOrder by column.\nAdd an order_by expression\nAdd an order_by expression\nAdd an order_by expression (ascending)\nAdd an order_by expression (ascending)\nOrder by vector of columns.\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string.\nOrder by custom string with nulls order option.\nOrder by custom string with nulls order option.\nAdd an order_by expression (descending)\nAdd an order_by expression (descending)\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nOrder by column with nulls order option.\nAdd an order_by expression with nulls ordering option\nAdd an order_by expression with nulls ordering option\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nAdd the select SQL statement\nAdd the query to perform an ORDER BY operation\nAdd the query to perform a FILTER on\nGet a mutable ref to the query builder\nThe query to debug\nJoin with an Entity Related to me.\nRight Join with a Related Entity.\nIf self is Entity, use Entity::find()\nSelects and Entity and returns it together with the Entity …\nAdd a select column\nAdd a select column with alias\nClear the selection list\nClear the selection list\nMakes a SELECT operation in conjunction to another relation\nAdd the models to update to Self\nReorders the entries of all <code>Value::Object</code> nested within …\nStream the results of a SELECT operation on a Model\nStream the results of a Select operation on a Model\nStream the result of the operation\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nThe value of the query\nThis is a helper struct to convert <code>EntityTrait</code> into …\nCreates Postgres enums from an ActiveEnum. See …\nCreates Postgres enums from an Entity. See …\nCreates the indexes from an Entity, returning an empty Vec …\nCreates a table from an Entity. See TableCreateStatement …\nReturns the argument unchanged.\nCreates a column definition for example to update a table.\nCalls <code>U::from(self)</code>.\nCreate a helper for a specific database backend")