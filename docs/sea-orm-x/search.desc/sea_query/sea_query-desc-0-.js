searchState.loadedDescShard("sea_query", 0, "This is proprietary software. If you are granted an “…\nMacro to easily create an <code>Condition::all</code>.\nMacro to easily create an <code>Condition::any</code>.\nTranslating the SQL AST into engine-specific SQL …\nError types used in sea-query.\nBuilding blocks of SQL statements.\nEngine specific SQL features.\nForeign key definition &amp; alternations statements.\nFor calling built-in SQL functions.\nIndex definition &amp; alternations statements.\nHelper for preparing SQL statements.\nQuery statements (select, insert, update &amp; delete).\nSchema definition &amp; alternations statements\nTable definition &amp; alternations statements.\nTokenizer for processing SQL.\nBase types used throughout sea-query.\nContainer for all SQL value types.\nMssql query builder.\nMysql query builder.\nPostgres query builder.\nSqlite query builder.\ncolumn comment\ncolumn comment\ncolumn comment\nThe keyword for setting a column to be auto increment.\nEscape a SQL string literal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe keywords for insert default row.\nThe keywords for insert default row.\nWrite insert default rows expression.\nWrite insert default rows expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe type of placeholder the builder uses for values, and …\nThe type of placeholder the builder uses for values, and …\nTranslate <code>BinOper</code> into SQL statement.\nTranslate <code>BinOper</code> into SQL statement.\nTranslate <code>CaseStatement</code> into SQL statement.\nTranslate <code>CaseStatement</code> into SQL statement.\nTranslate the check constraint into SQL statement\nTranslate the check constraint into SQL statement\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnSpec</code> into SQL statement.\nTranslate <code>ColumnSpec</code> into SQL statement.\nTranslate <code>ColumnType</code> into SQL statement.\nWrite <code>Value</code> inline.\nWrite <code>Value</code> inline.\nWrite FALSE constant\nWrite FALSE constant\nWrite TRUE constant\nWrite TRUE constant\nTranslate IF NOT EXISTS expression in <code>TableCreateStatement</code>.\nTranslate IF NOT EXISTS expression in <code>TableCreateStatement</code>.\nTranslate LIMIT expression in <code>DeleteStatement</code>.\nTranslate LIMIT expression in <code>DeleteStatement</code>.\nTranslate ORDER BY expression in <code>DeleteStatement</code>.\nTranslate ORDER BY expression in <code>DeleteStatement</code>.\nTranslate <code>DeleteStatement</code> into SQL statement.\nTranslate <code>DeleteStatement</code> into SQL statement.\nTranslate <code>Order::Field</code> into SQL statement\nTranslate <code>Order::Field</code> into SQL statement\nTranslate <code>ForeignKeyAction</code> into SQL statement.\nTranslate <code>ForeignKeyAction</code> into SQL statement.\nTranslate <code>ForeignKeyCreateStatement</code> into SQL statement.\nTranslate <code>ForeignKeyCreateStatement</code> into SQL statement.\nTranslate <code>ForeignKeyDropStatement</code> into SQL statement.\nTranslate <code>ForeignKeyDropStatement</code> into SQL statement.\nTranslate <code>Function</code> into SQL statement.\nTranslate <code>Function</code> into SQL statement.\nTranslate the generated column into SQL statement\nTranslate the generated column into SQL statement\nTranslate <code>IndexCreateStatement</code> into SQL statement.\nTranslate <code>IndexDropStatement</code> into SQL statement.\nTranslate [<code>IndexHint</code>] into SQL statement.\nTranslate [<code>IndexHint</code>] into SQL statement.\nTranslate <code>InsertStatement</code> into SQL statement.\nTranslate <code>InsertStatement</code> into SQL statement.\nTranslate <code>JoinExpr</code> into SQL statement.\nTranslate <code>JoinExpr</code> into SQL statement.\nTranslate <code>JoinOn</code> into SQL statement.\nTranslate <code>JoinOn</code> into SQL statement.\nTranslate <code>JoinType</code> into SQL statement.\nTranslate <code>JoinType</code> into SQL statement.\nTranslate <code>Keyword</code> into SQL statement.\nTranslate <code>Keyword</code> into SQL statement.\nTranslate <code>LogicalChainOper</code> into SQL statement.\nTranslate <code>LogicalChainOper</code> into SQL statement.\nTranslate <code>Order</code> into SQL statement.\nTranslate <code>Order</code> into SQL statement.\nTranslate <code>OrderExpr</code> into SQL statement.\nTranslate <code>OrderExpr</code> into SQL statement.\nTranslate <code>QueryStatement</code> into SQL statement.\nTranslate <code>SelectDistinct</code> into SQL statement.\nTranslate <code>SelectDistinct</code> into SQL statement.\nTranslate <code>SelectExpr</code> into SQL statement.\nTranslate <code>SelectExpr</code> into SQL statement.\nTranslate <code>LockType</code> into SQL statement.\nTranslate <code>LockType</code> into SQL statement.\nTranslate <code>SelectStatement</code> into SQL statement.\nTranslate <code>SelectStatement</code> into SQL statement.\nTranslate <code>SimpleExpr</code> into SQL statement.\nTranslate <code>SimpleExpr</code> into SQL statement.\nTranslate <code>SubQueryOper</code> into SQL statement.\nTranslate <code>SubQueryOper</code> into SQL statement.\nTranslate <code>TableAlterStatement</code> into SQL statement.\nTranslate <code>TableCreateStatement</code> into SQL statement.\nTranslate <code>TableCreateStatement</code> into SQL statement.\nTranslate <code>TableDropOpt</code> into SQL statement.\nTranslate <code>TableDropOpt</code> into SQL statement.\nTranslate <code>TableDropStatement</code> into SQL statement.\nTranslate <code>TableDropStatement</code> into SQL statement.\nTranslate <code>IndexCreateStatement</code> into SQL expression. This …\nTranslate <code>IndexCreateStatement</code> into SQL expression. This …\nTranslate <code>TableOpt</code> into SQL statement.\nTranslate <code>TableOpt</code> into SQL statement.\nDefault function\nDefault function\nTranslate <code>TablePartition</code> into SQL statement.\nTranslate <code>TablePartition</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> that without values into SQL statement.\nTranslate <code>TableRef</code> that without values into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRenameStatement</code> into SQL statement.\nTranslate <code>TableTruncateStatement</code> into SQL statement.\nTranslate <code>TableTruncateStatement</code> into SQL statement.\nTranslate <code>SimpleExpr::Tuple</code> into SQL statement.\nTranslate <code>SimpleExpr::Tuple</code> into SQL statement.\nTranslate <code>UnOper</code> into SQL statement.\nTranslate <code>UnOper</code> into SQL statement.\nTranslate LIMIT expression in <code>UpdateStatement</code>.\nTranslate LIMIT expression in <code>UpdateStatement</code>.\nTranslate ORDER BY expression in <code>UpdateStatement</code>.\nTranslate ORDER BY expression in <code>UpdateStatement</code>.\nTranslate <code>UpdateStatement</code> into SQL statement.\nTranslate <code>UpdateStatement</code> into SQL statement.\nWrite <code>Value</code> into SQL statement as parameter.\nTranslate a <code>&amp;[ValueTuple]</code> into a VALUES list.\nTranslate a <code>&amp;[ValueTuple]</code> into a VALUES list.\nThe type of quote the builder uses.\nUnescape a SQL string literal\nConvert a SQL value into syntax-specific string\nConvert a SQL value into syntax-specific string\nPrefix for tuples in VALUES list (e.g. ROW for Mysql)\nPrefix for tuples in VALUES list (e.g. ROW for Mysql)\nColumn and value vector having different length\nContains the error value\nContains the success value\nResult type for sea-query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper to build a <code>SimpleExpr</code>.\n“Operator” methods for building complex expressions.\nRepresents a Simple Expression in SQL.\nExpress an arithmetic addition operation.\nExpress an arithmetic addition operation.\nPerform addition with another <code>SimpleExpr</code>.\nExpress a <code>ALL</code> sub-query expression.\nExpress a logical <code>AND</code> operation.\nExpress a <code>ANY</code> sub-query expression.\nExpress a <code>AS enum</code> expression.\nExpress a <code>AS enum</code> expression.\nExpress a <code>BETWEEN</code> expression.\nExpress a <code>BETWEEN</code> expression.\nCreate any binary operation\nCreate any binary operation\nCreate any binary operation\nAdds new <code>CASE WHEN</code> to existing case statement.\nExpress a <code>CAST AS</code> expression.\nExpress a <code>CAST AS</code> expression.\nExpress a <code>CAST AS</code> expression.\nExpress a case-sensitive <code>CAST AS</code> expression.\nExpress the target column without table prefix.\nExpress a <code>COUNT</code> function.\nExpress a <code>COUNT</code> function with the DISTINCT modifier.\nKeyword <code>CURRENT_DATE</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nExpress any custom expression in <code>&amp;str</code>.\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>Value</code>. Use this if your …\nCustom keyword.\nExpress an arithmetic division operation.\nExpress an arithmetic division operation.\nPerform division with another <code>SimpleExpr</code>.\nExpress an equal (<code>=</code>) expression.\nExpress an equal (<code>=</code>) expression.\nExpress an equal (<code>=</code>) expression.\nExpress a equal expression between two table columns, you …\nExpress a equal expression between two table columns, you …\nExpress a <code>EXISTS</code> sub-query expression.\nWrap a <code>SimpleExpr</code> and perform some operation on it.\nReturns the argument unchanged.\nConvert into SimpleExpr\nReturns the argument unchanged.\nExpress a greater than (<code>&gt;</code>) expression.\nExpress a greater than (<code>&gt;</code>) expression.\nExpress a greater than or equal (<code>&gt;=</code>) expression.\nExpress a greater than or equal (<code>&gt;=</code>) expression.\nExpress a <code>IF NULL</code> function.\nExpress a <code>IN</code> sub-query expression.\nExpress a <code>IN</code> sub-query expression.\nExpress a <code>IN</code> sub expression.\nExpress a <code>IN</code> sub expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpress a <code>IS</code> expression.\nExpress a <code>IS</code> expression.\nExpress a <code>IN</code> expression.\nExpress a <code>IN</code> expression.\nExpress a <code>IS NOT</code> expression.\nExpress a <code>IS NOT</code> expression.\nExpress a <code>NOT IN</code> expression.\nExpress a <code>NOT IN</code> expression.\nExpress a <code>IS NOT NULL</code> expression.\nExpress a <code>IS NOT NULL</code> expression.\nExpress a <code>IS NULL</code> expression.\nExpress a <code>IS NULL</code> expression.\nExpress a bitwise left shift.\nExpress a bitwise left shift.\nExpress a <code>LIKE</code> expression.\nExpress a <code>LIKE</code> expression.\nExpress a <code>LIKE</code> expression.\nExpress a less than (<code>&lt;</code>) expression.\nExpress a less than (<code>&lt;</code>) expression.\nExpress a less than or equal (<code>&lt;=</code>) expression.\nExpress a less than or equal (<code>&lt;=</code>) expression.\nExpress a <code>MAX</code> function.\nExpress a <code>MIN</code> function.\nExpress an arithmetic modulo operation.\nExpress an arithmetic modulo operation.\nExpress an arithmetic multiplication operation.\nExpress an arithmetic multiplication operation.\nPerform multiplication with another <code>SimpleExpr</code>.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nNegates an expression with <code>NOT</code>.\nNegates an expression with <code>NOT</code>.\nNegates an expression with <code>NOT</code>.\nExpress a <code>NOT BETWEEN</code> expression.\nExpress a <code>NOT BETWEEN</code> expression.\nExpress a not equal expression between two table columns, …\nExpress a not equal expression between two table columns, …\nExpress a <code>NOT IN</code> sub-query expression.\nExpress a <code>NOT IN</code> sub-query expression.\nExpress a <code>NOT LIKE</code> expression.\nExpress a <code>NOT LIKE</code> expression.\nExpress a <code>NOT LIKE</code> expression.\nExpress a logical <code>OR</code> operation.\nExpress a logical <code>OR</code> operation.\nExpress a bitwise right shift.\nExpress a bitwise right shift.\nExpress a <code>SOME</code> sub-query expression.\nExpress an arithmetic subtraction operation.\nExpress an arithmetic subtraction operation.\nPerform subtraction with another <code>SimpleExpr</code>.\nExpress a <code>SUM</code> function.\nWraps tuple of <code>SimpleExpr</code>, can be used for tuple comparison\nApply any unary operator to the expression.\nExpress a <code>Value</code>, returning a <code>Expr</code>.\nExpress a <code>Value</code>, returning a <code>SimpleExpr</code>.\nHelper for constructing MS SQL comment statements\nFunction call helper.\nFunctions\nHelper for constructing MS SQL Rename statements\nHelper for constructing MS SQL type statements\nConstruct type <code>CommentStatement</code> to add an extended …\nCreate a type alias.\nAdd a column comment.\nPerform a column rename.\nCall <code>CONVERT</code> function with a custom type.\nConstruct type <code>TypeCreateStatement</code>\nGet current database name.\nConstruct type <code>CommentStatement</code> to drop an extended …\nConstruct type <code>TypeDropStatement</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>getdate() -&gt; datetime</code> function.\nSet <code>IF EXISTS</code>\nIf.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDrop a type.\nConstruct type <code>RenameStatement</code>\nThe <code>newid() -&gt; uniqueidentifier</code> function.\nTranslate <code>CommentStatement</code> into database specific SQL …\nTranslate <code>RenameStatement</code> into database specific SQL …\nTranslate <code>TypeCreateStatement</code> into database specific SQL …\nTranslate <code>TypeDropStatement</code> into database specific SQL …\nAdd a table comment.\nPerform a table rename.\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>-&gt;&gt;</code>. Retrieves JSON field and casts it to an appropriate …\nCreates a new “CREATE or DROP EXTENSION” statement for …\nCreates a new “CREATE EXTENSION” statement for …\nCreates a new “DROP EXTENSION” statement for PostgreSQL\n<code>-&gt;</code>. Retrieves JSON field as JSON value.\nBinary operator\nFunction call helper.\nFunctions\nPostgreSQL <code>ltree</code> extension type.\n<code>~</code> Regex operator.\n<code>~*</code>. Regex operator with case insensitive matching.\nHelper for constructing any type statement\nChanges only <code>ADD VALUE x</code> options into <code>ADD VALUE x AFTER</code> …\nConstruct type <code>TypeAlterStatement</code>\nCreate enum as custom type\nAdd a enum value before an existing value\nChanges only <code>ADD VALUE x</code> options into <code>ADD VALUE x BEFORE</code> …\nUses “CASCADE” on Create Extension Statement.\nUses “CASCADE” on Drop Extension Statement.\nSet <code>CASCADE</code>\nExpress a postgres retrieves JSON field and casts it to an …\nExpress a postgres retrieves JSON field and casts it to an …\nAlias of <code>PgExpr::concatenate</code>\nAlias of <code>PgExpr::concatenate</code>\nExpress an postgres concatenate (<code>||</code>) expression.\nExpress an postgres concatenate (<code>||</code>) expression.\nExpress an postgres fulltext search contained (<code>&lt;@</code>) …\nExpress an postgres fulltext search contained (<code>&lt;@</code>) …\nExpress an postgres fulltext search contains (<code>@&gt;</code>) …\nExpress an postgres fulltext search contains (<code>@&gt;</code>) …\nCreates a new <code>ExtensionCreateStatement</code>\nConstruct type <code>TypeCreateStatement</code>\nCreates a new <code>ExtensionDropStatement</code>\nConstruct type <code>TypeDropStatement</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall <code>GEN_RANDOM_UUID</code> function. Postgres only.\nExpress a postgres retrieves JSON field as JSON value (<code>-&gt;</code>).\nExpress a postgres retrieves JSON field as JSON value (<code>-&gt;</code>).\nUses “IF EXISTS” on Drop Extension Statement.\nSet <code>IF EXISTS</code>\nUses “IF NOT EXISTS” on Create Extension Statement.\nAdd a enum value if not already exists\nChanges only <code>ADD VALUE x</code> options into …\nExpress a <code>ILIKE</code> expression.\nExpress a <code>ILIKE</code> expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall the <code>JSON_AGG</code> function. Postgres only.\nCall the <code>JSON_BUILD_OBJECT</code> function. Postgres only.\nExpress an postgres fulltext search matches (<code>@@</code>) …\nExpress an postgres fulltext search matches (<code>@@</code>) …\nSets the name of the extension to be created.\nSets the name of the extension to be dropped.\nDrop a type\nChange the definition of a type\nDrop multiple types\nExpress a <code>NOT ILIKE</code> expression\nExpress a <code>NOT ILIKE</code> expression\nCall <code>PHRASE_TO_TSQUERY</code> function. Postgres only.\nCall <code>PLAIN_TO_TSQUERY</code> function. Postgres only.\nTranslate <code>ExtensionCreateStatement</code> into database specific …\nTranslate <code>ExtensionDropStatement</code> into database specific …\nTranslate <code>TypeAlterStatement</code> into database specific SQL …\nTranslate <code>TypeCreateStatement</code> into database specific SQL …\nTranslate <code>TypeDropStatement</code> into database specific SQL …\nTranslate <code>TypeRef</code> into SQL statement.\nTranslate <code>TypeRef</code> into SQL statement.\nRename a enum value\nUses “RESTRICT” on Drop Extension Statement.\nSet <code>RESTRICT</code>\nUses “WITH SCHEMA” on Create Extension Statement.\nCall <code>STARTS_WITH</code> function. Postgres only.\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nCall <code>TO_TSQUERY</code> function. Postgres only.\nCall <code>TO_TSVECTOR</code> function. Postgres only.\nCall <code>TS_RANK</code> function. Postgres only.\nCall <code>TS_RANK_CD</code> function. Postgres only.\nUses “VERSION” on Create Extension Statement.\nCall <code>WEBSEARCH_TO_TSQUERY</code> function. Postgres only.\n<code>-&gt;&gt;</code>. Retrieves JSON field and casts it to an appropriate …\n<code>-&gt;</code>. Retrieves JSON field as JSON value.\n<code>GLOB</code>\n<code>MATCH</code>.\nSqlite-specific binary operator.\nExpress an sqlite retrieves JSON field and casts it to an …\nExpress an sqlite retrieves JSON field and casts it to an …\nReturns the argument unchanged.\nExpress an sqlite retrieves JSON field as JSON value (<code>-&gt;</code>).\nExpress an sqlite retrieves JSON field as JSON value (<code>-&gt;</code>).\nExpress an sqlite <code>GLOB</code> operator.\nExpress an sqlite <code>GLOB</code> operator.\nCalls <code>U::from(self)</code>.\nExpress an sqlite <code>MATCH</code> operator.\nExpress an sqlite <code>MATCH</code> operator.\nShorthand for constructing any foreign key statement\nForeign key on update &amp; on delete actions\nCreate a foreign key constraint for an existing table. …\nDrop a foreign key constraint for an existing table\nAll available types of foreign key statement\nSpecification of a foreign key\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nConstruct foreign key <code>ForeignKeyCreateStatement</code>\nConstruct foreign key <code>ForeignKeyDropStatement</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet key table and columns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd key column\nAdd key column\nSet key table\nSet key table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet foreign key name\nSet foreign key name\nSet foreign key name\nConstruct a new foreign key\nConstruct a new <code>ForeignKeyCreateStatement</code>\nConstruct a new <code>ForeignKeyDropStatement</code>\nSet on delete action\nSet on delete action\nSet on update action\nSet on update action\nSet key table and referencing table\nSet referencing table and columns\nAdd referencing column\nAdd referencing column\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSet referencing table\nSet referencing table\nFunction call helper.\nFunctions\nFunction call.\nCall <code>ABS</code> function.\nAppend an argument to the function call\nReplace the arguments of the function call\nCall <code>AVG</code> function.\nCall <code>BIT_AND</code> function, this is not supported on SQLite.\nCall <code>BIT_OR</code> function, this is not supported on SQLite.\nCall <code>CAST</code> function with a custom type.\nCall <code>CAST</code> function with a case-sensitive custom type.\nCall <code>CHAR_LENGTH</code> function.\nCall <code>COALESCE</code> function.\nCall <code>COUNT</code> function.\nCall <code>COUNT</code> function with the <code>DISTINCT</code> modifier.\nCall a custom function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall <code>IF NULL</code> function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall <code>LOWER</code> function.\nCall <code>MAX</code> function.\nCall <code>MD5</code> function, this is only available in Postgres and …\nCall <code>MIN</code> function.\nCall <code>RANDOM</code> function.\nCall <code>ROUND</code> function.\nCall <code>ROUND</code> function with the precision.\nCall <code>SUM</code> function.\nCall <code>UPPER</code> function.\nShorthand for constructing any index statement\nCreate an index for an existing table\nDrop an index for an existing table\nAll available types of index statement\nSpecification of a table index\nSpecification of a table index\nMS SQL only.\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSet index column\nAdd index column\nConstruct index <code>IndexCreateStatement</code>\nConstruct index <code>IndexDropStatement</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet index as full text. On MySQL, this is <code>FULLTEXT</code>. On …\nCreate index if index not exists\nSet index type. Not available on Sqlite.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet index name\nSet index name\nSet index name\nConstruct a new table index\nConstruct a new <code>IndexCreateStatement</code>\nConstruct a new <code>IndexDropStatement</code>\nSet nulls to not be treated as distinct values. Only …\nSet index as primary\nSet target table\nSet target table\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSet index as unique\nA trait for writing or formatting into Unicode-accepting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nBreadth first traversal during the execution of the …\nUpdate column value of existing row with inserting value\nA table definition inside a WITH clause (WithClause).\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nRepresents anything that can be passed to an <code>Condition::any</code>…\nA column\nAn expression <code>(LOWER(column), ...)</code>\nFor recursive WithQuery WithClauses the CYCLE sql clause …\nDepth first traversal during the execution of the …\nDelete existing rows from the table\nDo nothing\nUpdate column value of existing row with expression\nframe_start or frame_end clause\nFrame clause\nFrame type\nInsert any new rows into an existing table\nJoin expression used in select statement\nList of lock behavior can be used in select statement\nList of lock types that can be used in select statement\nName in <code>SelectStatement</code>\nRepresents ON CONFLICT (upsert) actions\nRepresents ON CONFLICT (upsert) targets\nRepresents strategies to update column in ON CONFLICT …\nShorthand for constructing any table query\nInline query in <code>SelectExpr</code>\nAll available types of table query\nShorthand for constructing <code>ReturningClause</code>\nRETURNING clause.\nFor recursive WithQuery WithClauses the traversing order …\nFor recursive WithQuery WithClauses the traversing order …\nList of distinct keywords that can be used in select …\nSelect expression used in select statement\nSelect rows from an existing table\nShared lock\nList of union types that can be used in union clause\nUpdate column value of existing row\nExclusive lock\nUpdate existing rows in the table\nWindow type in <code>SelectExpr</code>\nWindow expression\nA WITH clause can contain one or multiple common table …\nA WITH query. A simple SQL query that has a WITH clause (…\nSet action WHERE\nSet action WHERE\nSet action WHERE\nAdd a condition to the set.\nAdd group by expressions from vector of <code>SelectExpr</code>.\nAdd an optional condition to the set.\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nCreate a condition that is false if any of the conditions …\nConstructs a new <code>ReturningClause::All</code>.\nMacro to easily create an <code>Condition::all</code>.\nAnd having condition.\nSee <code>ConditionalStatement::and_or_where</code>\nSee <code>ConditionalStatement::and_or_where</code>\nSee <code>ConditionalStatement::and_or_where</code>\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nSee <code>ConditionalStatement::and_where</code>\nSee <code>ConditionalStatement::and_where</code>\nSee <code>ConditionalStatement::and_where</code>\nOptional and where, short hand for …\nOptional and where, short hand for …\nSee <code>ConditionalStatement::and_where_option</code>\nSee <code>ConditionalStatement::and_where_option</code>\nSee <code>ConditionalStatement::and_where_option</code>\nCreate a condition that is true if any of the conditions …\nMacro to easily create an <code>Condition::any</code>.\nConstruct part of the select statement in another function.\nA shorthand to express if … else … when constructing …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nBuild corresponding SQL statement into the SqlWriter for …\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nAdds new <code>CASE WHEN</code> to existing case statement.\nClear order expressions\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nClear the select list\nSet ON CONFLICT target column\nConstructs a new <code>ReturningClause::Columns</code>.\nAdd a column to the select expression list.\nAdds a named column to the CTE table definition.\nSpecify what columns to insert.\nSet ON CONFLICT target columns\nConstructs a new <code>ReturningClause::Columns</code>.\nSelect columns.\nAdds a named columns to the CTE table definition.\nHaving condition, expressed with <code>any!</code> and <code>all!</code>.\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nSee <code>ConditionalStatement::cond_where</code>\nSee <code>ConditionalStatement::cond_where</code>\nSee <code>ConditionalStatement::cond_where</code>\nA shorthand to express if … else … when constructing …\nCross join.\nAdd a CommonTableExpression to this with clause.\nAdd a CommonTableExpression to the with clause. See …\nFor recursive WITH queries you can specify the Cycle …\nSet the WithClause::cycle. See that method for more …\nConstruct table <code>DeleteStatement</code>\nSelect distinct\nSelect distinct on for <em>POSTGRES ONLY</em>\nSet ON CONFLICT do nothing.\nSet ON CONFLICT do nothing, but with MySQL specific …\nSet ON CONFLICT target expression\nConstructs a new <code>ReturningClause::Exprs</code>.\nAdd an expression to the select expression list.\nThe given SelectExpr must have an alias specified.\nThe expression identifying nodes.\nSelect column.\nSelect column with window function.\nSelect column with window function and label.\nSelect column with window name.\nSelect column with window name and label.\nSet multiple target expressions for ON CONFLICT. See …\nConstructs a new <code>ReturningClause::Exprs</code>.\nAdd select expressions from vector of <code>SelectExpr</code>.\nEnds the case statement with the final <code>ELSE</code> result.\nForce index hint for MySQL\nframe clause\nframe clause for BETWEEN frame_start AND frame_end\nframe clause for frame_start\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom table with alias.\nClears all current from clauses.\nFrom function call.\nCreate a CTE from a SelectStatement if the selections are …\nFrom sub-query.\nSpecify which table to delete from.\nShorthand for selecting from a constant value list. Panics …\nFull outer join.\nGet column values\nAdd a group by column.\nGroup by columns.\nIgnore index hint for MySQL\nInner join.\nConstruct table <code>InsertStatement</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSpecify which table to insert into.\nWhether or not any condition has been added\nJoin with other table by <code>JoinType</code>.\nJoin with other table by <code>JoinType</code>, assigning an alias to …\nJoin Lateral with sub-query. Not supported by SQLite.\nJoin with sub-query.\nLeft join.\nHow many conditions were added\nLimit number of updated rows.\nLimit the number of returned rows.\nLimit number of updated rows.\nRow locking (if supported).\nExclusive row locking (if supported).\nShared row locking (if supported).\nRow locking with behavior (if supported).\nRow locking with tables (if supported).\nRow locking with tables and behavior (if supported).\nSome databases allow you to put “MATERIALIZED” or “…\nCreates a new case statement expression\nConstruct a new <code>DeleteStatement</code>\nConstruct a new <code>InsertStatement</code>\nCreate a ON CONFLICT expression without target column, a …\nConstructs a new <code>Returning</code>.\nConstruct a new <code>SelectStatement</code>\nConstruct a new <code>UpdateStatement</code>\nConstruct a new <code>WindowStatement</code>\nConstruct a new <code>CommonTableExpression</code>\nConstructs a new empty Search.\nConstructs a new empty Cycle.\nConstructs a new WithClause.\nConstructs a new empty WithQuery.\nCreate a complete Search specification from the SearchOrder…\nCreate a complete Search specification from the SearchOrder…\nNegates a condition.\nOffset number of returned rows.\nON CONFLICT expression\nInsert with default values if columns and values are not …\nInsert multiple rows with default values if columns and …\nThe traversal order to be used.\nOrder by column.\nOrder by column.\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nOrder by vector of columns.\nOrder by vector of columns.\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nOrder by vector of columns with nulls order option.\nOrder by vector of columns with nulls order option.\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nOrder by custom string.\nOrder by custom string.\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nOrder by custom string with nulls order option.\nOrder by custom string with nulls order option.\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code>.\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by <code>SimpleExpr</code> with nulls order option.\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nOrder by column with nulls order option.\nOrder by column with nulls order option.\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nPartition by column.\nPartition by column.\nConstruct a new <code>WindowStatement</code> with PARTITION BY column\nPartition by vector of columns.\nPartition by vector of columns.\nConstruct a new <code>WindowStatement</code> with PARTITION BY custom\nPartition by custom string.\nPartition by custom string.\nSet the query generating the CTE content. The query’s …\nYou can turn this into a WithQuery using this function. …\nSet the query that you execute with the WithClause.\nSets whether this clause is a recursive with clause of not.\nSet the WithClause::recursive. See that method for more …\nUse REPLACE instead of INSERT\nReset limit\nReset offset\nRETURNING expressions.\nRETURNING expressions.\nRETURNING expressions.\nConstruct <code>Returning</code>\nRETURNING expressions all columns.\nRETURNING expressions all columns.\nRETURNING expressions all columns.\nRETURNING expressions for a column.\nRETURNING expressions for a column.\nRETURNING expressions for a column.\nRight join.\nFor recursive WITH queries you can specify the Search …\nAdd the WithClause::search. See that method for more …\nConstruct table <code>SelectStatement</code>\nSpecify a select query whose values to be inserted.\nThe name of the boolean column containing whether we have …\nSpecify which table to update.\nSets the CTE table name of the query.\nTake the ownership of data in the current <code>SelectStatement</code>\nSet target WHERE\nSet target WHERE\nSet target WHERE\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSet up the columns of the CTE to match the given …\nUnion with another SelectStatement that must have the same …\nUnion with multiple SelectStatement that must have the …\nConstruct table <code>UpdateStatement</code>\nSet ON CONFLICT update column\nSet ON CONFLICT update columns\nUse index hint for MySQL\nThe name of the array typed column that contains the node …\nSet ON CONFLICT update value\nUpdate column value by <code>SimpleExpr</code>.\nSpecify a row of values to be inserted.\nSet ON CONFLICT update exprs\nUpdate column values. To set multiple column-value pairs …\nAdd rows to be inserted from an iterator, variation of …\nSpecify a row of values to be inserted, variation of …\nWINDOW\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nConstruct <code>WithClause</code>\nSet the whole WithClause.\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild corresponding SQL statement for certain database …\ntable alter add column options\nSpecification of a table column\nAll column specification keywords\nAll column types\nString size\nLength for var-char/binary; default to 255\nHelper for constructing any table statement\nAll available table alter options\nAlter a table\nCreate a table\nAll available table drop options\nDrop a table\nAll available table options\nAll available table partition options\nRename a table\nAll available types of table statement\nDrop a table\nAdd a column to an existing table\nTry add a column to an existing table if it does not exists\nAdd a foreign key to existing table\nConstruct table <code>TableAlterStatement</code>\nSet column type as an array with a specified element type. …\nSet column auto increment. Maps to <code>IDENTITY</code> on MS SQL.\nSet column type as big_integer\nSet column type as big_unsigned\nSet column type as binary with default length of 1\nSet column type as binary with custom length\nSet column type as bit with variable length\nSet column type as blob\nSet column type as boolean\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nBuild corresponding SQL statement for certain database …\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nBuild corresponding SQL statement for certain database …\nDrop option cacade\nSet column type as char\nSet column type as char with custom length\nSet database character set. MySQL only.\nSet constraints as SimpleExpr\nSet columnt type as cidr. This is only supported on …\nAdd a new table column\nSet database collate. MySQL only.\nMySQL only.\nSet table comment\nConstruct table <code>TableCreateStatement</code>\nUse a custom type on this column.\nSet column type as date\nSet column type as date_time\nSet column type as decimal\nSet column type as decimal with custom precision and scale\nSet default expression of a column\nSet column type as double\nConstruct table <code>TableDropStatement</code>\nDrop a column from an existing table\nDrop a foreign key from existing table\nSet database engine. MySQL only.\nSet column type as enum.\nSome extra options in custom string\nRewriting extra param. You should take care self about …\nSet column type as float\nAdd a foreign key\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the column as generated with SimpleExpr\nDrop table if exists\nCreate table if table not exists\nAdd an index. MySQL only.\nSet columnt type as inet. This is only supported on …\nSet column type as integer\nSet column type as interval type with optional fields and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet column type as json.\nSet column type as json binary.\nSet column type as <code>ltree</code> This is only supported on …\nSet columnt type as macaddr. This is only supported on …\nModify a column in an existing table\nSet column type as money\nSet column type as money with custom precision and scale\nConstruct alter table statement\nConstruct a table column\nConstruct create table statement\nConstruct drop table statement\nConstruct rename table statement\nConstruct truncate table statement\nConstruct a table column with column type\nSet column not null\nSet column null\nSet column as primary key\nAdd an primary key.\nConstruct table <code>TableRenameStatement</code>\nRename a column in an existing table\nDrop option restrict\nSet column type as small_integer\nSet column type as small_unsigned\nSet column type as string\nSet column type as string with custom length\nSet column type as string with maximum length\nSet table name\nSet table name\nSet table name\nSet old and new table name\nSet table name\nSet column type as text\nSet column type as time\nSet column type as timestamp\nSet column type as timestamp with time zone. Postgres only\nSet column type as tiny_integer\nSet column type as tiny_unsigned\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nBuild corresponding SQL statement for certain database …\nConstruct table <code>TableTruncateStatement</code>\nSet column unique constraint\nSet column type as unsigned\nSet column type as uuid\nSet column type as binary with variable length\nSet column type as binary with maximum length\nSet column type as varbit with variable length\nSet column type as XML. MS SQL only.\nSet column type as year Only MySQL supports year\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper for create name alias\nAsterisk (“*”)\nBinary operator\nColumn references\nTable identifier with database and schema prefix\nTable identifier with database and schema prefix and alias\nFunction call with alias\nIdentifier\nIdentifier\nJoin on types\nJoin types\nSQL Keywords\nLike Expression\nLogical chain operator\nNull Alias\nNulls order\nOrdering options\nOrder expression\nA single-threaded reference-counting pointer. ‘Rc’ …\nTable identifier with schema prefix\nTable identifier with schema prefix and alias\nSubquery with alias\nSubQuery operators\nTable identifier without any schema / database prefix\nTable identifier with alias\nTable references\nUnary operator\nValues list with alias\nAdd or replace the current alias\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nConverts to <code>Rc&lt;[T]&gt;</code>.\nConverts to <code>Rc&lt;T&gt;</code>.\nMakes a clone of the <code>Rc</code> pointer.\nComparison for two <code>Rc</code>s.\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCreates an empty CStr inside an Rc\nCreates an empty str inside an Rc\nCreates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty <code>[T]</code> inside an Rc\nAttempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nDowncasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Rc</code>.\nEquality for two <code>Rc</code>s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllocate a reference-counted string slice and copy <code>v</code> into …\nConverts a <code>[T; N]</code> into an <code>Rc&lt;[T]&gt;</code>.\nConverts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …\nMove a boxed object to a new, reference counted, …\nCopies the string into a newly allocated Rc&lt;OsStr&gt;.\nConverts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …\nConverts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …\nAllocate a reference-counted string slice and copy <code>v</code> into …\nConverts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …\nAllocate a reference-counted slice and move <code>v</code>’s items …\nCreate a reference-counted pointer from a clone-on-write …\nConverts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>\nConverts a reference-counted string slice into a byte …\nConverts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …\nAllocate a reference-counted slice and fill it by cloning <code>v</code>…\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Rc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Rc&lt;T, A&gt;</code> from a raw pointer in the provided …\n‘Greater than or equal to’ comparison for two <code>Rc</code>s.\nReturns a mutable reference into the given <code>Rc</code>, if there are\nReturns a mutable reference into the given <code>Rc</code>, without any …\nGreater-than comparison for two <code>Rc</code>s.\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Rc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nConsumes the <code>Rc</code>, returning the wrapped pointer.\nConsumes the <code>Rc</code>, returning the wrapped pointer and …\n‘Less than or equal to’ comparison for two <code>Rc</code>s.\nLess-than comparison for two <code>Rc</code>s.\nMakes a mutable reference into the given <code>Rc</code>.\nInequality for two <code>Rc</code>s.\nConstructs a new <code>Rc&lt;T&gt;</code>.\nConstructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Rc</code> in the provided allocator.\nConstructs a new <code>Rc</code> with uninitialized contents.\nConstructs a new <code>Rc</code> with uninitialized contents in the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new reference-counted slice with …\nConstructs a new reference-counted slice with …\nPartial comparison for two <code>Rc</code>s.\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code> in the provided allocator. If <code>T</code>…\nReturns <code>true</code> if the two <code>Rc</code>s point to the same allocation …\nGets the number of strong (<code>Rc</code>) pointers to this allocation.\nConstructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …\nConstructs a new <code>Rc&lt;T&gt;</code> in the provided allocator, …\nConstructs a new <code>Rc</code> with uninitialized contents, returning …\nConstructs a new <code>Rc</code> with uninitialized contents, in the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nConstructs a new <code>Rc</code> with uninitialized contents, with the …\nReturns the inner value, if the <code>Rc</code> has exactly one strong …\nIf we have the only reference to <code>T</code> then unwrap it. …\nGets the number of <code>Weak</code> pointers to this allocation.\n<code>Value</code> types variant for Postgres array\nValue variants\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")