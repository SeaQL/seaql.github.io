searchState.loadedDescShard("security_framework", 0, "Wrappers around the OSX Security Framework.\nAccess Control support.\nAuthorization Services support.\nSupport types for other modules.\nCertificate support.\nCipher Suites supported by Secure Transport\nIdentity support.\nSecurity Framework type import/export support.\nSupport to search for items in a keychain.\nEncryption key support\nOS specific extensions.\nSupport for password entries in the keychain.  Works on …\nSupport for password options, to be used with the …\nSecurity Policies support.\nRandomness support.\nSSL/TLS encryption support using Secure Transport.\nTrust evaluation support.\nQuerying trust settings.\nThe data in the keychain item cannot be accessed after a …\nThe data in the keychain item cannot be accessed after a …\nThe data in the keychain can only be accessed when the …\nThe data in the keychain item can be accessed only while …\nThe data in the keychain item can be accessed only while …\nSpecify when an item is available.\nA type representing sec access control settings.\nCreate <code>AccessControl</code> object from flags\nCreate <code>AccessControl</code> object from a protection value and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA wrapper around <code>AuthorizationCreate</code> and functions which …\nInformation about an authorization right or the …\nA set of authorization items returned and owned by the …\nA convenience <code>AuthorizationItemSetBuilder</code> builder which …\nUsed by <code>AuthorizationItemSetBuilder</code> to store data pointed …\nAn empty flag set that you use as a placeholder when you …\nA flag that instructs the Security Server to revoke …\nA flag that permits the Security Server to attempt to …\nThe flags used to specify authorization options.\nThe dictionary will contain the keys and values that …\nThe specified right’s rules will be duplicated.\nA flag that permits user interaction as needed.\nA flag that permits the Security Server to grant rights on …\nA flag that instructs the Security Server to preauthorize …\nUsed by <code>Authorization::set_item</code> to define the rules of he …\nAdds an <code>AuthorizationItem</code> with arbitrary data.\nAdds an <code>AuthorizationItem</code> with the name set to a right and …\nAdds an <code>AuthorizationItem</code> with NULL terminated string data.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreates the <code>sys::AuthorizationItemSet</code>, and gives you …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nAn authorization plugin can store the results of an …\nCreates an authorization object which has no environment …\nBy default the rights acquired will be retained by the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nRuns an executable tool with root privileges. Discards …\nRuns an executable tool with root privileges, and returns …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nInternalizes the external representation of an …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieve’s the right’s definition as a dictionary. Use …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates an external representation of an authorization …\nThe required name of the authorization right or …\nCreates a new <code>AuthorizationItemSetStore</code>, which simplifies …\nCreates an authorization reference and provides an option …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nRemoves a right from the policy database.\nChecks if a right exists within the policy database. This …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nMust not be given to APIs which would attempt to modify it.\nCreates or updates a right entry in the policy database. …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nInternalizes the external representation of an …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe information pertaining to the name field. Do not rely …\nContains the error value\nA Security Framework error.\nContains the success value\nA <code>Result</code> type commonly returned by functions.\nReturns the code of the current error.\nReturns the argument unchanged.\nCreates a new <code>Error</code> from a status code. The code must not …\nCalls <code>U::from(self)</code>.\nReturns a string describing the current error, if …\nA type representing a certificate.\nAdds a certificate to a keychain.\nTranslates to <code>SecItemDelete</code>, passing in the …\nReturns a vector of email addresses for the subject of the …\nReturns the SHA-256 fingerprint of the certificate.\nReturns the argument unchanged.\nCreates a <code>SecCertificate</code> from DER encoded certificate data.\nCalls <code>U::from(self)</code>.\nReturns DER encoded X.509 distinguished name of the …\nGet public key from certificate\nReturns DER encoded subjectPublicKeyInfo of certificate if …\nReturns DER encoded X.509 distinguished name of the …\nReturns a human readable summary of this certificate.\nReturns DER encoded data describing this certificate.\nTLS cipher suites.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type representing an identity.\nReturns the certificate corresponding to this identity.\nTranslates to <code>SecItemDelete</code>, passing in the <code>SecIdentityRef</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the private key corresponding to this identity.\nInformation about an imported identity.\nA builder type to import an identity from PKCS#12 …\nA certificate chain validating this identity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe identity itself.\nImports identities from PKCS#12 encoded data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe ID of the identity. Typically the SHA-1 hash of the …\nThe label of the identity.\nCreates a new builder with default options.\nSpecifies the passphrase to be used to decrypt the data.\nA <code>SecTrust</code> object set up to validate this identity.\nType of Ref to add to the keychain.\nAlways return all results\n<code>SecCertificate</code>\nA <code>SecCertificate</code>.\nThe Security Framework object as bytes, if asked for.\nPass item by Data (kSecValueData)\nStore the key in the default file-based keychain. On …\nA dictionary of data about the Security Framework object, …\nStore the key in a specific file-based keychain.\n<code>SecIdentity</code>\nA <code>SecIdentity</code>.\nBuilder-pattern struct for specifying options for <code>add_item</code> …\nValue of an item to add to the keychain.\nSpecifies the type of items to search for.\nA builder type to search for items in keychains.\n<code>SecKey</code>\nA <code>SecKey</code>.\nSpecifies the type of keys to search for.\nA <code>SecKeychainItem</code>.\nSpecifies the number of results returned by a search\nWhich keychain to add an item to.\nReturn up to the specified number of results\nAn unknown representation of the Security Framework object.\nA reference to the Security Framework object, if asked for.\nPass item by Ref (kSecValueRef)\nAn enum including all objects whose references can be …\nAn individual search result.\nSearch for an item with a specific access group.\nOptional kSecAttrAccessGroup attribute.\nSets <code>kSecAttrAccessGroup</code> to <code>kSecAttrAccessGroupToken</code>\nSearch for an item with the given account.\nOptional kSecAttrAccount attribute.\nTranslates to <code>SecItemAdd</code>. Use <code>ItemAddOptions</code> to build an …\nSearch for a key with the given public key hash.\nWhether search for an item should be case insensitive or …\nLook for <code>SecCertificate</code>s.\nSearch only for items of the specified class.\nOptional kSecAttrComment attribute.\nOptional kSecAttrDescription attribute.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook for <code>SecKeychainItem</code>s corresponding to generic …\nLook for <code>SecIdentity</code>s.\nLook for <code>SecKeychainItem</code>s corresponding to internet …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook for <code>SecKey</code>s.\nSearch only for keys of the specified class. Also sets …\nSearch for an item with the given label.\nOptional kSecAttrLabel attribute.\nLimit the number of search results.\nLoad Security Framework object attributes for the results.\nLoad Security Framework objects data for the results.\nLoad Security Framework objects (<code>SecCertificate</code>, <code>SecKey</code>, …\nOptional keychain location.\nSpecifies the item to add.\nCreates a new builder with default options.\n<code>kSecAttrKeyClassPrivate</code>\nSearch for a certificate with the given public key hash.\n<code>kSecAttrKeyClassPublic</code>\nSearch for objects.\nSearch for an item with the given service.\nOptional kSecAttrService attribute.\nSpecifies the <code>kSecAttrAccessGroup</code> attribute.\nSpecifies the <code>kSecAttrAccount</code> attribute.\nSpecifies the <code>kSecAttrComment</code> attribute.\nSpecifies the <code>kSecAttrDescription</code> attribute.\nSpecifies the <code>kSecAttrLabel</code> attribute.\nSpecifies which keychain to add the item to.\nSpecifies the <code>kSecAttrService</code> attribute.\nIf the search result is a <code>CFDict</code>, simplify that to a …\nSearch for an item with exactly the given subject.\n<code>kSecAttrKeyClassSymmetric</code>\nPopulates a <code>CFDictionary</code> to be passed to\nWhether untrusted certificates should be returned.\nThe value (by ref or data) of the item to add, required.\nThe item class (kSecClass).\nThe item data.\nHelper for creating <code>CFDictionary</code> attributes for …\nTypes of <code>SecKey</code>s.\nA type representing an encryption key.\nGenerate the key in the Secure Enclave such that the …\nGenerate the key in software, compatible with all <code>KeyType</code>s.\nWhere to generate the key.\nAccess control\nReturns the programmatic identifier for the key. For keys …\nTranslates to <code>SecKeyCopyAttributes</code>\nCreates the cryptographic signature for a block of data …\nTranslates to <code>SecItemDelete</code>, passing in the <code>SecKeyRef</code>\nTranslates to <code>SecKeyCopyExternalRepresentation</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTranslates to <code>SecKeyCreateRandomKey</code> <code>GenerateKeyOptions</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nkSecAttrKeyType\nkSecAttrLabel\nWhich keychain to store the key in, if any.\nTranslates to <code>SecKeyCopyPublicKey</code>\nSet <code>access_control</code>\nSet <code>key_type</code>\nSet <code>label</code>\nSet <code>location</code>\nSet <code>size_in_bits</code>\nSet <code>token</code>\nkSecAttrKeySizeInBits\nCollect options into a <code>CFDictioanry</code>\nkSecAttrTokenID\nVerifies the cryptographic signature for a block of data …\nOSX specific extensions.\nAccess functionality.\nOSX specific extensions to certificate functionality.\nOIDs associated with certificate properties.\nCode signing services.\nDigest Transform support\nEncryption and Decryption transform support.\nOSX specific extensions to identity functionality.\nOSX specific extensions to import/export functionality.\nOSX specific functionality for items.\nOSX specific functionality for keys.\nKeychain support.\nKeychain item support.\nPassword support.\nOSX specific extensions to Secure Transport functionality.\nTransform support\nA type representing access settings.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProperties associated with a certificate.\nA property associated with a certificate.\nA “section” property.\nAn iterator over the properties in a section.\nAn enum of the various types of properties.\nAn extension trait adding OSX specific functionality to …\nA section.\nA string.\nReturns the common name associated with the certificate.\nReturns the SHA-256 fingerprint of the certificate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a specific property identified by its OID.\nReturns an enum of the underlying data for this property.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the properties in this section.\nReturns the label of this property.\nReturns the set of properties associated with the …\nReturns the public key associated with the certificate.\nAn identifier of a property of a certificate.\nReturns the underlying raw pointer corresponding to this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the string representation of the OID.\nDo not validate either the main executable or the bundle …\nFor multi-architecture (universal) Mach-O programs, …\nApple have not documented this flag.\nFor code in bundle form, locate and recursively check …\nApple have not documented this flag.\nApple have not documented this flag.\nDo not validate the contents of the main executable.\nDo not validate the presence and contents of all bundle …\nApple have not documented this flag.\nApple have not documented this flag.\nValues that can be used in the flags parameter to most …\nA helper to create guest attributes, which are normally …\nUse the default behaviour.\nApple have not documented this flag.\nApple have not documented this flag.\nApple have not documented this flag.\nApple have not documented this flag.\nApple have not documented this flag.\nApple have not documented this flag.\nApple have not documented this flag.\nPerform additional checks to ensure the validity of code …\nA code object representing signed code running on the …\nA code object representing signed code running on the …\nA static code object representing signed code on disk.\nApple have not documented this flag.\nApple have not documented this flag.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nPerforms dynamic validation of signed code.\nPerforms dynamic validation of signed code.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nAsks a code host to identify one of its guests given the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRetrieves the code object for the code making the call.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a static code object representing the code at a …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreates a new, empty <code>GuestAttributes</code>. You must add values …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRetrieves the location on disk of signed code, given a …\nRetrieves the location on disk of signed code, given a …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe guest’s audit token.\nSupport for arbirtary guest attributes.\nThe guest’s pid.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA builder for digest transform operations.\nA type of digest.\nComputes the digest of the data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the key used for HMAC digests.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the output length of the digest.\nReturns a new builder with default settings.\nSets the type of digest to perform.\nA builder for encryption and decryption transform …\nThe cipher mode to use.\nThe padding scheme to use for encryption.\nDecrypts data with a provided key.\nEncrypts data with a provided key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the initialization vector to use.\nSelects the encryption mode to use.\nCreates a new <code>Builder</code> with a default configuration.\nDo not pad.\nUse OAEP padding.\nSelects the padding scheme to use.\nUse PKCS#1 padding.\nUse PKCS#5 padding.\nUse PKCS#7 padding.\nAn extension trait adding OSX specific functionality to …\nCreates an identity corresponding to a certificate, …\nA builder type to import Security Framework types from …\nAn extension trait adding OSX specific functionality to …\nA type which holds items imported from serialized data.\nSpecifies the access control to be associated with the …\nSets the prompt of the alert popup used with the …\nSets the title of the alert popup used with the …\nImported certificates.\nSets the filename from which the imported data came.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImported identities.\nImports items from serialized data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the object into which imported items will be placed.\nSpecifies the keychain in which to import the identity.\nSets the keychain into which items will be imported.\nImported keys.\nCreates a new builder with default options.\nIf set, imported items will have no access controls …\nSets the passphrase to be used to decrypt the imported …\nSets the passphrase to be used to decrypt the imported …\nIf set, the user will be prompted to imput the passphrase …\nAn extension trait adding OSX specific functionality to …\nSearch within the specified keychains.\nAn extension trait adding OSX specific functionality to …\nCreates a new <code>SecKey</code> from a buffer containing key data.\nA builder type to create new keychains.\nSettings associated with a <code>SecKeychain</code>.\nAutomatically re-enables user interaction.\nA type representing a keychain.\nSets the access control applied to the keychain.\nAdd application password to the keychain, without checking …\nAdd internet password to the keychain, without checking if …\nCreates a new keychain at the specified location on the …\nCreates a <code>SecKeychain</code> object corresponding to the user’s …\nCreates a <code>SecKeychain</code> object corresponding to the user’s …\nDisables the user interface for keychain services …\nFind application password in this keychain\nFind internet password in this keychain\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>KeychainSettings</code> with default settings.\nCreates a new builder with default options.\nOpens a keychain from a file.\nSets the password to be used to protect the keychain.\nIf set, the user will be prompted to provide a password …\nSet a generic password.\nUpdate existing or add new internet password\nSets the interval of time in seconds after which the …\nIf set, the keychain will automatically lock when the …\nSets settings of the keychain.\nUnlocks the keychain.\nIndicates whether keychain services functions that …\nA type representing a keychain item.\nDelete this item from its keychain\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nModify keychain item in-place, replacing its password with …\nPassword slice. Use <code>.as_ref()</code> to get <code>&amp;[u8]</code> or <code>.to_owned()</code> …\nFind a generic password.\n<code>keychains</code> is an array of keychains to search or None to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn extension trait adding OSX specific functionality to the\nAn extension trait adding OSX specific functionality to …\nAdds certificate authorities used to validate client …\nIf enabled, server identity changes are allowed during …\nIf enabled, the handshake process will pause and return …\nReturns the certificate authorities used to validate client\nReturns <code>true</code> iff <code>break_on_client_hello</code> was set and the …\nReturns the DER encoded data specifying the parameters …\nIf enabled, fallback countermeasures will be used during …\nIf enabled, server identity changes are allowed during …\nIf enabled, the handshake process will pause and return …\nSets the certificate authorities used to validate client …\nSets the parameters used for Diffie-Hellman key exchange, …\nIf enabled, fallback countermeasures will be used during …\nA type representing a transform.\nExecutes the transform.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets an attribute of the transform.\nDelete the generic password keychain entry for the given …\nDelete the internet password for the given endpoint …\nGet the generic password for the given service and …\nGet the internet password for the given endpoint …\nSet a generic password for the given service and account. …\nSet an internet password for the given endpoint parameters.\nIndicates that all constraints must be satisfied.\nOption to use an application-provided password for data …\nThe option flags used to configure the evaluation of a …\nConstraint to access an item with a passcode.\nIndicates that at least one constraint must be satisfied.\nEnable a private key to be used in signing a block of data …\n<code>PasswordOptions</code> constructor\nConstraint to access an item with either biometry or …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nCreate a new generic password options Generic passwords …\nCreate a new internet password options Internet passwords …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nquery built for the keychain request\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAdd access control to the password\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nPerform revocation checking using the CRL (Certification …\nConsult only locally cached replies; do not use network …\nPerform revocation checking using OCSP (Online Certificate …\nPrefer CRL revocation checking over OCSP; by default, OCSP …\nRequire a positive response to pass the policy.\nThe flags used to specify revocation policy options.\nA type representing a certificate validation policy.\nPerform either OCSP or CRL checking.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreates a <code>SecPolicy</code> for checking revocation of …\nCreates a <code>SecPolicy</code> for evaluating SSL certificate chains.\nReturns a policy object for the default X.509 policy.\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA source of random data.\nFills the buffer with cryptographically secure random …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe session has been aborted due to an error.\nAll supported TLS/SSL versions are accepted.\nRequire a client certificate.\nThe client side of the session.\nThe session has been terminated.\nThe session is connected.\nA builder type to simplify the creation of client side …\nAn error or intermediate state after a TLS handshake …\nA DTLS session.\nThe <code>DTLSv1</code> protocol is preferred.\nThe handshake failed.\nThe handshake failed.\nThe session is in the handshake process.\nAn error or intermediate state after a TLS handshake …\nThe session has not yet started.\nThe handshake was interrupted midway through.\nThe handshake was interrupted midway through.\nAn SSL stream midway through the handshake process.\nAn SSL stream midway through the handshake process.\nDo not request a client certificate.\nA client certificate has not been requested or sent.\nA client certificate has been received but has failed to …\nA client certificate has been requested but not recieved.\nA client certificate has been received and successfully …\nThe server side of the session.\nOnly the SSL 2.0 protocol is accepted.\nThe SSL 3.0 protocol is preferred, though SSL 2.0 may be …\nOnly the SSL 3.0 protocol is accepted.\nA traditional TLS stream.\nA builder type to simplify the creation of server-side …\nSpecifies the state of a TLS session.\nSpecifies a server’s requirement for client certificates.\nSpecifies the state of client certificate processing.\nSpecifies the type of TLS session.\nA Secure Transport SSL/TLS context object.\nSpecifies protocol versions.\nSpecifies a side of a TLS session.\nA type implementing SSL/TLS encryption over an underlying …\nThe TLS 1.0 protocol is preferred, though lower versions …\nThe TLS 1.1 protocol is preferred, though lower versions …\nThe TLS 1.2 protocol is preferred, though lower versions …\nThe TLS 1.3 protocol is preferred, though lower versions …\nOnly the TLS 1.0 protocol is accepted.\nRequest but do not require a client certificate.\nNo protocol has been or should be negotiated or specified; …\nAdd the certificate the set of root certificates to trust …\nSpecifies the set of root certificates to trust when …\nSet a blacklist of disabled ciphers. Blacklisted ciphers …\nIf enabled, the handshake process will pause and return …\nIf enabled, the handshake process will pause and return …\nIf enabled, the handshake process will pause and return …\nReturns the number of bytes which can be read without …\nReturns <code>true</code> iff <code>break_on_cert_requested</code> was set and the …\nReturns the state of client certificate processing.\nShuts down the connection.\nReturns a shared reference to the <code>SslContext</code> of the stream.\nReturns a shared reference to the <code>SslContext</code> of the stream.\nReturns a mutable reference to the <code>SslContext</code> of the …\nReturns a mutable reference to the <code>SslContext</code> of the …\nSpecifies whether to trust invalid certificates.\nSpecifies whether to verify that the server’s hostname …\nReturns the list of ciphers that are eligible to be used …\nReturns the error which caused the handshake interruption.\nReturns the error which caused the handshake interruption.\nIf enabled, TLS false start will be performed if an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>ServerBuilder</code> which will use the identity …\nReturns a mutable reference to the underlying stream.\nReturns a mutable reference to the inner stream.\nReturns a mutable reference to the inner stream.\nReturns a shared reference to the inner stream.\nReturns a shared reference to the inner stream.\nReturns a shared reference to the inner stream.\nRestarts the handshake process.\nRestarts the handshake process.\nPerforms the SSL/TLS handshake.\nInitiates a new SSL/TLS session over a stream connected to …\nInitiates a new SSL/TLS session over a stream.\nUse the specified identity as a SSL/TLS client certificate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the cipher being used by the session.\nReturns the protocol version being used by the session.\nCreates a new <code>SslContext</code> for the specified side and type …\nCreates a new builder with default options.\nCreates a new <code>ServerBuilder</code> which will use the specified …\nCreate a SSL context for lower-level stream initialization.\nReturns the peer domain name set by <code>set_peer_domain_name</code>.\nReturns the peer ID of this session.\nReturns the <code>SecTrust</code> object corresponding to the peer.\nConfigure the minimum protocol that this client will …\nConfigure the minimum protocol that this client will …\nReturns the maximum protocol version allowed by the …\nReturns the minimum protocol version allowed by the …\nIf enabled, 1/n-1 record splitting will be enabled for TLS …\nReturns <code>true</code> iff <code>break_on_server_auth</code> was set and the …\nIf enabled, the handshake process will pause and return …\nIf enabled, the handshake process will pause and return …\nIf enabled, the handshake process will pause and return …\nSets the certificate to be used by this side of the SSL …\nSets the requirements for client certificates.\nSets the list of ciphers that are eligible to be used for …\nIf enabled, TLS false start will be performed if an …\nSets the fully qualified domain name of the peer.\nSets the peer ID of this session.\nSets whether a protocol is enabled or not.\nSets the maximum protocol version allowed by the session.\nSets the minimum protocol version allowed by the session.\nIf enabled, 1/n-1 record splitting will be enabled for TLS …\nReturns the state of the session.\nReturns the list of ciphers that are supported by Secure …\nSpecifies whether to trust the built-in certificates in …\nSpecifies whether to use Server Name Indication (SNI).\nSet a whitelist of enabled ciphers. Any ciphers not …\nReturns <code>true</code> iff the underlying stream returned an error …\nAllow expired certificates (except for the root …\nAllow expired root certificates.\nIndicates a denial by the user, do not proceed.\nIndicates a trust policy failure that the user cannot …\nAllow network downloads of CA certificates.\nTreat properly self-signed certificates as anchors …\nAn invalid setting or result.\nAllow CA certificates as leaf certificates.\nAn error not related to trust validation.\nYou may proceed.\nIndicates a trust policy failure that the user can …\nRequire a positive revocation check for each certificate.\nA type representing a trust evaluation for a certificate.\nThe option flags used to configure the evaluation of a …\nThe result of trust evaluation.\nThe certificate is implicitly trusted.\nUse TrustSettings instead of anchors.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns a specific certificate from the certificate chain …\nReturns the number of certificates in an evaluated …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nRetrieves the anchor (root) certificates stored by macOS\nReturns the public key for a leaf certificate after it has …\nCreates a <code>SecTrustRef</code> that is configured with a …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nEvaluates trust.\nEvaluates trust. Requires macOS 10.14 or iOS, otherwise it …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nIndicates whether this trust object is permitted to fetch …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets additional anchor certificates used to validate trust.\nSpecifies whether this trust object is permitted to fetch …\nSets option flags for customizing evaluation of a trust …\nSets the policy used to evaluate trust.\nIf set to <code>true</code>, only the certificates specified by …\nAttaches Online Certificate Status Protocol (OSCP) …\nSets the date and time against which the certificates in …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns true if the result is “successful” - …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nLocally administered, system-wide trust settings\nCert is explicitly distrusted.\nWhich set of trust settings to query\nNot used\nSystem trust settings\nThis is a non-root certificate but is explicitly trusted.\nThis is a root certificate and is trusted, either …\nAllows access to the certificates and their trust settings …\nTrust settings for a specific certificate in a specific …\nIterator over certificates.\nNeither trusted nor distrusted.\nPer-user trust settings\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an iterator over the certificates with settings in …\nCreate a new <code>TrustSettings</code> for the given domain.\nset trust settings to ““always trust this root …\nReturns the aggregate trust setting for the given …")