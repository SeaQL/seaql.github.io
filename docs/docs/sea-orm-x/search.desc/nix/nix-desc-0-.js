searchState.loadedDescShard("nix", 0, "Rust friendly bindings to the various *nix system …\nContains the error value\nNix’s main error type.\nCommon trait used to represent file system paths by many …\nContains the success value\nNix Result Type\nSafe wrappers around errno functions\nfile control options\nQuery network interface addresses\nIs the path empty?\nLength of the path in bytes\nFunctionality involving network interfaces\nMostly platform-specific functionality\nSafe wrappers around functions found in libc “unistd.h”…\nExecute a function with this path as a <code>CStr</code>.\nThe sentinel value indicates that a function failed and …\nSets the platform-specific errno to no-error\nReturns the platform-specific value of errno\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current value of errno\nReturns the current raw i32 value of errno\nReturns <code>Ok(value)</code> if it does not contain the sentinel …\nSets the value of errno.\nSets the raw i32 value of errno.\nDescribes a single address for an interface as returned by …\nHolds the results of <code>getifaddrs</code>.\nNetwork address of this interface\nBroadcast address of this interface, if applicable\nPoint-to-point destination address\nFlags as from <code>SIOCGIFFLAGS</code> ioctl\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet interface addresses using libc’s <code>getifaddrs</code>\nName of the network interface\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNetmask of this interface\nNetwork interface name resolution.\nReceive all multicast packets. (see <code>netdevice(7)</code>)\nUse alternate physical connection.\nValid broadcast address set. (see <code>netdevice(7)</code>)\nInternal debugging flag. (see <code>netdevice(7)</code>)\nPer link layer defined bit.\nPer link layer defined bit.\nPer link layer defined bit.\nInterface is a loopback interface. (see <code>netdevice(7)</code>)\nSupports multicast. (see <code>netdevice(7)</code>)\nNo arp protocol, L2 destination address not set. (see …\nAvoid use of trailers. (see <code>netdevice(7)</code>)\ntransmission in progress, tx hardware queue is full\nInterface is a point-to-point link. (see <code>netdevice(7)</code>)\nInterface is in promiscuous mode. (see <code>netdevice(7)</code>)\nResources allocated. (see <code>netdevice(7)</code>)\nCan’t hear own transmissions.\nInterface is running. (see <code>netdevice(7)</code>)\ntype alias for InterfaceFlags\nA network interface. Has a name like “eth0” or “…\nStandard interface flags, used by <code>getifaddrs</code>\nA list of the network interfaces available on this system. …\nAn iterator over the interfaces in an <code>Interfaces</code>.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nRetrieve a list of the network interfaces available on the …\nResolve an interface into a interface number.\nObtain the index of this interface.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nIterate over the interfaces in this list.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nObtain the name of this interface.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConvert this to a slice of interfaces. Note that the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nOperating system signals.\nSocket interface functions\nThese constants specify the protocol family to be used in …\nAppleTalk\nFurther receptions and transmissions will be disallowed.\nCCITT protocols, X.25 etc\nMIT CHAOS protocols\nComputer Network Technology\nconnection-oriented IP, aka ST II\nSupports datagrams (connectionless, unreliable messages of …\nBell Labs virtual circuit switch ?\nDECet protocol sockets.\nDEC Direct data link interface\nRepresents a socket option that can be retrieved.\nNSC Hyperchannel\nICMP protocol (icmp(7))\nICMPv6 protocol (ICMP over IPv6)\nARPANet IMP addresses\nIPv4 Internet protocols (see <code>ip(7)</code>)\nIPv6 Internet protocols (see <code>ipv6(7)</code>)\nRequest for multicast socket operations\nRequest for ipv6 multicast socket operations\nIPX - Novell protocols\nNew “modular ISDN” driver interface protocol\nAllows applications to configure and control a KEXT (ref)\nAllows applications and other KEXTs to be notified when …\nLink layer interface\nHardware Address\nSets the listen queue size to system <code>SOMAXCONN</code> value\nReceive flags: Control Data was discarded (buffer too …\nEnables nonblocking operation; if the operation would …\nTerminates a record (when this notion is supported, as for …\nSends or requests out-of-band data on sockets that support …\nPeeks at an incoming message. The data is treated as …\nFor raw (<code>Packet</code>), Internet datagram (since Linux …\nReceive operation blocks until the full amount of data can …\nFlags for send/recv and their relatives\nNative ATM access\nNovell and Xerox protocol\nPUP protocols, e.g. BSP\nProvides raw network protocol access.\nRaw sockets (raw(7))\nProvides a reliable datagram layer that does not guarantee …\nFurther receptions will be disallowed.\nKernel interface for interacting with the routing table\nProvides a sequenced, reliable, two-way connection- based …\nRepresents a socket option that can be set.\nIBM SNA\nAdditional socket options\nConstants used in <code>socket</code> and <code>socketpair</code> to specify the …\nThese constants are used to specify the communication …\nAn IPv4 socket address\nAn IPv6 socket address\nAnything that, in C, can be cast back and forth to <code>sockaddr</code>…\nA container for any sockaddr type\nProvides sequenced, reliable, two-way, connection- based …\nKEXT Controls and Notifications\nTCP protocol (ip(7))\nUDP protocol (ip(7))\nLocal communication (see <code>unix(7)</code>)\nA wrapper around <code>sockaddr_un</code>.\nVMWare VSockets protocol for hypervisor-guest interaction.\nSocket address for VMWare VSockets protocol\nFurther  transmissions will be disallowed.\nReturn type of <code>LocalPeerCred</code>\nAccept a connection on a socket\nPhysical-layer address (MAC)\nlink level address length\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nReturns a mutable pointer to the raw <code>sockaddr_un</code> struct\nReturns a raw pointer to the inner structure.  Useful for …\nReturns a raw pointer to the inner structure.  Useful for …\nReturns a pointer to the raw <code>sockaddr_un</code> struct\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nSafely and falliably downcast to a mutable reference\nDowncast to an immutable <code>[UnixAddr]</code> reference.\nDowncast to a mutable <code>[UnixAddr]</code> reference.\nSafely and falliably downcast to an immutable reference\nSafely and falliably downcast to a mutable reference\nBind a name to a socket\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nContext Identifier (CID)\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nInitiate a connection on a socket\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nDatalink type\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturn the address family of this socket\nReturn the address family of this socket\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreate a new <code>AddressFamily</code> from an integer value retrieved …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nUnsafe constructor from a variable length source\nLook up the value of this socket option on the given …\nGet the address of the peer connected to the socket <code>fd</code>.\nGet the current address to which the socket <code>fd</code> is bound.\nGet the current value for the requested socket option\nReturns a list of group identifiers (the first one being …\ninterface index, if != 0, system given index for interface\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nif link level address length == 0, or <code>sdl_data</code> not be …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nReturn the length of valid data in the sockaddr structure.\nReturn the length of valid data in the sockaddr structure.\nListen for connections on a socket\nCreate a new sockaddr_un representing a filesystem path.\nConstruct a <code>VsockAddr</code> from its raw fields.\nInstantiate a new <code>IpMembershipRequest</code>\nInstantiate a new <code>Ipv6MembershipRequest</code>\nCreate a <code>Backlog</code>, an <code>EINVAL</code> will be returned if <code>val</code> is …\nCreates a new socket address from IPv4 octets and a port …\nMAC address start position\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nIf this address represents a filesystem path, return that …\nReturns the addrlen of this socket - …\nPort number\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReceive data from a connection-oriented socket. Returns …\nReceive data from a connectionless or connection-oriented …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the scope ID associated with this address.\nSend data to a connection-oriented socket. Returns the …\nSend a message to a socket\nSet the value of this socket option on the given socket.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value for the requested socket option\nShut down part of a full-duplex connection.\nReturn the available space in the structure\nReturn the available space in the structure\nlink layer selector length\nCreate an endpoint for communication\nCreate a pair of connected sockets\nSocket options as used by <code>setsockopt</code> and <code>getsockopt</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nEffective user ID\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nStructure layout version\nReturns a value indicating whether or not this socket has …\nSet or get the broadcast flag.\nSet or get the don’t route flag.\nJoin a multicast group\nSet “don’t fragment packet” flag on the IP packet.\nLeave a multicast group.\nSet or read a boolean integer argument that determines …\nSet or read the time-to-live value of outgoing multicast …\nPass an <code>IP_PKTINFO</code> ancillary message that contains a …\nThe <code>recvmsg(2)</code> call will return the destination IP address …\nThe <code>recvmsg(2)</code> call returns a <code>struct sockaddr_dl</code> …\nJoin an IPv6 multicast group.\nSet “don’t fragment packet” flag on the IPv6 packet.\nLeave an IPv6 multicast group.\nSet or read the hop limit value of outgoing IPv6 multicast …\nSet delivery of the <code>IPV6_PKTINFO</code> control message on …\nThe socket is restricted to sending and receiving IPv6 …\nEnable sending of keep-alive messages on …\nWhen enabled,  a close(2) or shutdown(2) will not return …\nGet the credentials of the peer process of a connected …\nGet the PID of the peer process of a connected unix domain …\nIf this option is enabled, out-of-band data is directly …\nSets or gets the maximum socket receive buffer in bytes.\nSpecify the receiving timeout until reporting an error.\nEnable or disable the receiving of the <code>SO_TIMESTAMP</code> …\nEnables local address reuse\nPermits multiple AF_INET or AF_INET6 sockets to be bound …\nSpecify the sending timeout until reporting an error.\nSets or gets the maximum socket send buffer in bytes.\nGets the socket type as an integer.\nGet and clear the pending socket error.\nSpecify the amount of time, in seconds, that the …\nThe maximum number of keepalive probes TCP should send …\nThe time (in seconds) between individual keepalive probes.\nThe maximum segment size for outgoing TCP packets.\nUnder most circumstances, TCP sends data when it is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the timestamp to <code>Now</code>\nLeave the timestamp unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes a new <code>TimeSpec</code> with given number of microseconds.\nMakes a new <code>TimeVal</code> with given number of microseconds.\nMakes a new <code>TimeSpec</code> with given number of nanoseconds.\nMakes a new <code>TimeVal</code> with given number of nanoseconds.  …\nConstruct a new <code>TimeSpec</code> from its components\nConstruct a new <code>TimeVal</code> from its components\nClose a raw file descriptor\nCreate an interprocess channel.\nRead from a raw file descriptor.\nSuspend execution for an interval of time\nWrite to a raw file descriptor.")