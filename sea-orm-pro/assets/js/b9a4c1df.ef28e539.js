"use strict";(self.webpackChunksea_orm_pro=self.webpackChunksea_orm_pro||[]).push([[789],{300:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-04-raw-tables-posts-b58b15f52a755c37c00f12ad6d8efeb5.png"},2442:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-01-login-7c10499634d9238c31275e2cc2c7734c.png"},5617:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-06-composite-tables-c5f3011c12a5b5437020eba6aca2dd7f.png"},6059:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(2374);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},7186:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-02-dashboard-f54fb05ffa30e9944a082f4d6412a9a3.png"},7279:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"install-and-config/getting-started-axum","title":"Getting Started with Axum","description":"We use the axumexample example as the base, it contains basic REST API to handle basic user management such as user login and user info of current session. Final source code is here.","source":"@site/docs/02-install-and-config/02-getting-started-axum.md","sourceDirName":"02-install-and-config","slug":"/install-and-config/getting-started-axum","permalink":"/sea-orm-pro/docs/install-and-config/getting-started-axum","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/sea-orm-pro/docs/02-install-and-config/02-getting-started-axum.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1759504474000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/sea-orm-pro/docs/install-and-config/getting-started"},"next":{"title":"Live Demo","permalink":"/sea-orm-pro/docs/playground/live-demo"}}');var s=a(8790),r=a(6059);const i={},o="Getting Started with Axum",l={},d=[{value:"1. Setup Admin Endpoint",id:"1-setup-admin-endpoint",level:2},{value:"1.1 Download frontend assets",id:"11-download-frontend-assets",level:3},{value:"1.2 Serve frontend via <code>static</code> middleware",id:"12-serve-frontend-via-static-middleware",level:3},{value:"1.3 Setup admin API endpoint",id:"13-setup-admin-api-endpoint",level:3},{value:"2. Setup GraphQL Endpoint",id:"2-setup-graphql-endpoint",level:2},{value:"2.1 Define GraphQL schema",id:"21-define-graphql-schema",level:3},{value:"2.2 Setup GraphQL playground and query root",id:"22-setup-graphql-playground-and-query-root",level:3},{value:"3. Launch!",id:"3-launch",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started-with-axum",children:"Getting Started with Axum"})}),"\n",(0,s.jsxs)(n.p,{children:["We use the ",(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm/tree/master/axum_example",children:(0,s.jsx)(n.code,{children:"axum_example"})})," example as the base, it contains basic REST API to handle basic user management such as user login and user info of current session. Final source code is ",(0,s.jsx)(n.a,{href:"https://github.com/SeaQL/sea-orm-pro/tree/main/examples/axum_example",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"1-setup-admin-endpoint",children:"1. Setup Admin Endpoint"}),"\n",(0,s.jsx)(n.p,{children:"We will extends the SeaORM entities in the example to define a GraphQL schema, handle GraphQL request and serve SeaORM Pro admin panel."}),"\n",(0,s.jsx)(n.h3,{id:"11-download-frontend-assets",children:"1.1 Download frontend assets"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'# Go to the api crate of `axum_example` example\ncd sea-orm/axum_example\n\n# Create a directory for the static assets\nmkdir assets\n\n# Use the `download_frontend.sh` to download SeaORM Pro admin panel to `assets/admin` directory\ncurl "https://raw.githubusercontent.com/SeaQL/sea-orm-pro/refs/heads/main/build_tools/download_frontend.sh" -sSf | sh\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"12-serve-frontend-via-static-middleware",children:["1.2 Serve frontend via ",(0,s.jsx)(n.code,{children:"static"})," middleware"]}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"lib.rs"})," of api crate, add ",(0,s.jsx)(n.code,{children:"static"})," middlewares. The admin panel frontend is located in ",(0,s.jsx)(n.code,{children:"/assets/admin"})," and we want to serve it under ",(0,s.jsx)(n.code,{children:"http://localhost:8000/admin"}),", so we set the path as ",(0,s.jsx)(n.code,{children:"/assets/admin"}),". Also, the admin panel frontend is a single page application, so we set a fallback route to the index file, ",(0,s.jsx)(n.code,{children:"/assets/admin/index.html"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'{6-18} title="axum_example/api/src/lib.rs"',children:'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n        .nest_service(\n            "/admin",\n            get_service(\n                ServeDir::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/../assets/admin"\n                ))\n                .fallback(ServeFile::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/../assets/admin/index.html"\n                )))\n            )\n        );\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"13-setup-admin-api-endpoint",children:"1.3 Setup admin API endpoint"}),"\n",(0,s.jsxs)(n.p,{children:["The admin panel frontend is customizable and it read the configuration from the ",(0,s.jsx)(n.code,{children:"api/admin/config"})," endpoint."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/lib.rs"',children:'async fn admin_panel_config() -> Result<Json<JsonCfg>, (StatusCode, &\'static str)> {\n    let config = ConfigParser::new()\n        .load_config("pro_admin")\n        .expect("Invalid TOML Config");\n    Ok(Json(config))\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use the admin controller and register the ",(0,s.jsx)(n.code,{children:"/api/admin"})," route."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'{4} title="axum_example/api/src/lib.rs"',children:'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n        .route("/api/admin/config", get(admin_panel_config))\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n        .nest_service(..);\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"2-setup-graphql-endpoint",children:"2. Setup GraphQL Endpoint"}),"\n",(0,s.jsx)(n.h3,{id:"21-define-graphql-schema",children:"2.1 Define GraphQL schema"}),"\n",(0,s.jsx)(n.p,{children:"Add the dependencies for defining GraphQL schema."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'{2} title="axum_example/api/Cargo.toml"',children:'[dependencies]\nseaography = { version = "2.0.0-rc", features = ["field-snake-case"] }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["We need to define an ",(0,s.jsx)(n.code,{children:"RelatedEntity"})," enum for each of the SeaORM entity to help ",(0,s.jsx)(n.code,{children:"seaography"})," figure out the parent-child relation between entities."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'{20,21} title="axum_example/entity/src/post.rs"',children:'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "posts")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(skip_deserializing)]\n    pub id: i32,\n    pub title: String,\n    #[sea_orm(column_type = "Text")]\n    pub text: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\npub enum RelatedEntity {}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"seaography::register_entity_modules!"})," macros to define ",(0,s.jsx)(n.code,{children:"register_entity_modules"})," boilerplate function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/graphql/query_root.rs"',children:"seaography::register_entity_modules!([posts]);\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/graphql/query_root.rs"',children:"use async_graphql::dynamic::*;\nuse axum_example_service::sea_orm;\nuse axum_example_service::sea_orm::DatabaseConnection;\nuse entity::post;\nuse seaography::{Builder, BuilderContext, lazy_static, async_graphql};\n\nseaography::register_entity_modules!([post]);\n\nlazy_static::lazy_static! {\n    static ref CONTEXT: BuilderContext = BuilderContext::default();\n}\n\npub fn schema(\n    database: DatabaseConnection,\n    depth: Option<usize>,\n    complexity: Option<usize>,\n) -> Result<Schema, SchemaError> {\n    // Construct GraphQL schema\n    let builder = Builder::new(&CONTEXT, database.clone());\n    let builder = register_entity_modules(builder);\n    builder\n        // Maximum depth of the constructed query\n        .set_depth_limit(depth)\n        // Maximum complexity of the constructed query\n        .set_complexity_limit(complexity)\n        .schema_builder()\n        // GraphQL schema with database connection\n        .data(database)\n        .finish()\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Use the GraphQL schema module."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/graphql/mod.rs"',children:"pub mod query_root;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/lib.rs"',children:"mod graphql;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"22-setup-graphql-playground-and-query-root",children:"2.2 Setup GraphQL playground and query root"}),"\n",(0,s.jsx)(n.p,{children:"Add dependencies for serving GraphQL playground and handling GraphQL request."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",metastring:'{2} title="axum_example/api/Cargo.toml"',children:'[dependencies]\nasync-graphql-axum = { version = "7.0" }\nseaography = { version = "2.0.0-rc", features = ["field-snake-case"] }\n'})}),"\n",(0,s.jsx)(n.p,{children:"The GraphQL controller."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'title="axum_example/api/src/lib.rs"',children:'async fn graphql_playground() -> impl IntoResponse {\n    // Setup GraphQL playground web and specify the endpoint for GraphQL resolver\n    let config = GraphQLPlaygroundConfig::new("/api/graphql").with_header("Authorization", "");\n\n    let res = playground_source(config).replace(\n        r#""Authorization":"""#,\n        r#""Authorization":`Bearer ${localStorage.getItem(\'auth_token\')}`"#,\n    );\n\n    Html(res)\n}\n\nasync fn graphql_handler(\n    state: State<AppState>,\n    headers: HeaderMap,\n    req: GraphQLRequest,\n) -> Result<GraphQLResponse, (StatusCode, &\'static str)> {\n    check_user_auth(&headers)?;\n    // Maximum depth of the constructed query\n    const DEPTH: Option<usize> = None;\n    // Maximum complexity of the constructed query\n    const COMPLEXITY: Option<usize> = None;\n    // GraphQL schema\n    let schema = graphql::query_root::schema(state.conn.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let res = schema.execute(req.into_inner()).await.into();\n    Ok(res)\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use the GraphQL controller and register the ",(0,s.jsx)(n.code,{children:"/api/graphql"})," route."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",metastring:'{7,8} title="axum_example/api/src/lib.rs"',children:'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n        .route("/api/admin/config", get(admin_panel_config))\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n        .route("/api/graphql", get(graphql_playground))\n        .route("/api/graphql", post(graphql_handler))\n        .nest_service(..);\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"3-launch",children:"3. Launch!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:'$ cargo run\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.44s\n     Running `target/debug/sea-orm-axum-example`\n2025-01-08T08:08:00.048868Z DEBUG sea_orm::database::transaction: CREATE TABLE IF NOT EXISTS "seaql_migrations" ( "version" varchar NOT NULL PRIMARY KEY, "applied_at" bigint NOT NULL )\n2025-01-08T08:08:00.050610Z  INFO sqlx::postgres::notice: relation "seaql_migrations" already exists, skipping\n2025-01-08T08:08:00.052499Z  INFO sqlx::query: summary="CREATE TABLE IF NOT \u2026" db.statement="\\n\\nCREATE TABLE IF NOT EXISTS \\"seaql_migrations\\" (\\n  \\"version\\" varchar NOT NULL PRIMARY KEY,\\n  \\"applied_at\\" bigint NOT NULL\\n)\\n" rows_affected=0 rows_returned=0 elapsed=1.731155ms elapsed_secs=0.001731155\n2025-01-08T08:08:00.052619Z  INFO sea_orm_migration::migrator: Applying all pending migrations\n2025-01-08T08:08:00.062417Z  INFO sea_orm_migration::migrator: No pending migrations\n2025-01-08T08:08:00.062963Z  INFO sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=495.319\xb5s elapsed_secs=0.000495319\n2025-01-08T08:08:00.063398Z DEBUG globset: glob converted to regex: Glob { glob: "**/*", re: "(?-u)^(?:/?|.*/)[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true, empty_alternates: false }, tokens: Tokens([RecursivePrefix, ZeroOrMore]) }\n2025-01-08T08:08:00.063439Z DEBUG globset: built glob set; 0 literals, 0 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 1 regexes\n\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Visit ",(0,s.jsx)(n.a,{href:"http://localhost:8000/admin",children:"http://localhost:8000/admin"})," and login with your registered user."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Username: demo@sea-ql.org\nPassword: demo@sea-ql.org\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(2442).A+""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(7186).A+""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(9363).A+""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(300).A+""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(8994).A+""})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(5617).A+""})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8994:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-05-raw-tables-posts-details-60782979a0a2448b4da5551dfef8e178.png"},9363:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/getting-started-axum-03-raw-tables-13e3a07390c27dd02f167bed8f9bae0c.png"}}]);