"use strict";(self.webpackChunksea_orm_pro=self.webpackChunksea_orm_pro||[]).push([[850],{5942:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,g=u["".concat(o,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(1308),r=(n(6687),n(5942));const i={},s="Getting Started with Axum",l={unversionedId:"install-and-config/getting-started-axum",id:"install-and-config/getting-started-axum",title:"Getting Started with Axum",description:"We use the axumexample example as the base, it contains basic REST API to handle basic user management such as user login and user info of current session.",source:"@site/docs/02-install-and-config/02-getting-started-axum.md",sourceDirName:"02-install-and-config",slug:"/install-and-config/getting-started-axum",permalink:"/sea-orm-pro/docs/install-and-config/getting-started-axum",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/sea-orm-pro/docs/02-install-and-config/02-getting-started-axum.md",tags:[],version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1736325038,formattedLastUpdatedAt:"Jan 8, 2025",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting Started with Loco",permalink:"/sea-orm-pro/docs/install-and-config/getting-started-loco"},next:{title:"Theme",permalink:"/sea-orm-pro/docs/site-config/theme"}},o={},p=[{value:"1. Setup Admin Endpoint",id:"1-setup-admin-endpoint",level:2},{value:"1.1 Download frontend assets",id:"11-download-frontend-assets",level:3},{value:"1.2 Serve frontend via <code>static</code> middleware",id:"12-serve-frontend-via-static-middleware",level:3},{value:"1.3 Setup admin API endpoint",id:"13-setup-admin-api-endpoint",level:3},{value:"2. Setup GraphQL Endpoint",id:"2-setup-graphql-endpoint",level:2},{value:"2.1 Define GraphQL schema",id:"21-define-graphql-schema",level:3},{value:"2.2 Setup GraphQL playground and query root",id:"22-setup-graphql-playground-and-query-root",level:3},{value:"3. Launch!",id:"3-launch",level:2}],d={toc:p};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started-with-axum"},"Getting Started with Axum"),(0,r.kt)("p",null,"We use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/tree/master/examples/axum_example"},(0,r.kt)("inlineCode",{parentName:"a"},"axum_example"))," example as the base, it contains basic REST API to handle basic user management such as user login and user info of current session."),(0,r.kt)("h2",{id:"1-setup-admin-endpoint"},"1. Setup Admin Endpoint"),(0,r.kt)("p",null,"We will extends the SeaORM entities in the example to define a GraphQL schema, handle GraphQL request and serve SeaORM Pro admin panel."),(0,r.kt)("h3",{id:"11-download-frontend-assets"},"1.1 Download frontend assets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# Go to the api crate of `axum_example` example\ncd sea-orm/examples/axum_example/api\n\n# Create a directory for the static assets\nmkdir assets\n\n# Use the `download_frontend.sh` to download SeaORM Pro admin panel to `assets/admin` directory\ncurl "https://raw.githubusercontent.com/SeaQL/sea-orm-pro/refs/heads/main/build_tools/download_frontend.sh" -sSf | sh\n')),(0,r.kt)("h3",{id:"12-serve-frontend-via-static-middleware"},"1.2 Serve frontend via ",(0,r.kt)("inlineCode",{parentName:"h3"},"static")," middleware"),(0,r.kt)("p",null,"Open the ",(0,r.kt)("inlineCode",{parentName:"p"},"lib.rs")," of api crate, add ",(0,r.kt)("inlineCode",{parentName:"p"},"static")," middlewares. The admin panel frontend is located in ",(0,r.kt)("inlineCode",{parentName:"p"},"/assets/admin")," and we want to serve it under ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/admin"),", so we set the path as ",(0,r.kt)("inlineCode",{parentName:"p"},"/assets/admin"),". Also, the admin panel frontend is a single page application, so we set a fallback route to the index file, ",(0,r.kt)("inlineCode",{parentName:"p"},"/assets/admin/index.html"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/src/lib.rs",title:"examples/axum_example/api/src/lib.rs"},'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n+       .nest_service(\n+           "/admin",\n+           get_service(\n+               ServeDir::new(concat!(\n+                   env!("CARGO_MANIFEST_DIR"),\n+                   "/assets/admin"\n+               ))\n+               .fallback(ServeFile::new(concat!(\n+                   env!("CARGO_MANIFEST_DIR"),\n+                   "/assets/admin/index.html"\n+               )))\n+           )\n+       );\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n')),(0,r.kt)("h3",{id:"13-setup-admin-api-endpoint"},"1.3 Setup admin API endpoint"),(0,r.kt)("p",null,"The admin panel frontend is customizable and it read the configuration from the ",(0,r.kt)("inlineCode",{parentName:"p"},"api/admin/config")," endpoint."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/axum_example/api/src/lib.rs",title:"examples/axum_example/api/src/lib.rs"},'async fn admin_panel_config(_state: State<AppState>) -> Result<Json<serde_json::Value>, (StatusCode, &\'static str)> {\n    Ok(Json(serde_json::json!({\n        "site": {\n            "theme": {\n                "title": "SeaORM Pro FREE",\n                "logo": "/admin/favicon.ico",\n                "login_banner": "/admin/logo.png",\n            }\n        },\n        "raw_tables": {},\n        "composite_tables": {},\n    })))\n}\n')),(0,r.kt)("p",null,"Use the admin controller and register the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/admin")," route."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/src/lib.rs",title:"examples/axum_example/api/src/lib.rs"},'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n+       .route("/api/admin/config", get(admin_panel_config))\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n        .nest_service(\n            "/admin",\n            get_service(\n                ServeDir::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/assets/admin"\n                ))\n                .fallback(ServeFile::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/assets/admin/index.html"\n                )))\n            )\n        );\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n')),(0,r.kt)("h2",{id:"2-setup-graphql-endpoint"},"2. Setup GraphQL Endpoint"),(0,r.kt)("h3",{id:"21-define-graphql-schema"},"2.1 Define GraphQL schema"),(0,r.kt)("p",null,"Add the dependencies for defining GraphQL schema: ",(0,r.kt)("inlineCode",{parentName:"p"},"async-graphql"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"seaography")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lazy_static"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/Cargo.toml",title:"examples/axum_example/api/Cargo.toml"},'[dependencies]\n+ async-graphql = { version = "7.0", features = ["decimal", "chrono", "dataloader", "dynamic-schema"] }\n+ seaography = { version = "1.1.0", features = ["with-decimal", "with-chrono", "with-uuid", "field-snake-case"] }\n+ lazy_static = { version = "1.4" }\n')),(0,r.kt)("p",null,"We need to define an ",(0,r.kt)("inlineCode",{parentName:"p"},"RelatedEntity")," enum for each of the SeaORM entity to help ",(0,r.kt)("inlineCode",{parentName:"p"},"seaography")," figure out the parent-child relation between entities."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/entity/src/post.rs",title:"examples/axum_example/entity/src/post.rs"},'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "posts")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(skip_deserializing)]\n    pub id: i32,\n    pub title: String,\n    #[sea_orm(column_type = "Text")]\n    pub text: String,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n+ #[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]\n+ pub enum RelatedEntity {}\n')),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"seaography::register_entity_modules!")," macros to define ",(0,r.kt)("inlineCode",{parentName:"p"},"register_entity_modules")," boilerplate function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/src/graphql/query_root.rs",title:"examples/axum_example/api/src/graphql/query_root.rs"},"+ seaography::register_entity_modules!([posts]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/axum_example/api/src/graphql/query_root.rs",title:"examples/axum_example/api/src/graphql/query_root.rs"},"use async_graphql::dynamic::*;\nuse axum_example_service::sea_orm;\nuse axum_example_service::sea_orm::DatabaseConnection;\nuse seaography::{Builder, BuilderContext};\n\nlazy_static::lazy_static! {\n    static ref CONTEXT: BuilderContext = BuilderContext::default();\n}\n\npub fn schema(\n    database: DatabaseConnection,\n    depth: Option<usize>,\n    complexity: Option<usize>,\n) -> Result<Schema, SchemaError> {\n    // Construct GraphQL schema\n    let builder = Builder::new(&CONTEXT, database.clone());\n    let builder = register_entity_modules(builder);\n    let schema = builder.schema_builder();\n    // Maximum depth of the constructed query\n    let schema = if let Some(depth) = depth {\n        schema.limit_depth(depth)\n    } else {\n        schema\n    };\n    // Maximum complexity of the constructed query\n    let schema = if let Some(complexity) = complexity {\n        schema.limit_complexity(complexity)\n    } else {\n        schema\n    };\n    // GraphQL schema with database connection\n    schema.data(database).finish()\n}\n")),(0,r.kt)("p",null,"Use the GraphQL schema module."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/axum_example/api/src/graphql/mod.rs",title:"examples/axum_example/api/src/graphql/mod.rs"},"pub mod query_root;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/src/lib.rs",title:"examples/axum_example/api/src/lib.rs"},"+ mod graphql;\n")),(0,r.kt)("h3",{id:"22-setup-graphql-playground-and-query-root"},"2.2 Setup GraphQL playground and query root"),(0,r.kt)("p",null,"Add dependencies for serving GraphQL playground and handling GraphQL request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=",title:""},'[dependencies]\nasync-graphql = { version = "7.0", features = ["decimal", "chrono", "dataloader", "dynamic-schema"] }\n+ async-graphql-axum = { version = "7.0" }\nseaography = { version = "1.1.0", features = ["with-decimal", "with-chrono", "with-uuid", "field-snake-case"] }\nlazy_static = { version = "1.4" }\n')),(0,r.kt)("p",null,"The GraphQL controller."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=examples/axum_example/api/Cargo.toml",title:"examples/axum_example/api/Cargo.toml"},'async fn graphql_playground() -> impl IntoResponse {\n    // Setup GraphQL playground web and specify the endpoint for GraphQL resolver\n    let res = playground_source(GraphQLPlaygroundConfig::new("/api/graphql"));\n\n    Html(res)\n}\n\nasync fn graphql_handler(\n    state: State<AppState>,\n    headers: HeaderMap,\n    req: GraphQLRequest,\n) -> Result<GraphQLResponse, (StatusCode, &\'static str)> {\n    check_user_auth(&headers)?;\n    // Maximum depth of the constructed query\n    const DEPTH: Option<usize> = None;\n    // Maximum complexity of the constructed query\n    const COMPLEXITY: Option<usize> = None;\n    // GraphQL schema\n    let schema = graphql::query_root::schema(state.conn.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let res = schema.execute(req.into_inner()).await.into();\n    Ok(res)\n}\n')),(0,r.kt)("p",null,"Use the GraphQL controller and register the ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/graphql")," route."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:"title=examples/axum_example/api/src/lib.rs",title:"examples/axum_example/api/src/lib.rs"},'#[tokio::main]\nasync fn start() -> anyhow::Result<()> {\n    let app = Router::new()\n        .route("/api/admin/config", get(admin_panel_config))\n        .route("/api/auth/login", post(user_login))\n        .route("/api/user/current", get(current_user))\n+       .route("/api/graphql", get(graphql_playground))\n+       .route("/api/graphql", post(graphql_handler))\n        .nest_service(\n            "/admin",\n            get_service(\n                ServeDir::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/assets/admin"\n                ))\n                .fallback(ServeFile::new(concat!(\n                    env!("CARGO_MANIFEST_DIR"),\n                    "/assets/admin/index.html"\n                )))\n            )\n        );\n\n    let listener = tokio::net::TcpListener::bind(&server_url).await.unwrap();\n    axum::serve(listener, app).await?;\n\n    Ok(())\n}\n')),(0,r.kt)("h2",{id:"3-launch"},"3. Launch!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'$ cargo run\n\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.44s\n     Running `target/debug/sea-orm-axum-example`\n2025-01-08T08:08:00.048868Z DEBUG sea_orm::database::transaction: CREATE TABLE IF NOT EXISTS "seaql_migrations" ( "version" varchar NOT NULL PRIMARY KEY, "applied_at" bigint NOT NULL )\n2025-01-08T08:08:00.050610Z  INFO sqlx::postgres::notice: relation "seaql_migrations" already exists, skipping\n2025-01-08T08:08:00.052499Z  INFO sqlx::query: summary="CREATE TABLE IF NOT \u2026" db.statement="\\n\\nCREATE TABLE IF NOT EXISTS \\"seaql_migrations\\" (\\n  \\"version\\" varchar NOT NULL PRIMARY KEY,\\n  \\"applied_at\\" bigint NOT NULL\\n)\\n" rows_affected=0 rows_returned=0 elapsed=1.731155ms elapsed_secs=0.001731155\n2025-01-08T08:08:00.052619Z  INFO sea_orm_migration::migrator: Applying all pending migrations\n2025-01-08T08:08:00.062417Z  INFO sea_orm_migration::migrator: No pending migrations\n2025-01-08T08:08:00.062963Z  INFO sqlx::query: summary="COMMIT" db.statement="" rows_affected=0 rows_returned=0 elapsed=495.319\xb5s elapsed_secs=0.000495319\n2025-01-08T08:08:00.063398Z DEBUG globset: glob converted to regex: Glob { glob: "**/*", re: "(?-u)^(?:/?|.*/)[^/]*$", opts: GlobOptions { case_insensitive: false, literal_separator: true, backslash_escape: true, empty_alternates: false }, tokens: Tokens([RecursivePrefix, ZeroOrMore]) }\n2025-01-08T08:08:00.063439Z DEBUG globset: built glob set; 0 literals, 0 basenames, 0 extensions, 0 prefixes, 0 suffixes, 0 required extensions, 1 regexes\n\n')),(0,r.kt)("p",null,"Visit ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:8000/admin"},"http://localhost:8000/admin")," and login with your registered user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Username: demo@sea-ql.org\nPassword: demo@sea-ql.org\n")),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(6506).Z,width:"3808",height:"2414"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(503).Z,width:"3808",height:"2414"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(177).Z,width:"3808",height:"2414"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(6323).Z,width:"3808",height:"2414"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(4445).Z,width:"3808",height:"2414"})))}m.isMDXComponent=!0},6506:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/getting-started-axum-01-login-c83fb21cc44f80438ab665bbf8ab86e1.png"},503:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/getting-started-axum-02-raw-tables-c80b9ee526398fa35701a74e3d6075eb.png"},177:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/getting-started-axum-03-raw-tables-posts-438cefee95c22fc746cfe3d3e2dd3046.png"},6323:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/getting-started-axum-04-raw-tables-posts-details-b6518413d7962d1f137dbaea54678d7e.png"},4445:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/getting-started-axum-05-composite-tables-ad4fde03961ddd002860b7f7a96fe7a1.png"}}]);