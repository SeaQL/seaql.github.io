"use strict";(self.webpackChunksea_orm_pro=self.webpackChunksea_orm_pro||[]).push([[101],{5942:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var r=t(6687);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=i(t),h=a,g=d["".concat(s,".").concat(h)]||d[h]||c[h]||o;return t?r.createElement(g,l(l({ref:n},u),{},{components:t})):r.createElement(g,l({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,l[1]=p;for(var i=2;i<o;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var r=t(1308),a=(t(6687),t(5942));const o={},l="GraphQL Playground",p={unversionedId:"gui-development/graphql",id:"gui-development/graphql",title:"GraphQL Playground",description:"SeaORM Pro is free-to-use software. All backend source code is MIT Licensed, but the frontend source code is closed for the time being.",source:"@site/docs/07-gui-development/03-graphql.md",sourceDirName:"07-gui-development",slug:"/gui-development/graphql",permalink:"/sea-orm-pro/docs/gui-development/graphql",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/sea-orm-pro/docs/07-gui-development/03-graphql.md",tags:[],version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1739268937,formattedLastUpdatedAt:"Feb 11, 2025",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Development and Release",permalink:"/sea-orm-pro/docs/gui-development/dev-and-release"}},s={},i=[],u={toc:i};function c(e){let{components:n,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graphql-playground"},"GraphQL Playground"),(0,a.kt)("admonition",{title:"SeaORM Pro Plus",type:"tip"},(0,a.kt)("br",null),(0,a.kt)("p",{parentName:"admonition"},"SeaORM Pro is free-to-use software. All backend source code is MIT Licensed, but the frontend source code is closed for the time being."),(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm-pro-plus"},"SeaORM Pro Plus")," provides additional features and access to the frontend source code.")),(0,a.kt)("p",null,"GraphQL playground and handler is defined in the GraphQL controller:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust",metastring:"title=src/controllers/graphql.rs",title:"src/controllers/graphql.rs"},'use async_graphql::http::{playground_source, GraphQLPlaygroundConfig};\nuse axum::{body::Body, extract::Request};\nuse loco_rs::prelude::*;\nuse seaography::async_graphql;\nuse tower_service::Service;\n\nuse crate::graphql::query_root;\n\nasync fn graphql_playground() -> Result<Response> {\n    // Setup GraphQL playground web and specify the endpoint for GraphQL resolver\n    let config =\n        GraphQLPlaygroundConfig::new("/api/graphql").with_header("Authorization", "AUTO_TOKEN");\n\n    let res = playground_source(config).replace(\n        r#""Authorization":"AUTO_TOKEN""#,\n        r#""Authorization":`Bearer ${localStorage.getItem(\'auth_token\')}`"#,\n    );\n\n    Ok(Response::new(res.into()))\n}\n\nasync fn graphql_handler(\n    _auth: auth::JWT,\n    State(ctx): State<AppContext>,\n    req: Request<Body>,\n) -> Result<Response> {\n    // Maximum depth of the constructed query\n    const DEPTH: Option<usize> = None;\n    // Maximum complexity of the constructed query\n    const COMPLEXITY: Option<usize> = None;\n    // GraphQL schema\n    let schema = query_root::schema(ctx.db.clone(), DEPTH, COMPLEXITY).unwrap();\n    // GraphQL handler\n    let mut graphql_handler = async_graphql_axum::GraphQL::new(schema);\n    let res = graphql_handler.call(req).await.unwrap();\n\n    Ok(res)\n}\n\npub fn routes() -> Routes {\n    Routes::new()\n        // GraphQL route prefix\n        .prefix("graphql")\n        // Serving the GraphQL playground web\n        .add("/", get(graphql_playground))\n        // Handling GraphQL request\n        .add("/", post(graphql_handler))\n}\n')),(0,a.kt)("p",null,"After login, visit the GraphQL playground by clicking GraphQL icon on the top-right corner."),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(7918).Z,width:"2809",height:"1585"})),(0,a.kt)("p",null,'You should see the "Bearer Token" has been applied automatically.'),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(608).Z,width:"3568",height:"2000"})),(0,a.kt)("p",null,"A sample query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  customer(\n    order_by: { customer_id: ASC }\n    pagination: { page: { limit: 10, page: 0 } }\n  ) {\n    nodes {\n      customer_id\n      title\n      first_name\n      middle_name\n      last_name\n    }\n    pagination_info {\n      current\n      pages\n      offset\n      total\n    }\n  }\n}\n")))}c.isMDXComponent=!0},7918:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GraphQL-playground-button-2b35b080440d8717a43e90436dda385f.png"},608:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/GraphQL-playground-7b2402a30f8837659723dcdd74a6aa51.png"}}]);