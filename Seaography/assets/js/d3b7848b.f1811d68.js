"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[799],{3656:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"graphql-schema/simple-query","title":"Simple Query","description":"Query All","source":"@site/docs/03-graphql-schema/02-simple-query.md","sourceDirName":"03-graphql-schema","slug":"/graphql-schema/simple-query","permalink":"/Seaography/docs/graphql-schema/simple-query","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/docs/03-graphql-schema/02-simple-query.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761003379000,"sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Types","permalink":"/Seaography/docs/graphql-schema/data-types"},"next":{"title":"Query Filters","permalink":"/Seaography/docs/graphql-schema/filters"}}');var i=r(8790),l=r(8032);const a={},d="Simple Query",t={},o=[{value:"Query All",id:"query-all",level:2},{value:"Query Single Item",id:"query-single-item",level:2},{value:"Order By",id:"order-by",level:2},{value:"Offset-based Pagination",id:"offset-based-pagination",level:2},{value:"Cursor-based Pagination",id:"cursor-based-pagination",level:2}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simple-query",children:"Simple Query"})}),"\n",(0,i.jsx)(n.h2,{id:"query-all",children:"Query All"}),"\n",(0,i.jsx)(n.p,{children:"The simplest query you can do, which by default return all rows in a table."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  film {\n    nodes {\n      filmId\n      title\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["You can apply a default and maximum pagination ",(0,i.jsx)(n.code,{children:"limit"})," using ",(0,i.jsx)(n.code,{children:"PaginationInputConfig"})," in ",(0,i.jsx)(n.code,{children:"BuilderContext"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"field-pluralize"})," is enabled, the endpoint is the plural form of the name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  films {\n    nodes {\n      filmId\n      title\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Both returns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "film": {\n    "nodes": [\n      {\n        "filmId": 1,\n        "title": "ACADEMY DINOAUR",\n        "releaseYear": 2006\n      },\n      ..\n    ],\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"query-single-item",children:"Query Single Item"}),"\n",(0,i.jsx)(n.p,{children:"You can query a single item by applying a filter with the id:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  film(filters: { filmId: { eq: 1 } }) {\n    nodes {\n      filmId\n      title\n      releaseYear\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The query result is same as before."}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"field-pluralize"})," is enabled, the endpoint is the singular form of the name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  film(id: 1) {\n    filmId\n    title\n    releaseYear\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And the query result is the model itself, so wouldn't be nested under ",(0,i.jsx)(n.code,{children:"nodes"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "film": {\n    "filmId": 1,\n    "title": "ACADEMY DINOSAUR",\n    "releaseYear": 2006\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"order-by",children:"Order By"}),"\n",(0,i.jsxs)(n.p,{children:["You can apply order by on any fields of the Model. By default, the type for ",(0,i.jsx)(n.code,{children:"Film"})," is ",(0,i.jsx)(n.code,{children:"FilmOrderInput"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"offset-based-pagination",children:"Offset-based Pagination"}),"\n",(0,i.jsxs)(n.p,{children:["Can switch page by the ",(0,i.jsx)(n.code,{children:"page"})," parameter. ",(0,i.jsx)(n.code,{children:"limit"})," specify the number of items per page."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  film(pagination: { page: { limit: 10, page: 0 } }, orderBy: { filmId: ASC }) {\n    nodes {\n      filmId\n      title\n      releaseYear\n    }\n    paginationInfo {\n      pages\n      current\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "film": {\n    "nodes": [\n      {\n        "filmId": 1,\n        "title": "ACADEMY DINOAUR",\n        "releaseYear": 2006\n      },\n      {\n        "filmId": 2,\n        "title": "ACE GOLDFINGER",\n        "releaseYear": 2006\n      },\n      ..\n    ],\n    "paginationInfo": {\n      "pages": 100,\n      "current": 0\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"cursor-based-pagination",children:"Cursor-based Pagination"}),"\n",(0,i.jsxs)(n.p,{children:["To use cursor-based pagination, the first query is issued with ",(0,i.jsx)(n.code,{children:"cursor"})," equals ",(0,i.jsx)(n.code,{children:"null"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"{\n  film(\n    pagination: { cursor: { limit: 3, cursor: null } }\n    orderBy: { filmId: ASC }\n  ) {\n    nodes {\n      filmId\n      title\n      releaseYear\n    }\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      endCursor\n    }\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here ",(0,i.jsx)(n.code,{children:"hasPreviousPage"})," is ",(0,i.jsx)(n.code,{children:"false"}),", meaning we're at the beginning. You then use the ",(0,i.jsx)(n.code,{children:"endCursor"})," value for the next query's ",(0,i.jsx)(n.code,{children:"cursor"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "film": {\n    "nodes": [\n      {\n        "filmId": 1,\n        "title": "ACADEMY DINOSAUR",\n        "releaseYear": 2006\n      },\n      {\n        "filmId": 2,\n        "title": "ACE GOLDFINGER",\n        "releaseYear": 2006\n      },\n      {\n        "filmId": 3,\n        "title": "ADAPTATION HOLES",\n        "releaseYear": 2006\n      }\n    ],\n    "pageInfo": {\n      "hasPreviousPage": false,\n      "hasNextPage": true,\n      "endCursor": "Int[1]:3"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'{\n  film(\n    pagination: { cursor: { limit: 3, cursor: "Int[1]:3" } }\n    orderBy: { filmId: ASC }\n  ) {\n    nodes {\n      filmId\n      title\n      releaseYear\n    }\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      endCursor\n    }\n  }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8032:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var s=r(2374);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);