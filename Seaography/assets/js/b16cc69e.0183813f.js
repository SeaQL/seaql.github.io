"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[40],{2650:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"graphql-schema/mutation","title":"Mutations","description":"Create","source":"@site/docs/03-graphql-schema/05-mutation.md","sourceDirName":"03-graphql-schema","slug":"/graphql-schema/mutation","permalink":"/Seaography/docs/graphql-schema/mutation","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/docs/03-graphql-schema/05-mutation.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761178810000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Relational Queries","permalink":"/Seaography/docs/graphql-schema/relational-query"},"next":{"title":"Project Structure","permalink":"/Seaography/docs/custom-endpoints/project-structure"}}');var i=t(8790),r=t(8032);const l={},s="Mutations",d={},c=[{value:"Create",id:"create",level:2},{value:"Create One",id:"create-one",level:3},{value:"Create Many",id:"create-many",level:3},{value:"Update",id:"update",level:2},{value:"Update Many",id:"update-many",level:3},{value:"Delete",id:"delete",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mutations",children:"Mutations"})}),"\n",(0,i.jsx)(n.h2,{id:"create",children:"Create"}),"\n",(0,i.jsx)(n.h3,{id:"create-one",children:"Create One"}),"\n",(0,i.jsx)(n.p,{children:"If the primary key is auto-increment, you don't have to provide the field in the input. You can get back the newly assigned id:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  actorCreateOne(\n    data: {\n      firstName: "Tom"\n      lastName: "Brown"\n      lastUpdate: "2030-01-01 12:24:36Z"\n    }\n  ) {\n    actorId\n    firstName\n    lastName\n    lastUpdate\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "actorCreateOne": {\n    "actorId": 201,\n    "firstName": "Tom",\n    "lastName": "Brown",\n    "lastUpdate": "2030-01-01 12:24:36 UTC"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"create-many",children:"Create Many"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"CreateBatch"})," endpoint to insert multiple items. The query will be executed inside a transaction:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  filmTextCreateBatch(\n    data: [\n      { filmId: 1, title: "TEST 1", description: "TEST DESC 1" }\n      { filmId: 2, title: "TEST 2", description: "TEST DESC 2" }\n    ]\n  ) {\n    filmId\n    title\n    description\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Result:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "filmTextCreateBatch": [\n    {\n      "filmId": 1,\n      "title": "TEST 1",\n      "description": "TEST DESC 1"\n    },\n    {\n      "filmId": 2,\n      "title": "TEST 2",\n      "description": "TEST DESC 2"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"update",children:"Update"}),"\n",(0,i.jsx)(n.p,{children:"You write an update query using filters:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  filmUpdate(\n    data: { title: "Best Film" }\n    filter: { filmId: { eq: 1 } }\n  ) {\n    filmId\n    title\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"The result contains all the updated items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "filmUpdate": [\n    {\n      "filmId": 1,\n      "title": "Best Film"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"update-many",children:"Update Many"}),"\n",(0,i.jsx)(n.p,{children:"You can use the same endpoint to update many items:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:'mutation {\n  filmUpdate(\n    data: { title: "Best Film" }\n    filter: { filmId: { is_in: [1, 2] } }\n  ) {\n    filmId\n    title\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"delete",children:"Delete"}),"\n",(0,i.jsxs)(n.p,{children:["Delete is very similar to update, but without ",(0,i.jsx)(n.code,{children:"data"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-graphql",children:"mutation {\n  actorDelete(filter: { actorId: { is_in: [201, 202] } })\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"It returns a scalar number indicating the number of rows deleted:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "actorDelete": 2\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8032:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var a=t(2374);const i={},r=a.createContext(i);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);