"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[961],{7244:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"data-loader","title":"DataLoader","description":"Seaography uses asyncgraphql::dataloader in querying nested objects to tackle the N+1 problem.","source":"@site/versioned_docs/version-0.2.x/06-data-loader.md","sourceDirName":".","slug":"/data-loader","permalink":"/Seaography/docs/0.2.x/data-loader","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/versioned_docs/version-0.2.x/06-data-loader.md","tags":[],"version":"0.2.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1759689170000,"sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Macros documentation","permalink":"/Seaography/docs/0.2.x/macros-documentation"}}');var r=t(8790),o=t(8032);const l={},i="DataLoader",s={},c=[];function d(e){const a={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"dataloader",children:"DataLoader"})}),"\n",(0,r.jsxs)(a.p,{children:["Seaography uses ",(0,r.jsx)(a.a,{href:"https://docs.rs/async-graphql/latest/async_graphql/dataloader/index.html",children:"async_graphql::dataloader"})," in querying nested objects to tackle the N+1 problem."]}),"\n",(0,r.jsx)(a.p,{children:"Consider the following GraphQL query:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-graphql",children:'{\n  film(\n    pagination: { pages: { limit: 3, page: 0 }}\n    filters: { releaseYear: { gte: "2006" } }\n    orderBy: { title: ASC }\n  ) {\n    nodes {\n      filmId\n      title\n      description\n      releaseYear\n      filmActor {\n        actor {\n          actorId\n          firstName\n          lastName\n        }\n      }\n    }\n    pages\n    current\n  }\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"Behind the scene, the following SQL were queried:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-sql",children:'SELECT "film"."film_id",\n       "film"."title",\n       "film"."description",\n       "film"."release_year",\n       "film"."language_id",\n       "film"."original_language_id",\n       "film"."rental_duration",\n       "film"."rental_rate",\n       "film"."length",\n       "film"."replacement_cost",\n       "film"."rating",\n       "film"."special_features",\n       "film"."last_update"\nFROM "film"\nWHERE "film"."release_year" >= \'2006\'\nORDER BY "film"."title" ASC\nLIMIT 3 OFFSET 0\n\nSELECT "film_actor"."actor_id", "film_actor"."film_id", "film_actor"."last_update"\nFROM "film_actor"\nWHERE "film_actor"."film_id" IN (1, 3, 2)\n\nSELECT "actor"."actor_id", "actor"."first_name", "actor"."last_name", "actor"."last_update"\nFROM "actor"\nWHERE "actor"."actor_id" IN (24, 162, 20, 160, 1, 188, 123, 30, 53, 40, 2, 64, 85, 198, 10, 19, 108, 90)\n'})}),"\n",(0,r.jsxs)(a.p,{children:["Take ",(0,r.jsx)(a.code,{children:"film_actor"})," as an example, we want to fetch ",(0,r.jsx)(a.code,{children:"film_actor"})," with ID ",(0,r.jsx)(a.code,{children:"(1, 3, 2)"})," from the database. We give the ID to ",(0,r.jsx)(a.code,{children:"DataLoader"}),", it has two purposes - it tells ",(0,r.jsx)(a.code,{children:"DataLoader"})," which rows to be fetched, and, as a unique ID to determine the caller and therefore the proper receiver of the query result."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-rust",children:"pub struct FilmActorFK(pub sea_orm::Value);\n\n// film::Model\nimpl Model {\n    pub async fn FilmActor<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n    ) -> Option<Vec<super::film_actor::Model>> {\n        let data_loader = ctx\n            .data::<async_graphql::dataloader::DataLoader<crate::OrmDataloader>>()\n            .unwrap();\n\n        let from_column: super::film::Column = // ...\n\n        let key = FilmActorFK(self.get(from_column));\n\n        let data: Option<_> = data_loader.load_one(key) // Batch querying with foreign keys\n            .await\n            .unwrap();\n\n        data\n    }\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Inside the ",(0,r.jsx)(a.code,{children:"DataLoader"}),", it will execute the select in batch. Then, return a hashmap with ID as the key. This allow us to associate the query result with the receiver thus return the corresponding result to the proper receiver."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-rust",children:"#[async_trait::async_trait]\nimpl async_graphql::dataloader::Loader<FilmActorFK> for crate::OrmDataloader {\n    type Value = Vec<super::film_actor::Model>;\n    type Error = std::sync::Arc<sea_orm::error::DbErr>;\n\n    async fn load(\n        &self,\n        keys: &[FilmActorFK],\n    ) -> Result<std::collections::HashMap<FilmActorFK, Self::Value>, Self::Error> {\n        let key_values: Vec<_> = keys\n            .into_iter()\n            .map(|key| key.0.to_owned())\n            .collect();\n\n        let to_column: super::film_actor::Column = // ...\n\n        let data: std::collections::HashMap<FilmActorFK, Self::Value> = super::film_actor::Entity::find()\n            .filter(to_column.is_in(key_values)) // Filter by a batch of foreign keys\n            .all(&self.db)\n            .await?\n            .into_iter()\n            .map(|model| {\n                let key = FilmActorFK(model.get(to_column));\n                (key, model) // Collect rows into a hashmap with foreign key as the key\n            })\n            .into_group_map();\n\n        Ok(data)\n    }\n}\n"})})]})}function m(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8032:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>i});var n=t(2374);const r={},o=n.createContext(r);function l(e){const a=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(o.Provider,{value:a},e.children)}}}]);