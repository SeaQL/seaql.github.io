"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[6159],{8032:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(2374);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},8535:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"macros-documentation","title":"Macros documentation","description":"Filter derive","source":"@site/versioned_docs/version-0.2.x/05-macros-documentation.md","sourceDirName":".","slug":"/macros-documentation","permalink":"/Seaography/docs/0.2.x/macros-documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/versioned_docs/version-0.2.x/05-macros-documentation.md","tags":[],"version":"0.2.x","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761482611000,"sidebarPosition":5,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Extending generated code","permalink":"/Seaography/docs/0.2.x/extending-code"},"next":{"title":"DataLoader","permalink":"/Seaography/docs/0.2.x/data-loader"}}');var i=t(8790),a=t(8032);const o={},s="Macros documentation",l={},u=[{value:"<code>Filter</code> derive",id:"filter-derive",level:2},{value:"Attributes",id:"attributes",level:3},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"<code>RelationsCompact</code> derive",id:"relationscompact-derive",level:2},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3},{value:"<code>relation</code> macro",id:"relation-macro",level:2},{value:"Input",id:"input-2",level:3},{value:"Output",id:"output-2",level:3},{value:"<code>EnumFilter</code> derive",id:"enumfilter-derive",level:2},{value:"Input",id:"input-3",level:3},{value:"Output",id:"output-3",level:3},{value:"<code>QueryRoot</code> macro",id:"queryroot-macro",level:2},{value:"Attributes",id:"attributes-1",level:3},{value:"Input",id:"input-4",level:3},{value:"Output",id:"output-4",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"macros-documentation",children:"Macros documentation"})}),"\n",(0,i.jsxs)(n.h2,{id:"filter-derive",children:[(0,i.jsx)(n.code,{children:"Filter"})," derive"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Filter"})," derive macro is attached on Sea ORM Models to generate structures and functions that are used by the QueryRoot to provide query functionality on Entities."]}),"\n",(0,i.jsx)(n.h3,{id:"attributes",children:"Attributes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[sea_orm(table_name = "film")]\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"table_name: used to supply the macro with the entity name that will be used for the structure names"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"input",children:"Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[derive(\n    Clone,\n    Debug,\n    PartialEq,\n    DeriveModel,\n    DeriveActiveModel,\n    async_graphql::SimpleObject, // Required by Async GraphQL\n    seaography::macros::Filter, // The macro\n)]\n#[sea_orm(table_name = "film")]\n#[graphql(complex)] // Used by Relations derive\n#[graphql(name = "Film")] // Required by Async GraphQL\npub struct Model {\n    pub film_id: u16,\n    pub title: String,\n    pub rating: Option<Rating>,\n    pub last_update: DateTimeUtc,\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"output",children:"Output"}),"\n",(0,i.jsx)(n.p,{children:"Used to describe complex SQL filters"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, async_graphql::InputObject)]\n#[graphql(name = "FilmFilter")]\npub struct Filter {\n    pub or: Option<Vec<Box<Filter>>>,\n    pub and: Option<Vec<Box<Filter>>>,\n    pub film_id: Option<seaography::TypeFilter<u16>>,\n    pub title: Option<seaography::TypeFilter<String>>,\n    // See Enumeration derive\n    pub rating: Option<crate::entities::sea_orm_active_enums::RatingEnumFilter>,\n    pub last_update: Option<seaography::TypeFilter<DateTimeUtc>>,\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Used to receive a ",(0,i.jsx)(n.code,{children:"Filter"})," struct and convect it into sea_orm::Condition that is applied on sea_orm query statement"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub fn filter_recursive(root_filter: Option<Filter>) -> sea_orm::Condition {\n    ...\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Used to describe order by"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, async_graphql::InputObject)]\n#[graphql(name = "FilmOrderBy")]\npub struct OrderBy {\n    pub film_id: Option<seaography::OrderByEnum>,\n    pub title: Option<seaography::OrderByEnum>,\n    pub rating: Option<seaography::OrderByEnum>,\n    pub last_update: Option<seaography::OrderByEnum>,\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Used to receive a query statement and OrderBy struct and update the statement with desired ordering."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub fn order_by(stmt: sea_orm::Select<Entity>, order_by_struct: Option<OrderBy>) -> sea_orm::Select<Entity> {\n    ...\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"relationscompact-derive",children:[(0,i.jsx)(n.code,{children:"RelationsCompact"})," derive"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"RelationsCompact"})," derive macro is attached on Sea ORM Relation enum to generate structures and functions that are used by the Entity to query related Entities. This derive is applied on Entities in compact form."]}),"\n",(0,i.jsx)(n.h3,{id:"input-1",children:"Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[derive(\n    Copy,\n    Clone,\n    Debug,\n    EnumIter,\n    DeriveRelation,\n    seaography::macros::RelationsCompact,\n)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "super::employees::Entity",\n        from = "Column::SupportRepId",\n        to = "super::employees::Column::EmployeeId",\n        on_update = "NoAction",\n        on_delete = "NoAction"\n    )]\n    Employees,\n    #[sea_orm(has_many = "super::invoices::Entity")]\n    Invoices,\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"output-1",children:"Output"}),"\n",(0,i.jsx)(n.p,{children:"The following are implemented for Entity Model:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Requires graphql complex flag enabled on Model\n#[async_graphql::ComplexObject]\nimpl Model {\n    pub fn employees<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n    ) -> Option<#return_type>\n    {\n      ...\n    }\n\n    pub fn invoices<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n    ) -> Option<#return_type>\n    {\n      // Uses context.dataloader.load::<InvoicesFK>(...) to dispatch query\n      ...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For every enum variant the following things are generated:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Used for the context loader\n#[derive(Clone, Debug)]\npub struct EmployeesFK(...);\n\n// Implement load fn for Foreign key\n#[async_trait::async_trait]\nimpl async_graphql::dataloader::Loader<EmployeesFK> for crate::OrmDataloader {\n    type Value = #return_type;\n    type Error = std::sync::Arc<sea_orm::error::DbErr>;\n\n    async fn load(\n        &self,\n        keys: &[#EmployeesFK],\n    ) -> Result<\n        std::collections::HashMap<#EmployeesFK, Self::Value>,\n        Self::Error\n    >\n    {\n        ...\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"relation-macro",children:[(0,i.jsx)(n.code,{children:"relation"})," macro"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"relation"})," macro is attached on Sea ORM RelationTrait implementation to generate structures and functions that are used by the Entity to query related Entities. This derive is applied on Entities in expanded form."]}),"\n",(0,i.jsx)(n.h3,{id:"input-2",children:"Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[seaography::macros::relation]\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Employees => Entity::belongs_to(super::employees::Entity)\n                .from(Column::SupportRepId)\n                .to(super::employees::Column::EmployeeId)\n                .into(),\n            Self::Invoices => Entity::has_many(super::invoices::Entity).into(),\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"output-2",children:"Output"}),"\n",(0,i.jsxs)(n.p,{children:["It produces the same result as ",(0,i.jsx)(n.code,{children:"RelationsCompact"})]}),"\n",(0,i.jsxs)(n.h2,{id:"enumfilter-derive",children:[(0,i.jsx)(n.code,{children:"EnumFilter"})," derive"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EnumFilter"})," macro is attached on Sea ORM Enum to generate its GraphQL filter struct used on Entities Filters"]}),"\n",(0,i.jsx)(n.h3,{id:"input-3",children:"Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#![doc = "SeaORM Entity. Generated by sea-orm-codegen 0.9.1"]\nuse sea_orm::entity::prelude::*;\n#[derive(\n    Debug,\n    Clone,\n    PartialEq,\n    EnumIter,\n    DeriveActiveEnum,\n    Eq,\n    Copy,\n    async_graphql::Enum, // Required by GraphQL\n    seaography::macros::EnumFilter, // The macro\n)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rating")]\npub enum Rating {\n    #[sea_orm(string_value = "G")]\n    G,\n    #[sea_orm(string_value = "PG")]\n    Pg,\n    #[sea_orm(string_value = "PG-13")]\n    Pg13,\n    #[sea_orm(string_value = "R")]\n    R,\n    #[sea_orm(string_value = "NC-17")]\n    Nc17,\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"output-3",children:"Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[derive(Debug, async_graphql::InputObject)]\npub struct RatingEnumFilter {\n    pub eq: Option<Rating>,\n    pub ne: Option<Rating>,\n    pub gt: Option<Rating>,\n    pub gte: Option<Rating>,\n    pub lt: Option<Rating>,\n    pub lte: Option<Rating>,\n    pub is_in: Option<Vec<Rating>>,\n    pub is_not_in: Option<Vec<Rating>>,\n    pub is_null: Option<bool>,\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"queryroot-macro",children:[(0,i.jsx)(n.code,{children:"QueryRoot"})," macro"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"QueryRoot"})," derive macro is used to generate queries for every Entity that is defined through attributes. The query supports filtering, pagination and ordering."]}),"\n",(0,i.jsx)(n.h3,{id:"attributes-1",children:"Attributes"}),"\n",(0,i.jsxs)(n.p,{children:["It enables the query for the specified path ",(0,i.jsx)(n.code,{children:"Entity"})," and it also instructs the ",(0,i.jsx)(n.code,{children:"QueryRoot"})," derive where to find the required utilities structures and functions for the generated code."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[seaography(entity = "crate::entities::artists")]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"input-4",children:"Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[derive(Debug, seaography :: macros :: QueryRoot)]\n#[seaography(entity = "crate::entities::artists")]\n#[seaography(entity = "crate::entities::employees")]\npub struct QueryRoot;\n'})}),"\n",(0,i.jsx)(n.h3,{id:"output-4",children:"Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[derive(Debug, async_graphql::InputObject)]\npub struct PageInput {\n    pub limit: usize,\n    pub page: usize,\n}\n\n#[derive(Debug, async_graphql::InputObject)]\npub struct CursorInput {\n    pub cursor: Option<String>,\n    pub limit: u64,\n}\n\n#[derive(async_graphql::OneofObject)]\npub enum Pagination {\n    Pages(PageInput),\n    Cursor(CursorInput),\n}\n\n/// Extra fields for pager pagination\n#[derive(async_graphql::SimpleObject)]\npub struct ExtraPaginationFields {\n    pub pages: Option<usize>,\n    pub current: Option<usize>,\n}\n\n/// CursorValues is used to encode/decode the primary key of any Model for cursor pagination\n#[derive(Debug)]\npub struct CursorValues(pub Vec<sea_orm::Value>);\n\nimpl async_graphql::types::connection::CursorType for CursorValues {\n    type Error = String;\n\n    /// Used to decode cursor String into a vector of Values\n    fn decode_cursor(s: &str) -> Result<Self, Self::Error> {\n        ...\n    }\n\n    /// Used to encode a vector of Values into a cursor String\n    fn encode_cursor(&self) -> String {\n        ...\n    }\n}\n\n/// Used to track the parsing state of the cursor String\n#[derive(Debug)]\npub enum DecodeMode {\n    Type,\n    Length,\n    ColonSkip,\n    Data,\n}\n\n/// Used to parse a vector of Values into a ValueTuple enum\npub fn map_cursor_values(values: Vec<sea_orm::Value>) -> sea_orm::sea_query::value::ValueTuple {\n    ...\n}\n\n#[async_graphql::Object]\nimpl QueryRoot {\n    pub async fn actor<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n        filters: Option<crate::entities::actor::Filter>,\n        pagination: Option<Pagination>,\n        order_by: Option<crate::entities::actor::OrderBy>,\n    ) -> async_graphql::types::connection::Connection<\n        String,\n        crate::entities::actor::Model,\n        ExtraPaginationFields,\n        async_graphql::types::connection::EmptyFields,\n    > {\n        // 1. use definitions\n        // 2. initialize db connection\n        // 3. create sql statement\n        // 4. apply filters and ordering\n        // 5. apply pagination\n        // 6. return result\n    }\n\n    pub async fn address<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n        filters: Option<crate::entities::address::Filter>,\n        pagination: Option<Pagination>,\n        order_by: Option<crate::entities::address::OrderBy>,\n    ) -> async_graphql::types::connection::Connection<\n        String,\n        crate::entities::address::Model,\n        ExtraPaginationFields,\n        async_graphql::types::connection::EmptyFields,\n    > {\n        ...\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);