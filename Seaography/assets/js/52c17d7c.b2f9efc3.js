"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[4385],{8032:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var o=t(2374);const s={},r=o.createContext(s);function i(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),o.createElement(r.Provider,{value:e},n.children)}},9210:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"custom-endpoints/custom-mutation","title":"Custom Mutation","description":"Simple operations","source":"@site/docs/04-custom-endpoints/03-custom-mutation.md","sourceDirName":"04-custom-endpoints","slug":"/custom-endpoints/custom-mutation","permalink":"/Seaography/docs/custom-endpoints/custom-mutation","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/docs/04-custom-endpoints/03-custom-mutation.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761305479000,"sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Custom Query","permalink":"/Seaography/docs/custom-endpoints/custom-query"},"next":{"title":"Custom Union","permalink":"/Seaography/docs/custom-endpoints/custom-union"}}');var s=t(8790),r=t(8032);const i={},a="Custom Mutation",l={},u=[{value:"Simple operations",id:"simple-operations",level:2},{value:"Handling Uploads",id:"handling-uploads",level:2},{value:"Custom Mutation with Custom Input",id:"custom-mutation-with-custom-input",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"custom-mutation",children:"Custom Mutation"})}),"\n",(0,s.jsx)(e.h2,{id:"simple-operations",children:"Simple operations"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'#[CustomFields]\nimpl Operations {\n    async fn hello(_ctx: &Context<\'_>, name: String) -> async_graphql::Result<String> {\n        Ok(format!("Hello, {}!", name))\n    }\n\n    async fn sum(_ctx: &Context<\'_>, x: i32, y: i32) -> async_graphql::Result<i32> {\n        Ok(x + y)\n    }\n\n    async fn verify(ctx: &Context<\'_>, token: String) -> async_graphql::Result<profile::Model> {\n        let db = ctx.data::<DatabaseConnection>()?;\n        let session = ctx.data::<Session>()?;\n        verify_user_token(session.user_id, &token)?;\n        // verification succeeds, return user profile\n        Ok(profile::Entity::find_by_user_id(session.user_id)\n            .one(db)\n            .await?\n            .ok_or_else(|| DbErr::RecordNotFound("Profile not found".into()))?)\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"handling-uploads",children:"Handling Uploads"}),"\n",(0,s.jsxs)(e.p,{children:["Refer to ",(0,s.jsx)(e.code,{children:"async-graphql"})," ",(0,s.jsx)(e.a,{href:"https://docs.rs/async-graphql/latest/async_graphql/types/struct.Upload.html",children:"documentation"})," for more info."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'use async_graphql::Upload;\n\n#[CustomFields]\nimpl Operations {\n    async fn upload(ctx: &Context<\'_>, upload: Upload) -> async_graphql::Result<String> {\n        Ok(format!(\n            "uploaded: filename={}",\n            upload.value(ctx).unwrap().filename\n        ))\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"custom-mutation-with-custom-input",children:"Custom Mutation with Custom Input"}),"\n",(0,s.jsx)(e.p,{children:"Say we want to create a transactional endpoint for staff members in store to handle customer rentals."}),"\n",(0,s.jsx)(e.p,{children:"First we can design the data structures for the input form:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"use sea_orm::entity::prelude::{DateTimeUtc};\nuse seaography::{async_graphql, CustomFields, CustomInputType};\n\n#[derive(Clone, CustomInputType)]\npub struct RentalRequest {\n    pub customer: String,\n    pub film: String,\n    pub coupon: Option<Coupon>, // \u2b05 nested objects are supported\n    pub timestamp: DateTimeUtc,\n}\n\n#[derive(Clone, CustomInputType)]\npub struct Coupon {\n    pub code: String,\n    pub points: Option<Decimal>,\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"Then we can define the mutation endpoint. The business logic is:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"Look up the specifc customer and film"}),"\n",(0,s.jsx)(e.li,{children:"Find if there is inventory in store. If not, return error"}),"\n",(0,s.jsx)(e.li,{children:"Create a new rental record and remove the item from inventory"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:"#[CustomFields]\nimpl Operations {\n    async fn rental_request(\n        ctx: &Context<'_>,\n        rental_request: RentalRequest,\n        //              \u2b06 our custom input struct\n    ) -> async_graphql::Result<rental::Model> {\n        //                     \u2b06 a normal SeaORM Model\n        let db = ctx.data::<DatabaseConnection>()?;\n        let session = ctx.data::<Session>()?;\n        let txn = db.begin().await?;\n        //  \u2b06 create a transaction to make operation atomic\n\n        let customer = Customer::find_by_name(rental_request.customer, &txn).await?;\n        let film = Film::find_by_title(rental_request.film, &txn).await?;\n        //  \u2b06 helper methods to find the corresponding customer and film\n\n        //  \u2b07 find if there is inventory in current store\n        let inventory = Inventory::find()\n            .filter(inventory::Column::FilmId.eq(film.id))\n            .filter(inventory::Column::StoreId.eq(session.store_id))\n            .one(&txn)\n            .unwrap_or(Error::NoInventory)?;\n        //  \u2b06 return error if no inventory\n\n        let rental = rental::ActiveModel {\n            rental_date: Set(rental_request.timestamp),\n            inventory_id: Set(inventory.id),\n            customer_id: Set(customer.id),\n            staff_id: Set(session.staff_id), // \u2b05 current staff\n            last_update: Set(Utc::now()),\n            ..Default::default()\n        }.insert(&txn).await?;\n\n        inventory.delete(&txn).await?;\n        //       \u2b06 now remove it from inventory\n        txn.commit().await?;\n        // \u2b07 return the newly created rental record\n        Ok(rental)\n    }\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}}}]);