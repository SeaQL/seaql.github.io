"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[8419],{7791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"access-control/filters","title":"Fine-grained Filters","description":"While guards can be used to protect resources, it\'s not useful in endpoints for listing resources. For this purpose you can use entity filter.","source":"@site/docs/06-access-control/04-filters.md","sourceDirName":"06-access-control","slug":"/access-control/filters","permalink":"/Seaography/docs/access-control/filters","draft":false,"unlisted":false,"editUrl":"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/docs/06-access-control/04-filters.md","tags":[],"version":"current","lastUpdatedBy":"Chris Tsang","lastUpdatedAt":1761305479000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Entity / Field Guards","permalink":"/Seaography/docs/access-control/guards"},"next":{"title":"Role Based Access Control","permalink":"/Seaography/docs/access-control/rbac"}}');var s=n(8790),r=n(8032);const i={},c="Fine-grained Filters",a={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"fine-grained-filters",children:"Fine-grained Filters"})}),"\n",(0,s.jsx)(t.p,{children:"While guards can be used to protect resources, it's not useful in endpoints for listing resources. For this purpose you can use entity filter."}),"\n",(0,s.jsx)(t.p,{children:"Imagine you have a drawing app, and users can only access projects they own. You can implement the access control logic like the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'struct AccessControlHook;\n\nimpl LifecycleHooksInterface for AccessControlHook {\n    fn entity_filter(\n        &self,\n        ctx: &ResolverContext,\n        entity: &str,\n        action: OperationType, // \u2b05 Read, Create, Update, Delete\n    ) -> Option<Condition> {\n        let session = ctx.data::<Session>()?;\n        //  \u2b06 extract user session\n        match entity {\n            "Project" => Some(\n                Condition::all()\n                    .add(project::Column::OwnerId.eq(session.user_id))\n                //  \u2b06 add custom filter condition\n            ),\n            _ => None,\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"This method is called on Read, Create, Update, Delete. So you can apply conditional logic based on operation performed and other information from context."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8032:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(2374);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);